<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE MudletPackage>
<MudletPackage version="1.001">
	<TriggerPackage />
	<TimerPackage />
	<AliasPackage>
		<AliasGroup isActive="yes" isFolder="yes">
			<name>Darkside 5.0</name>
			<script></script>
			<command></command>
			<packageName>Sunder v4.12</packageName>
			<regex></regex>
			<AliasGroup isActive="yes" isFolder="yes">
				<name>Darkside</name>
				<script></script>
				<command></command>
				<packageName></packageName>
				<regex></regex>
				<AliasGroup isActive="yes" isFolder="yes">
					<name>Core</name>
					<script></script>
					<command></command>
					<packageName></packageName>
					<regex></regex>
					<AliasGroup isActive="yes" isFolder="yes">
						<name>Vitals</name>
						<script></script>
						<command></command>
						<packageName></packageName>
						<regex></regex>
						<Alias isActive="yes" isFolder="no">
							<name>setup</name>
							<script>snd.send("config wrapwidth 0")
snd.send("config separator ##")
snd.send("config auto_outc on")
snd.send("config tellsprefix on")
snd.send("config curemsgs default")
snd.send("config fishnumbers on")
send("config affliction_view on", false)
send("config simple_diag on", false)
send("config pagelength 250", false)
send("config grabcorpses on", false)
send("config viewtitles off", false)
send("config combatmessages on", false)
send("config autodoors on", false)
send("Config Ansi ON", false)
send("Config mxp on", false)
send("config simpletargeting on", false)
send("config dialogue highlight", false)
send("Config prettynumbers off", false)</script>
							<command></command>
							<packageName></packageName>
							<regex>^\?setup$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>halp</name>
							<script>cecho("&lt;white&gt;Welcome to &lt;green&gt;Sunder&lt;white&gt;!")
cecho("\n&lt;blue&gt;Here are some useful commands you should know:")
cecho("\n&lt;red&gt;If you have not used Sunder before, please enter the command ?setup.")
cecho("\n &lt;green&gt;?setup&lt;white&gt;             To config Aetolia to fit Sunder.")
cecho("\n ")
cecho("\n&lt;red&gt;System commands:")
cecho("\n &lt;green&gt;on/off&lt;white&gt;             Turn the system on/off.")
cecho("\n &lt;green&gt;stap&lt;white&gt;               Will stop whatever you're doing.")
cecho("\n &lt;green&gt;t \&lt;poor sap\&gt;&lt;white&gt;       To set your current target.")
cecho("\n &lt;green&gt;ldd/defup \&lt;option\&gt;&lt;white&gt; will load defenses based on your current class.")
cecho("\n &lt;green&gt;kd \&lt;defense\&gt;&lt;white&gt;       to toggle keeping a defense on or off.")
cecho("\n &lt;green&gt;mnt&lt;white&gt;                Call and mount your set mount.")
cecho("\n &lt;green&gt;dm&lt;white&gt;                 Dismount and dismiss your set mount.")
cecho("\n &lt;green&gt;vermon&lt;white&gt;             Experimental auto-vermin for Spinesreach.")
cecho("\n &lt;green&gt;halp fishing&lt;white&gt;       Explanation of how to use the fisher.")
cecho("\n &lt;green&gt;firstaidstart&lt;white&gt;      Basic firstaid setup if anything borks.")
cecho("\n &lt;green&gt;pt \&lt;location\&gt;&lt;white&gt;      quickly travel to that landmark.")
cecho("\n              &lt;white&gt;      Try entering 'landmarkst' to see ones set up already!")
cecho("\n&lt;red&gt;Bashing commands to know:")
cecho("\n &lt;green&gt;aa&lt;white&gt;                 Will automatically hit things in the room, if it knows it exists.")
cecho("\n              &lt;white&gt;      Use this if you're following someone that is bashing.")
cecho("\n &lt;green&gt;gogo&lt;white&gt;               Turns on the automatic movement for bashing, following a defined path.")
cecho("\n              &lt;white&gt;      You can either use 'gogo low' or 'gogo high'.")
cecho("\n              &lt;white&gt;      If you choose neither, it picks based on level!")
cecho("\n &lt;green&gt;grp &lt;friend&gt;&lt;white&gt;       Sets someone in your group in Sunder's knowledge.")
cecho("\n              &lt;white&gt;      Sunder won't bash in a room with someone else unless they're grouped!")
cecho("\n&lt;red&gt;PK commands to know:")
cecho("\n &lt;green&gt;?pk&lt;white&gt;                Will introduce you to using Sunder to PK!")
cecho("\n &lt;green&gt;dison&lt;white&gt;              Turn disperse mode on and off! Disperse your friends! Requires refining disperse.")
cecho("\n ")</script>
							<command></command>
							<packageName></packageName>
							<regex>^halp$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>toggles</name>
							<script>cecho("&lt;white&gt;Toggles:")
for tog in pairs(snd.toggles) do
 if snd.toggles[tog] then
  cecho("&lt;green&gt;\n"..string.title(tog))
 else
  cecho("&lt;red&gt;\n"..string.title(tog))
 end
end
send(" ")</script>
							<command></command>
							<packageName></packageName>
							<regex>^togs$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>PK help</name>
							<script>cecho("&lt;white&gt;Welcome to &lt;green&gt;Sunder PK&lt;white&gt;!")
cecho("\n&lt;red&gt;PK commands to know:")
cecho("\n &lt;green&gt;loc&lt;white&gt;                Call out your place in the world.")
cecho("\n &lt;green&gt;acl&lt;white&gt;                Short for affliction calling - toggle on/off.")
cecho("\n &lt;green&gt;tcl&lt;white&gt;                Short for target calling     - toggle on/off.")
cecho("\n &lt;green&gt;ls &lt;leader&gt;&lt;white&gt;        Declare the name of someone so you can follow targets.")
cecho("\n ")
cecho("\n&lt;firebrick&gt;When you get into PK, you want to make sure the first thing you do is '&lt;green&gt;ls &lt;leader name&gt;'.")
cecho("\n&lt;firebrick&gt;This will make sure you're following targets. &lt;red&gt;Look in web or ask who is calling targets.")
cecho("\n&lt;firebrick&gt;Next is to make sure you have &lt;green&gt;ACL&lt;firebrick&gt; toggled ON. You want to let your friends know what you're doing!")
cecho("\n ")
cecho("\n&lt;firebrick&gt;After that, listen to your leader to see what advice they may have. Perhaps they ask you to block")
cecho("\n&lt;firebrick&gt;a certain direction, if you can. Perhaps they ask you to drop a certain class effect. If you're")
cecho("\n&lt;firebrick&gt;not sure what they mean, that's okay! Just tell them over web that you can't at the moment. Once")
cecho("\n&lt;firebrick&gt;all of the fighting is over, feel free to bring up your questions. If you can't get a great answer")
cecho("\n&lt;firebrick&gt;or you're not sure what it means, please feel encouraged to ask further!")
cecho("\n ")
cecho("\n&lt;firebrick&gt;Below, you will find a few different aliases that you will type in, hit enter and start to attack.")
cecho("\n&lt;firebrick&gt;It is encouraged to try these in a training room environment to get a feel for how they work.")
cecho("\n&lt;firebrick&gt;If at any time you need to stop, just type &lt;green&gt;stap&lt;firebrick&gt;.")
cecho("\n&lt;firebrick&gt;")
cecho("\n ")
cecho("\n&lt;red&gt;Your class can use the following aliases:")
if snd.class == "Monk" then
cecho("\n&lt;goldenrod&gt;Afflictions:")
cecho("\n &lt;green&gt;aff&lt;white&gt;                - Will use mind batter to hit with affs, if enemy prone then wrench.")
cecho("\n&lt;goldenrod&gt;Damage:")
cecho("\n &lt;green&gt;head &lt;white&gt;              - Used for damage, does not deviate unless target is proned.")
cecho("\n&lt;goldenrod&gt;Limbs:")
cecho("\n &lt;green&gt;ms&lt;white&gt;                 - Used to hit different limbs, will change combo depending on parry.")
elseif snd.class == "Shapeshifter" then
cecho("\n&lt;goldenrod&gt;Damage:")
cecho("\n &lt;green&gt;dmg&lt;white&gt;                - Goes for the head. Each time. Big damage/bleeding if not parried.")
cecho("\n&lt;goldenrod&gt;Limb:")
cecho("\n &lt;green&gt;ms &lt;white&gt;                - Straight limb breaks into jawlocks.")
cecho("\n &lt;green&gt;kll &lt;white&gt;               - Skiva's basic route.")
cecho("\n &lt;green&gt;quart &lt;white&gt;             - Skiva's quarter route.")
cecho("\n &lt;green&gt;insta&lt;white&gt;              - Goes for quarter kills. Check AB QUARTER for more information.")
cecho("\n &lt;green&gt;limbs&lt;white&gt;              - Utilizes slash to delay limb breaks, good for pushing level 2 breaks.")
elseif snd.class == "Syssin" then
cecho("\n&lt;goldenrod&gt;Afflictions:")
cecho("\n &lt;green&gt;ms &lt;white&gt;                - Basic dstab w/venoms. No hypnosis.")
cecho("\n &lt;green&gt;magic&lt;white&gt;              - More advanced, geared towards magic, uses hypnosis.")
cecho("\n &lt;green&gt;aff&lt;white&gt;                - More advanced, geared towards physical, uses hypnosis.")
cecho("\n &lt;green&gt;kl&lt;white&gt;                 - 1v1 offense. Does not snap for you as that requires timing.")
cecho("\n&lt;goldenrod&gt;Damage:")
cecho("\n &lt;green&gt;dmg&lt;white&gt;                - Straight damage - will backstab when hidden or phased.")
elseif snd.class == "Wayfarer" then
cecho("\n&lt;goldenrod&gt;Afflictions:")
cecho("\n &lt;green&gt;legs &lt;white&gt;              - Uses lob to pressure leg breaks, will try to dropstrike if able.")
cecho("\n &lt;green&gt;lock&lt;white&gt;               - Experimental skirmish route to seal locks w/slaughter and muddled.")
cecho("\n&lt;goldenrod&gt;Damage:")
cecho("\n &lt;green&gt;dmg&lt;white&gt;                - Sensitivity/sight to support transfix. Boosted halt to keep people in room.")
cecho("\n &lt;green&gt;gaff&lt;white&gt;               - Group affs w/preference toward venom lock. Slaughter if prone w/sensitivity.")
elseif snd.class == "Templar" then
cecho("\n&lt;goldenrod&gt;Afflictions:")
cecho("\n &lt;green&gt;ret &lt;white&gt;               - The 1v1 standard. Lock into retribution.")
cecho("\n &lt;green&gt;ms&lt;white&gt;                 - Basic venoms, no bladefire empowerments, does use vorpal.")
cecho("\n &lt;green&gt;newb&lt;white&gt;               - Basic venoms, no bladefire empowerments, no vorpal.")
cecho("\n&lt;goldenrod&gt;Damage:")
cecho("\n &lt;green&gt;dmg&lt;white&gt;                - Use a 2h weapon to zeal/dsw someone and do physical damage.")
cecho("\n &lt;green&gt;gimp&lt;white&gt;               - Affs into either impale or dsw w/sensitivity.")
cecho("\n&lt;goldenrod&gt;Limb:")
cecho("\n &lt;green&gt;limbs&lt;white&gt;              - Two small bludgeon weapons to deal bruising and limb damage.")
elseif snd.class == "Shaman" then
cecho("\n&lt;goldenrod&gt;Afflictions:")
cecho("\n &lt;green&gt;ms &lt;white&gt;                - Straight vinelash w/venoms.")
cecho("\n &lt;green&gt;storm&lt;white&gt;              - Works toward stormtouched, then goes for lightning damage.")
cecho("\n &lt;green&gt;supp&lt;white&gt;               - Aff-lock support.")
elseif snd.class == "Sentinel" then
cecho("\n&lt;goldenrod&gt;Afflictions:")
cecho("\n &lt;green&gt;salve&lt;white&gt;              - Works towards frozen w/limb breaks. Need raloth/icewyrm.")
cecho("\n &lt;green&gt;aff&lt;white&gt;                - Venom lock into spinecut death sequence.")
cecho("\n &lt;green&gt;lumi&lt;white&gt;               - T-fix + sensitivity support.")
cecho("\n &lt;green&gt;ms&lt;white&gt;                 - Just venoms, no dhuriv attacks, perfect for starters.")
elseif snd.class == "Luminary" then
cecho("\n&lt;goldenrod&gt;Afflictions:")
cecho("\n &lt;green&gt;dmg &lt;white&gt;               - Damage kill with aff stacking and overwhelm.")
cecho("\n &lt;green&gt;mana&lt;white&gt;               - Straight mana sap.")
cecho("\n &lt;green&gt;aff&lt;white&gt;                - Build mental affs into disrupt to help root/disrupt.")
cecho("\n &lt;green&gt;ms&lt;white&gt;                 - Sight into tfix/overwhelm.")
elseif snd.class == "Ascendril" then
cecho("\n&lt;goldenrod&gt;Damage:")
cecho("\n &lt;green&gt;damage&lt;white&gt;             - Damage kill")
cecho("\n &lt;green&gt;fire&lt;white&gt;               - Set them ablaze and watch them burn.")
cecho("\n&lt;goldenrod&gt;Afflictions:")
cecho("\n &lt;green&gt;affs&lt;white&gt;               - Build affs!")
cecho("\n &lt;green&gt;solo&lt;white&gt;               - Push limb damage/frozen for a shatter!")
elseif snd.class == "Archivist" then
cecho("\n&lt;goldenrod&gt;Afflictions:")
cecho("\n &lt;green&gt;dmg &lt;white&gt;               - Damage kill")
cecho("\n &lt;green&gt;aff&lt;white&gt;                - Build mental affs and go for unravel")
elseif snd.class == "Carnifex" then
cecho("\n&lt;goldenrod&gt;Afflictions:")
cecho("\n &lt;green&gt;dmg &lt;white&gt;               - Damage kill")
cecho("\n &lt;green&gt;aff&lt;white&gt;                - Build affs!")
cecho("\n &lt;green&gt;limbs&lt;white&gt;              - Overall limb route")
cecho("\n &lt;green&gt;legs&lt;white&gt;               - Specifically for legs!")
cecho("\n &lt;green&gt;pon&lt;white&gt;                - If you want to turn on active purge curing")
elseif snd.class == "Indorani" then
cecho("\n&lt;goldenrod&gt;Afflictions:")
cecho("\n &lt;green&gt;dmg &lt;white&gt;               - Damage kill")
cecho("\n &lt;green&gt;aff&lt;white&gt;                - Build affs! Mostly for unravel support.")
elseif snd.class == "Praenomen" then
cecho("\n&lt;goldenrod&gt;Afflictions:")
cecho("\n &lt;green&gt;dmg &lt;white&gt;               - Damage kill")
cecho("\n &lt;green&gt;aff&lt;white&gt;                - Build affs!")
cecho("\n &lt;green&gt;mez&lt;white&gt;                - Work on siphoning mana for annihilate and mesmerize!")
cecho("\n &lt;green&gt;pon&lt;white&gt;                - If you want to turn on active purify curing")
elseif snd.class == "Teradrim" then
cecho("\n&lt;goldenrod&gt;Afflictions:")
cecho("\n &lt;green&gt;dmg &lt;white&gt;               - Damage kill")
cecho("\n &lt;green&gt;aff&lt;white&gt;                - Build affs!")
cecho("\n &lt;green&gt;pon&lt;white&gt;                - If you want to turn on active scour curing")
elseif snd.class == "Sciomancer" then
cecho("\n&lt;goldenrod&gt;Afflictions:")
cecho("\n &lt;green&gt;dmg &lt;white&gt;               - Damage kill")
cecho("\n &lt;green&gt;aff&lt;white&gt;                - Build affs!")
cecho("\n &lt;green&gt;limbs&lt;white&gt;              - Overall limb route via grip and erupt")
end
cecho("\n ")</script>
							<command></command>
							<packageName></packageName>
							<regex>^\?pk$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>fishing help</name>
							<script>cecho("Help file for fishing:\n")
cecho("\n")
cecho("Fishing has been put together from several different systems. Here's a summary of how to use it:\n")
cecho("1. Put up your wielded items manually and wield your pole.\n")
cecho("2. Go to a fishing hole.\n")
cecho("3. Do 'FISHING DISCERN' to make sure you see fish. This will track the hole type, vnum,\n")
cecho("   and what fish you see automatically in a database it creates on the first time you use it.\n")
cecho("4. If you can fish there and there are fish, type in 'afish' to turn on the auto-fisher.\n")
cecho("5. If you run out of fish in this hole, it will turn off fishing on its own.\n")
cecho("   You can also type in 'afish' to turn it off.\n")
cecho("\n")
cecho("Aliases:\n")
cecho("afish - turn off/on\n")
cecho("fishing search - you can search for a water hole type, or fish, from holes you've discerned")
cecho("\n ")</script>
							<command></command>
							<packageName></packageName>
							<regex>^halp fishing$</regex>
						</Alias>
					</AliasGroup>
					<AliasGroup isActive="yes" isFolder="yes">
						<name>Toggles</name>
						<script></script>
						<command></command>
						<packageName></packageName>
						<regex></regex>
						<Alias isActive="yes" isFolder="no">
							<name>lighting</name>
							<script>snd.toggle("lighting")</script>
							<command></command>
							<packageName></packageName>
							<regex>^lgt$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>on</name>
							<script>snd.toggles.active = true
snd.channeling = false
cecho("&lt;green&gt;Sunder is ON!")
send(" ")</script>
							<command></command>
							<packageName></packageName>
							<regex>^sndon$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>off</name>
							<script>snd.toggles.active = false
snd.channeling = true
cecho("&lt;red&gt;Sunder is OFF!")
send(" ")</script>
							<command></command>
							<packageName></packageName>
							<regex>^sndoff$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>calling</name>
							<script>snd.toggle("calling")
snd.set_faction()</script>
							<command></command>
							<packageName></packageName>
							<regex>^tcl$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>zeal</name>
							<script>snd.toggle("zeal")</script>
							<command></command>
							<packageName></packageName>
							<regex>^tzl$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>affcalling</name>
							<script>snd.toggle("affcalling")</script>
							<command></command>
							<packageName></packageName>
							<regex>^acl$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>gallop</name>
							<script>snd.toggle("gallop")</script>
							<command></command>
							<packageName></packageName>
							<regex>^tgl$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>newb basher</name>
							<script>snd.toggle("newbie")</script>
							<command></command>
							<packageName></packageName>
							<regex>^tnewb$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>parry</name>
							<script>snd.toggle("parrying")</script>
							<command></command>
							<packageName></packageName>
							<regex>^tpry$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>attack echoes</name>
							<script>snd.toggle("atkecho")</script>
							<command></command>
							<packageName></packageName>
							<regex>^tatk$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>listening</name>
							<script>if matches[2] == "off" then
 snd.toggles.listening = false
 cecho("&lt;white&gt;Listening &lt;red&gt;OFF&lt;white&gt;!")
 send(" ")
else
 snd.toggles.listening = true
 if snd.offense_loaded then
  snd.callers = {}
  for name in string.gmatch(matches[2], '([^ ]+)') do
   table.insert(snd.callers, string.title(name))
  end
  cecho("&lt;white&gt;Listening to: &lt;green&gt;"..table.concat(snd.callers, "&lt;white&gt;, &lt;green&gt;").."&lt;white&gt;!")
  send(" ")
 else
  cecho("&lt;white&gt;Listening &lt;green&gt;ON&lt;white&gt;!")
	send(" ")
 end
end</script>
							<command></command>
							<packageName></packageName>
							<regex>^ls (.+)$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>scepter bashing</name>
							<script>snd.toggle("scepter")</script>
							<command></command>
							<packageName></packageName>
							<regex>^tscp$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>rockharvest</name>
							<script>snd.toggle("rockharvest")</script>
							<command></command>
							<packageName></packageName>
							<regex>^tr$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>lightning</name>
							<script>snd.toggle("lightning")</script>
							<command></command>
							<packageName></packageName>
							<regex>^tlgt$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>dash</name>
							<script>snd.toggle("dash")</script>
							<command></command>
							<packageName></packageName>
							<regex>^tds$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>roe</name>
							<script>snd.toggle("roe")</script>
							<command></command>
							<packageName></packageName>
							<regex>^troe$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>Purge/Purify/Scour</name>
							<script>if snd.class == "Praenomen" then
	snd.toggle("purify")
elseif snd.class == "Carnifex" then
	snd.toggle("purge")
elseif snd.class == "Teradrim" then
	snd.toggle("scour")
end</script>
							<command></command>
							<packageName></packageName>
							<regex>^pon$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>Disperse</name>
							<script>snd.toggle("dison")</script>
							<command></command>
							<packageName></packageName>
							<regex>^dison$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>Chameleon</name>
							<script>snd.toggle("cham")
if snd.toggles.cham then
    expandAlias("rcham")
end</script>
							<command></command>
							<packageName></packageName>
							<regex>^tcham$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>Support</name>
							<script>snd.toggle("support")</script>
							<command></command>
							<packageName></packageName>
							<regex>^supon$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>Questing</name>
							<script>snd.toggle("questing")</script>
							<command></command>
							<packageName></packageName>
							<regex>^queston$</regex>
						</Alias>
					</AliasGroup>
					<AliasGroup isActive="yes" isFolder="yes">
						<name>Misc</name>
						<script></script>
						<command></command>
						<packageName></packageName>
						<regex></regex>
						<Alias isActive="yes" isFolder="no">
							<name>mount</name>
							<script>snd.send("qeb recall "..snd.mount..snd.sep.."recall mount"..snd.sep.."quickmount "..snd.mount)
</script>
							<command></command>
							<packageName></packageName>
							<regex>^mnt$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>dismount</name>
							<script>snd.send("qeb qdmount"..snd.sep.."order "..snd.mount.." follow me")</script>
							<command></command>
							<packageName></packageName>
							<regex>^dm$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>shield tattoo</name>
							<script>snd.toggles.attacking = false
snd.toggles.bashing = false
snd.toggles.fasthunt = false
if snd.toggles.attacking then
 snd.send("undefend")
end
if snd.have_aff("paresis") then
 snd.send("firstaid elevate paresis")
end
if snd.class == "Carnifex" then
 snd.send("qeb soul shield")
else
 snd.send("qeb touch shield tattoo")
end</script>
							<command></command>
							<packageName></packageName>
							<regex>^ts$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>wield none</name>
							<script>if (snd.wielded.left.name or snd.wielded.right.name) == "a Master Gulleye's Rod" then
	snd.send("unwield pole")	
else
	snd.send("wipe left"..snd.sep.."wipe right"..snd.sep.."secure left"..snd.sep.."secure right"..snd.sep.."wear tower"..snd.sep.."wear buckler"..snd.sep.."wear shield")
end
</script>
							<command></command>
							<packageName></packageName>
							<regex>^wnon$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>directions</name>
							<script>if snd.toggles.calling then
 snd.send("qeb get monolith"..snd.sep..matches[2]..snd.sep.."drop monolith")
else
 snd.send("qeb "..matches[2])
end</script>
							<command></command>
							<packageName></packageName>
							<regex>^(n|e|s|w|ne|nw|se|sw|in|up?|out|o|d|down)$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>Landmarks w/descriptions</name>
							<script>snd.landmarks_descs = {
["eno"] = "enorian",
["dui"] = "duiran",
["sp"] = "spinesreach",
["bl"] = "bloodloch",
["es"] = "esterport",
["crack"] = "Bloodloch meeting place",
["ty"] = "templar training room",
["rd"] = "Rising dawn - hidden room in enorian",
["milk"] = "Enorian milking room",
["bp"] = "boiling point, bloodloch training room",
["im"] = "ironmaw, spinesreach training room",
["dir"] = "directory",
["tear"] = "tear of lleis for reviving folks instantly",
["tw"] = "three widows",
["tw1"] = "three widows mine (quest)",
["tw2"] = "three widows cows (quest)",
["tw3"] = "jinjin (quest)",
["tw4"] = "turn in alpacas (quest)",
["tw5"] = "turn in kestrels (quest)",
["stp"] = "spinesreach stipend",
["hlb"] = "radek in helba (quest)",
["hlbp"] = "helba pickaxes for sale (quest)",
["hlbm"] = "helba mine (quest)",
["ag"] = "agrasha (quest)",
["put"] = "putoran (quest)",
["gre"] = "grecht with the garden (quest)",
["oy"] = "oysters for bruce (quest)",
["bruce"] = "turn in sapphires (quest)",
["ann"] = "annaria (quest)",
["tue"] = "tuera (quest)",
["tlm"] = "near tellimerius, so darkies don't die (quest)",
["tlmt"] = "turn in tellimerius (quest)",
["vn"] = "venicus (quest)",
["vn1"] = "venicus turnin (quest)",
["sr"] = "siroccian mountains",
["sr1"] = "turn in ores, nuggets, and coal (quest)",
["sr2"] = "if you found the chest with the axe (quest)",
["ms1"] = "24493 (quest)",
["ms2"] = "65216 (quest)",
["ms3"] = "59970 (quest)",
["ms4"] = "60126 (quest)",
["ms5"] = "59967 (quest)",
["ms6"] = "59955 (quest)",
["or"] = "orrery",
["hg"] = "4746",
["nighteye"] = "9342",
["claw"] = "9341",
["shade"] = "6090",
["staghelm"] = "9348",
["silence"] = "4614",
["rose"] = "9341",
["ivory"] = "6842",
["rowan"] = "6842",
["hgshrine"] = "23489",
}

display(snd.landmarks_descs)</script>
							<command></command>
							<packageName></packageName>
							<regex>^landmarkst$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>landmarks</name>
							<script>if snd.landmarks[matches[2]] then
 --snd.send("path track "..snd.landmarks[matches[2]])
 snd.moving_to = snd.landmarks[matches[2]]
else
 --snd.send("path track "..matches[2])
 snd.moving_to = matches[2]
end
snd.core()</script>
							<command></command>
							<packageName></packageName>
							<regex>^pth (\w+)$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>Auto Harvest Rocks</name>
							<script>if snd.toggles.rockharvest then
  snd.which_path = ""
  
  if matches[3] then
    if matches[3] == "bloodwood" or matches[3] == "vortex" or matches[3] == "lair" or matches[3] == "endgame" or matches[3] == "high" or matches[3] == "medium" or matches[3] == "low" then 
      snd.which_path = matches[3]
    else
		  cecho("\n&lt;red&gt;Not a viable choice! Enter a viable choice or only enter 'gogo'!")
		  cecho("\n&lt;green&gt;bloodwood (99+ and separate), vortex (99+ and separate), luziths lair (99+ and separate), endgame (93+), high (61-93), medium (31-60), and low (1-30)")
    end
  else
    local level = ""
    for check in string.gmatch(gmcp.Char.Status.level, '[%d]+') do
      if level == "" then
			   level = tonumber(check)
  		end
    end
    if level &gt; 93 then
		  snd.which_path = "endgame"
    elseif (level &lt; 93 and level &gt; 60) then
		  snd.which_path = "high"
    elseif (level &lt; 60 and level &gt; 31) then
		  snd.which.path = "medium"
	  else
  		snd.which_path = "low"
  	end
  end
  
  if snd.rock_on then
	  snd.rock_on = false
	  bot.going = false
	  echo("ROCK HARVEST OFF")
  else
	  snd.rock_on = true
	  echo("ROCK HARVEST ON")
	end

  
	if snd.which_path ~= "" then
  	bot.going = true
		bot.path =  sndpathpick()
	end
	
end

</script>
							<command></command>
							<packageName></packageName>
							<regex>^rockgo( (\w+))?$</regex>
						</Alias>
					</AliasGroup>
					<Alias isActive="yes" isFolder="no">
						<name>Actual Chameleon</name>
						<script>local cham = math.random(#snd.shadow)

if snd.toggles.cham then
    snd.send("chameleon " ..snd.spirit[cham], false)
    snd.send("touch chameleon " ..snd.spirit[cham], false)
end</script>
						<command></command>
						<packageName></packageName>
						<regex>^rcham$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>target</name>
						<script>snd.target = string.title(matches[2])
if snd.toggles.calling then
 snd.send("wt Target: "..snd.target)
end
echo("Target: "..snd.target)
send(" ")
if snd.target_trigger_id then killTrigger(snd.target_trigger_id) end
snd.target_trigger_id = tempTrigger(snd.target, [[selectString("]] .. snd.target .. [[", 1) fg("DarkOrchid") resetFormat()]])
if snd.target_trigger_idlow then killTrigger(snd.target_trigger_idlow) end
snd.target_trigger_idlow = tempTrigger(string.lower(snd.target), [[selectString("]] .. string.lower(snd.target) .. [[", 1) fg("DarkOrchid") resetFormat()]])
if snd.offense_loaded then
 snd.reset_target()
 snd.target_gone = false
end
if snd.gui_loaded then
 enemy:echo("&lt;center&gt;[["..snd.target.."]]&lt;/center&gt;")
 if #snd.target_has &gt; 1 then
 	eaffs:echo(table.concat(snd.target_has, "&lt;br&gt;"))
 else
 	eaffs:echo("&lt;center&gt;enemy affs&lt;/center&gt;")
 end
end</script>
						<command></command>
						<packageName></packageName>
						<regex>^t (.*)$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>stop attacking</name>
						<script>snd.toggles.attacking = false
snd.send("queue clear")
snd.send("path stop")
if snd.bashing_loaded then
 if snd.toggles.fasthunt then
  expandAlias("ff", false)
 end
 bot.going = false
 snd.toggles.bashing = false
 snd.defenses.def_vigor.needit = false
 snd.which_path = ""
end
if snd.offense_loaded then
 snd.send("target nothing"..snd.sep.."target nothing with right")
 snd.hound_queue = {}
end
if mmp ~= nil then
 expandAlias("mstop", false)
end
if snd.ylem_loaded then
 ylm.active = false
end
snd.pathing = false
if snd.enemylist then
  snd.send("config enemylist off")
end</script>
						<command></command>
						<packageName></packageName>
						<regex>^stap$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>target call over web - individual targets</name>
						<script>send("wt Target: "..matches[2])
snd.target = string.title(matches[2])
echo("Target: "..snd.target)
send(" ")
if snd.gui_loaded then
 enemy:echo("&lt;center&gt;[["..snd.target.."]]&lt;/center&gt;")
 if #snd.target_has &gt; 1 then
 	eaffs:echo(table.concat(snd.target_has, "&lt;br&gt;"))
 else
 	eaffs:echo("enemy affs")
 end
end

if snd.target_trigger_id then killTrigger(snd.target_trigger_id) end
snd.target_trigger_id = tempTrigger(snd.target, [[selectString("]] .. snd.target .. [[", 1) fg("DarkOrchid") resetFormat()]])
if snd.target_trigger_idlow then killTrigger(snd.target_trigger_idlow) end
snd.target_trigger_idlow = tempTrigger(string.lower(snd.target), [[selectString("]] .. string.lower(snd.target) .. [[", 1) fg("DarkOrchid") resetFormat()]])
--if snd.offense_loaded then
 snd.reset_target()
--end</script>
						<command></command>
						<packageName></packageName>
						<regex>^tc (\w+)$</regex>
					</Alias>
					<AliasGroup isActive="yes" isFolder="yes">
						<name>Auto Targeting</name>
						<script></script>
						<command></command>
						<packageName></packageName>
						<regex></regex>
						<Alias isActive="yes" isFolder="no">
							<name>Add Target List</name>
							<script>local list = matches[2]:gsub(" ", ", ")

swarm.addTargetList(list)
swarm.callTargetList()</script>
							<command></command>
							<packageName></packageName>
							<regex>^atl (.+)$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>Add Target Position</name>
							<script>local tar = matches[2]:title()
local pos = matches[3] or nil

swarm.addSingleTarget(tar, pos)

if snd.toggles.calling then --! NOTE: Replace with your system's toggle variable. Cf notes in the scripts.
	if pos then
		send("wt Target priority: " .. tar .. " " .. pos)
	else
		send("wt Target priority: " .. tar)
	end
end</script>
							<command></command>
							<packageName></packageName>
							<regex>^atp (\w+)(?:\s)?(\d+)?$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>List Targets</name>
							<script>swarm.displayTargetList()
swarm.callTargetList()</script>
							<command></command>
							<packageName></packageName>
							<regex>^tlist$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>Clear Target List</name>
							<script>swarm.clearTargetList()</script>
							<command></command>
							<packageName></packageName>
							<regex>^atlc$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>Toggle Auto Targeting</name>
							<script>if swarm.targeting.auto then
	swarm.e.warn("AUTO TARGETING DISABLED!", true, true)
	swarm.targeting.auto = false
	swarm.clearTargetList()
else
	swarm.e.warn("AUTO TARGETING ENABLED!", true, true)
	swarm.targeting.auto = true
end</script>
							<command></command>
							<packageName></packageName>
							<regex>^sat$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>Next Target</name>
							<script>swarm.e.echo("Finding next target!", true, true)
swarm.autoTargeting()</script>
							<command></command>
							<packageName></packageName>
							<regex>^nt$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>Remove Target</name>
							<script>local who = matches[2]:title()

swarm.removeTarget(who)

if snd.toggles.calling then --! NOTE: Replace with your system's toggle variable. Cf notes in the scripts.
	send("wt Target removed: " .. who)
end</script>
							<command></command>
							<packageName></packageName>
							<regex>^atr (\w+)$</regex>
						</Alias>
					</AliasGroup>
				</AliasGroup>
				<AliasGroup isActive="yes" isFolder="yes">
					<name>Bashing</name>
					<script></script>
					<command></command>
					<packageName></packageName>
					<regex></regex>
					<Alias isActive="yes" isFolder="no">
						<name>start bashing</name>
						<script>snd.toggles.bashing = true
cecho("&lt;green&gt;Bashing ON!")
send(" ")
snd.room_clear = true
snd.defenses.def_vigor.needit = true
snd.send("config groupmove on")
if snd.enemylist then
  snd.send("config enemylist off")
end</script>
						<command></command>
						<packageName></packageName>
						<regex>^aa$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>stop bashing</name>
						<script>snd.toggles.bashing = false
snd.defenses.def_vigor.needit = false
cecho("&lt;green&gt;Bashing OFF!")
if snd.toggles.fasthunt then
 snd.toggles.fasthunt = false
 echo("\nFasthunt OFF!")
end
snd.send("queue clear")
send(" ")</script>
						<command></command>
						<packageName></packageName>
						<regex>^ast$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>fasthunt</name>
						<script>snd.toggle("fasthunt")</script>
						<command></command>
						<packageName></packageName>
						<regex>^ff$</regex>
					</Alias>
					<AliasGroup isActive="yes" isFolder="yes">
						<name>Autobashing</name>
						<script></script>
						<command></command>
						<packageName></packageName>
						<regex></regex>
						<Alias isActive="yes" isFolder="no">
							<name>move</name>
							<script>x = bot.info.room
x = "v"..x
if bot.going then
    if bot.path[x] ~= nil then
      if string.find(bot.path[x], "pth") then
	      y = string.sub(bot.path[x], 4)
	      snd.moving_to = y
	      send(" ")
	    elseif mmp ~= nil then
        expandAlias("goto "..bot.path[x], false)
      else
        snd.moving_to = bot.path[x]
	      send(" ")
      end
    else
      echo("where r we")
    end
end
</script>
							<command></command>
							<packageName></packageName>
							<regex>^move$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>initiate</name>
							<script>snd.which_path = ""

--Set the correct path, whether that is by checking level or using input from the user.
if matches[3] then
	if matches[3] == "bloodwood" or matches[3] == "vortex" or matches[3] == "lair" or matches[3] == "endgame" or matches[3] == "high" or matches[3] == "medium" or matches[3] == "low" then 
		snd.which_path = matches[3]
	else
		cecho("\n&lt;red&gt;Not a viable choice! Enter a viable choice or only enter 'gogo'!")
		cecho("\n&lt;green&gt;bloodwood (99+ and separate), vortex (99+ and separate), luziths lair (99+ and separate), endgame (93+), high (61-93), medium (31-60), and low (1-30)")
	end
else
	local level = ""
	for check in string.gmatch(gmcp.Char.Status.level, '[%d]+') do
		if level == "" then
			level = tonumber(check)
		end
	end
	if level &gt; 93 then
		snd.which_path = "endgame"
	elseif (level &lt; 93 and level &gt; 60) then
		snd.which_path = "high"
	elseif (level &lt; 60 and level &gt; 31) then
		snd.which.path = "medium"
	else
		snd.which_path = "low"
	end
end

if snd.which_path ~= "" then
  bot.going = true
	bot.path =  sndpathpick()
  if not snd.toggles.fasthunt then
  	expandAlias("ff")
  end
  
  expandAlias("aa")
end</script>
							<command></command>
							<packageName></packageName>
							<regex>^gogo( (\w+))?$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>Vermin Basher</name>
							<script>if snd.vermin_on == true then
	snd.vermin_on = false
	bot.going = false
	echo("VERMIN OFF")
	snd.send("vermin")
else
	snd.vermin_on = true
	if snd.city == "Spinesreach" then
		snd.send("vermin"..snd.sep.."path track 11687")
		snd.which_path = "verminspines"
	elseif snd.city == "Bloodloch" then
		snd.send("vermin"..snd.sep.."path track 9193")
		snd.which_path = "verminbloodloch"
	elseif snd.city == "Duiran" then
		snd.send("vermin"..snd.sep.."path track 44060")
		snd.which_path = "verminduiran"	
	end
	echo("VERMIN ON")
	enableTimer("moveroom")
	
	if snd.which_path ~= "" then
  	bot.going = true
		bot.path =  sndpathpick()
	end
	
end

</script>
							<command></command>
							<packageName></packageName>
							<regex>^vermon$</regex>
						</Alias>
					</AliasGroup>
					<Alias isActive="yes" isFolder="no">
						<name>generics</name>
						<script>snd.toggle("generics")</script>
						<command></command>
						<packageName></packageName>
						<regex>^gen$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>orbs</name>
						<script>snd.send("activate amberorb"..snd.sep.."activate greenorb"..snd.sep.."activate whiteorb"..snd.sep.."activate crimsonorb"..snd.sep.."activate ceruleanorb")
</script>
						<command></command>
						<packageName></packageName>
						<regex>^orbs$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>chocolates</name>
						<script>snd.send("eat mint;eat hazelnut;eat caramel;eat strawberry")</script>
						<command></command>
						<packageName></packageName>
						<regex>^choc$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>group</name>
						<script>snd.group = {}
if matches[2] ~= "none" then
 for name in string.gmatch(matches[2], '([^ ]+)') do
  table.insert(snd.group, string.title(name))
 end
end
display(snd.group)</script>
						<command></command>
						<packageName></packageName>
						<regex>^grp (.*)$</regex>
					</Alias>
				</AliasGroup>
				<AliasGroup isActive="yes" isFolder="yes">
					<name>GUI</name>
					<script></script>
					<command></command>
					<packageName></packageName>
					<regex></regex>
					<AliasGroup isActive="yes" isFolder="yes">
						<name>Chat</name>
						<script></script>
						<command></command>
						<packageName></packageName>
						<regex></regex>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Shared</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<Alias isActive="yes" isFolder="no">
								<name>Reset chasing</name>
								<script>demonnic.chaser:reset()</script>
								<command></command>
								<packageName></packageName>
								<regex>^chaseres$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>Debug</name>
								<script>if matches[2] then
  demonnic:listCategories()
else
  demonnic:toggleDebug()
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^debug(?: (list))?$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>debug categories</name>
								<script>if matches[2] then
  demonnic:watchCategory( matches[2] )
else
  demonnic:listCategories()
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^debugc(?: (.*))?$</regex>
							</Alias>
						</AliasGroup>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Tabbed Chat</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<Alias isActive="yes" isFolder="no">
								<name>Toggle blinking (temporary change)</name>
								<script>if demonnic.chat.config.blink then
  demonnic.chat.config.blink = false
  demonnic.chat.tabsToBlink = {}
  demonnic:echo("Blinking temporarily turned &lt;red&gt;off&lt;grey&gt;. It will reset if you edit your tabbed chat configuration, or close and reopen mudlet. To make it permanent, change demonnic.chat.config.blink to false in \"Demonnic-&gt;Tabbed Chat-&gt;Configuration options\" under scripts\n")
else
  demonnic.chat.config.blink = true
  demonnic.chat:blink()
  demonnic:echo("Blinking temporarily turned &lt;red&gt;on&lt;grey&gt;. It will reset if you edit your tabbed chat configuration, or close and reopen mudlet. To make it permanent, change demonnic.chat.config.blink to true in \"Demonnic-&gt;Tabbed Chat-&gt;Configuration options\" under scripts\n")
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^dblink$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>fixChat</name>
								<script>local currentsetting = demonnic.chat.config.location
local newsetting = ""
if currentsetting == "topright" then 
  newsetting = "bottomleft" 
elseif currentsetting == "topleft" then
  newsetting = "bottomright"
elseif currentsetting == "bottomleft" then
  newsetting = "topright"
elseif currentsetting == "bottomright" then
  newsetting = "topleft"
end

demonnic.chat.config.location = newsetting
demonnic.chat:create()
demonnic.chat.config.location = currentsetting
demonnic.chat:create()</script>
								<command></command>
								<packageName></packageName>
								<regex>^fixchat$</regex>
							</Alias>
						</AliasGroup>
					</AliasGroup>
				</AliasGroup>
				<AliasGroup isActive="yes" isFolder="yes">
					<name>Healing</name>
					<script></script>
					<command></command>
					<packageName></packageName>
					<regex></regex>
					<Alias isActive="yes" isFolder="no">
						<name>defense toggle</name>
						<script>if not string.find(matches[2], "def_") then
 matches[2] = "def_"..matches[2]
end
for i in pairs(snd.defenses) do
 if string.find(i, matches[2]) then
  if snd.defenses[i].needit then
   snd.defenses[i].needit = false
   snd.message("No longer keeping &lt;red&gt;"..i.."&lt;white&gt;.", "echo")
   send(" ")
  else
   snd.defenses[i].needit = true
   snd.message("Now keeping &lt;green&gt;"..i.."&lt;white&gt;.", "echo")
   send(" ")
  end
  return
 end
end
snd.message("No such defense as &lt;red&gt;"..matches[2].."&lt;white&gt;!", "echo")
send(" ")</script>
						<command></command>
						<packageName></packageName>
						<regex>^kd (.*)$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>defense options</name>
						<script>local class = ""
if matches[3] then class = matches[3] else class = snd.class:lower() end
if snd.class == "Ascendril" then send("simultaneity") end
if snd.class == "Archivist" then snd.send("incite lens") end
if snd.class == "Sciomancer" then snd.send("channel shadow") end
if snd.class == "Teradrim" then snd.send("golem call") end
send("def", false)
snd.load_def(class)

</script>
						<command></command>
						<packageName></packageName>
						<regex>^(ldd (.*)|defup)$</regex>
					</Alias>
					<AliasGroup isActive="yes" isFolder="yes">
						<name>Toggles</name>
						<script></script>
						<command></command>
						<packageName></packageName>
						<regex></regex>
						<Alias isActive="no" isFolder="no">
							<name>healing</name>
							<script>snd.toggle("healing")</script>
							<command></command>
							<packageName></packageName>
							<regex>^hl$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>defenses</name>
							<script>snd.toggle("defenses")</script>
							<command></command>
							<packageName></packageName>
							<regex>^tdf$</regex>
						</Alias>
						<Alias isActive="no" isFolder="no">
							<name>clotting</name>
							<script>snd.toggle("clotting")</script>
							<command></command>
							<packageName></packageName>
							<regex>^tclt$</regex>
						</Alias>
						<Alias isActive="no" isFolder="no">
							<name>standing</name>
							<script>snd.toggle("standing")</script>
							<command></command>
							<packageName></packageName>
							<regex>^ss$</regex>
						</Alias>
					</AliasGroup>
				</AliasGroup>
				<AliasGroup isActive="yes" isFolder="yes">
					<name>Offense</name>
					<script></script>
					<command></command>
					<packageName></packageName>
					<regex></regex>
					<Alias isActive="yes" isFolder="no">
						<name>template</name>
						<script>--[[ This is a blank attack template, just the most basic outline of what an offense
 alias should look like. ]]--
if snd.class == "MyClass" then -- set this to the class this alias is for
snd.starting_attack() -- always run this first, it does some important resets
function snd.attack_function() -- defining this function is how we tell sunder what to do
	if not snd.waiting.queue then -- don't want to spam, this will prevent that
		-- declare some important variables, you can add more here if you need
		local string = ""
		local call = ""

		-- attack logic goes here, you need to set string = whatever you want to send
		string = "punch "..snd.target
		call = "wt Afflicting "..snd.target..": DEATH"

		-- check if we need to prepend an affliction call
		if snd.toggles.affcalling and not snd.target_gone then
			string = call..snd.sep..string
		end
		-- we don't want to resend our existing attack, so check against that
		if string ~= snd.last_attack and not snd.waiting.queue then
			-- if we've got a new attack now, 
			snd.last_attack = string
			snd.attack(snd.last_attack)
			-- manage the anti-spam check below
			snd.waiting.queue = true
			tempTimer(snd.delay(), [[snd.waiting.queue = false]])
		end
	end
end
snd.attack_function() -- make sure to actually send the attack once on use!
end</script>
						<command></command>
						<packageName></packageName>
						<regex></regex>
					</Alias>
					<AliasGroup isActive="yes" isFolder="yes">
						<name>Generic</name>
						<script></script>
						<command></command>
						<packageName></packageName>
						<regex></regex>
						<Alias isActive="yes" isFolder="no">
							<name>my location</name>
							<script>snd.send("wt I'm at ("..gmcp.Room.Info.num..") '"..gmcp.Room.Info.name.."' in "..gmcp.Room.Info.area)</script>
							<command></command>
							<packageName></packageName>
							<regex>^loc$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>eye sigil</name>
							<script>snd.set_queue("quickwield right eyesigil"..snd.sep.."relax grip"..snd.sep.."throw eyesigil at ground")
snd.eyewait = true
eyewait_timer = tempTimer(5.0,[[snd.eyewait = false]])	</script>
							<command></command>
							<packageName></packageName>
							<regex>^eye$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>web tattoo</name>
							<script>snd.toggles.attacking = false
if matches[2] == nil then
 snd.send("qeb touch web "..snd.target)
else
 snd.send("qeb touch web "..matches[2])
end</script>
							<command></command>
							<packageName></packageName>
							<regex>^tw(?: (.*))?$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>brazier</name>
							<script>if matches[2] == nil then
 snd.attack("touch brazier "..snd.target)
else
 snd.attack("touch brazier "..matches[2])
end</script>
							<command></command>
							<packageName></packageName>
							<regex>^brz(?: (.*))?$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>tentacle</name>
							<script>if matches[2] == nil then
 snd.attack("touch tentacle "..snd.target)
else
 snd.attack("touch tentacle "..matches[2])
end</script>
							<command></command>
							<packageName></packageName>
							<regex>^tnt(?: (.*))?$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>orrery</name>
							<script>snd.send("infuse orrery with "..snd.faction)</script>
							<command></command>
							<packageName></packageName>
							<regex>^or$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>breathe fire</name>
							<script>snd.send("qeb breathe fire at icewall")</script>
							<command></command>
							<packageName></packageName>
							<regex>^bf$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>prism</name>
							<script>if matches[2] == nil then
 snd.attack("touch prism "..snd.target)
else
 snd.attack("touch prism "..matches[2])
end</script>
							<command></command>
							<packageName></packageName>
							<regex>^prm(?: (.*))?$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>shackle</name>
							<script>snd.send("qeb refining shackle eld")</script>
							<command></command>
							<packageName></packageName>
							<regex>^sh$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>tumble</name>
							<script>snd.send("qeb tumble "..matches[2])</script>
							<command></command>
							<packageName></packageName>
							<regex>^tm (\w+)$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>dummy mode</name>
							<script>snd.starting_attack()
function snd.attack_function()
 if not snd.waiting.queue then
  local string = "punch "..snd.target
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
</script>
							<command></command>
							<packageName></packageName>
							<regex>^dummy$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>swing up</name>
							<script>snd.toggles.attacking = false
snd.send("qeb swing up")</script>
							<command></command>
							<packageName></packageName>
							<regex>^su$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>swing down</name>
							<script>snd.toggles.attacking = false
snd.send("qeb swing down")</script>
							<command></command>
							<packageName></packageName>
							<regex>^sd$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>use translocator</name>
							<script>snd.toggles.attacking = false
snd.toggles.bashing = false
snd.toggles.fasthunt = false
snd.send("qeb use translocator")</script>
							<command></command>
							<packageName></packageName>
							<regex>^ut$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>Wielding</name>
							<script>if snd.class == "Archivist" then
	if (snd.wielded.left.name or snd.wielded.right.name) == "a Master Gulleye's Rod" then
		snd.send("qeb unwield pole")
		tempTimer(3, [[expandAlias("wbsh", false)]])
	else
		snd.send("qeb quickwield both codex shield")
	end
end</script>
							<command></command>
							<packageName></packageName>
							<regex>^wbsh$</regex>
						</Alias>
					</AliasGroup>
					<AliasGroup isActive="yes" isFolder="yes">
						<name>Neutral</name>
						<script></script>
						<command></command>
						<packageName></packageName>
						<regex></regex>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Monk</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Affliction Offenses</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>afflictions</name>
									<script>if snd.class == "Monk" then
snd.giving = {
"paresis",
"stupidity",
"anorexia",
"recklessness",
"dizziness",
"confusion",
"epilepsy",
"hallucinations"
}
		mymental_aff_count = 0
    for aff in pairs(snd.mental_affs) do
      if table.contains(snd.have_aff, snd.mental_affs[aff]) then
        mymental_aff_count = mymental_aff_count + 1
      end
    end
		
		local mentcount = 0 
    for aff in pairs(snd.mental_affs) do
      if table.contains(snd.target_has, snd.mental_affs[aff]) then
    	  mentcount = mentcount + 1
      end
    end

snd.starting_attack()
function snd.attack_function()
 if not snd.waiting.queue then
  if snd.used.shield then
   	string = "combo "..snd.target.." sck ucp ucp"
	elseif snd.checkAff("blackout") and not snd.checkAff("disrupted")  and mentcount &gt; 2 then
		string = "mind disrupt"
	elseif snd.balance.blackout and not snd.checkAff("blackout") then
		string = "mind blackout"
	elseif snd.target_prone then
	 	if snd.parried_limb == "left leg" then
	  	string = "combo "..snd.target.." wrt right leg hfp right hfp right"
	 	elseif snd.parried_limb == "right leg" then
	  	string = "combo "..snd.target.." wrt left leg hfp left hfp left"
		elseif (snd.limb_dmg["head"] &gt;= 56) and snd.no_parry() and snd.stance == "tiger" then
			string = "combo "..snd.target.." axk ucp ucp"
	 	end
	elseif snd.target_impaled then
		string = "combo "..snd.target.." axk ucp ucp"
	elseif #snd.aff_list &gt; 4 and (snd.have_aff("paresis") or snd.have_aff("asthma") or snd.have_aff("slickness") or snd.have_aff("aeon") or snd.have_aff("ablaze") or snd.have_aff("heatspread")) and snd.balance.mindpush then
		string = "mind push "..snd.target
	elseif mymental_aff_count &gt;= 2 and snd.balance.mindcleanse then 
		string = "mind cleanse me"
  else
	 one = "none"
	 two = "none"
	 three = "none"
   for i in pairs(snd.giving) do
   	 if not snd.checkAff(snd.giving[i]) then
    	 	if one == "none" then
      		one = snd.giving[i]
		 		elseif two == "none" then
		  		two = snd.giving[i]
		 		elseif three == "none" then
		  		three = snd.giving[i]
     		end
    	end
   end
	 	if three ~= "none" then
    	string = "mind batter "..snd.target.." "..one.." "..two.." "..three
			if snd.toggles.affcalling and not snd.target_gone then
		 		string = "wt Battering "..snd.target..": "..one..", "..two..", "..three..snd.sep..string
			end
	 	else
    	if snd.parried_limb == "head" then
     		string = "combo "..snd.target.." sdk hkp hkp"
			else
	   		string = "combo "..snd.target.." wwk ucp ucp"
			end
	 	end
  end
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^aff$</regex>
								</Alias>
							</AliasGroup>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Damage Offenses</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>mouse mode</name>
									<script>if snd.class == "Monk" then
snd.starting_attack()
function snd.attack_function()
 if not snd.waiting.queue then
  if snd.used.shield then
   string = "combo "..snd.target.." sck ucp ucp"
	elseif snd.target_prone then
	 if snd.parried_limb == "left leg" then
	  string = "combo "..snd.target.." wrt right leg hfp right hfp right"
	 else
	  string = "combo "..snd.target.." wrt left leg hfp left hfp left"
	 end
  elseif snd.parried_limb == "head" or not snd.no_parry() then
	 string = "combo "..snd.target.." sdk hkp hkp"
	else
	 string = "combo "..snd.target.." wwk ucp ucp"
  end
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^ms$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>head</name>
									<script>if snd.class == "Monk" then
snd.starting_attack()
function snd.attack_function()
 if not snd.waiting.queue then
  if snd.used.shield then
   string = "combo "..snd.target.." sck ucp ucp"
	elseif snd.target_prone then
	 string = "bbt "..snd.target
	else
	 string = "combo "..snd.target.." wwk ucp ucp"
  end
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^head$</regex>
								</Alias>
							</AliasGroup>
						</AliasGroup>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Syssin</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Wielding</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>wield bashing</name>
									<script>if snd.class == "Syssin" then
snd.send("quickwield left whip"..snd.sep.."quickwield right shield")
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^wbsh$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>wield pvp</name>
									<script>if snd.class == "Syssin" then
snd.send("quickwield left dirk"..snd.sep.."quickwield right shield")
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^wpvp$</regex>
								</Alias>
							</AliasGroup>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Assassination</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>yank</name>
									<script>if snd.class == "Syssin" then
if matches[2] == "" then
 snd.send("qeb quickwield left whip"..snd.sep.."yank "..snd.target)
else
 snd.send("qeb quickwield left whip"..snd.sep.."yank "..matches[2])
end
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^bk(.*)$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>backstab</name>
									<script>if snd.class == "Syssin" then
if matches[2] == "" then
 snd.send("qeb quickwield left dirk"..snd.sep.."backstab "..snd.target.." curare")
else
 snd.send("qeb quickwield left dirk"..snd.sep.."backstab "..matches[2].." curare")
end
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^bs(.*)$</regex>
								</Alias>
							</AliasGroup>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Subterfuge</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>darkflood</name>
									<script>if snd.class == "Syssin" then
snd.send("qeb conjure darkflood")
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^df$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>abduct</name>
									<script>if snd.class == "Syssin" then
if matches[2] == nil then
 snd.send("qeb abduct "..snd.target)
else
 snd.send("qeb abduct "..matches[2])
end
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^at(?: (.*))?$</regex>
								</Alias>
							</AliasGroup>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Hypnosis</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>hypnotise</name>
									<script>if snd.class == "Syssin" then
snd.send("qeb hypnotise "..snd.target)
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^hyp$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>suggest</name>
									<script>if snd.class == "Syssin" then
local shorthand = {
["clu"] = "clumsiness",
["imp"] = "impatience"
}
if shorthand[matches[2]] then
 snd.send("qeb suggest "..snd.target.." "..shorthand[matches[2]])
else
 cecho("&lt;red&gt;No such affliction!")
end
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^sg (\w+)$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>shadow mark</name>
									<script>if snd.class == "Syssin" then
snd.send("qeb shadow mark numbness "..snd.target)
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^sm$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>hypnotise stack</name>
									<script>if snd.class == "Syssin" then
snd.hypno_stack = {
 "hypochondria",
 "clumsiness",
 "impatience",
 "lethargy",
 "hypochondria",
 "impatience",
 "clumsiness",
 "lethargy",
 "impatience",
 "loneliness",
 "lethargy",
 "claustrophobia",
 "impatience",
 "agoraphobia"
}
snd.hyp = 0
snd.last_hypno = 0
snd.starting_attack()
function snd.attack_function()
 local string = ""
 if not snd.waiting.queue then
  if snd.hypno == "open" or snd.hypno == "none" then
   if snd.hypno == "none" then
    string = "hypnotise "..snd.target..snd.sep
   end
   if #snd.hypno_stack &gt; snd.last_hypno + 1 then
    snd.hyp = snd.last_hypno+1
    string = string.."suggest "..snd.target.." "..snd.hypno_stack[snd.hyp]
   else
    string = "seal "..snd.target.." 3"
   end
  else
   snd.message("Good to go! KILL THEM NOW!")
  end
 end
 if string ~= snd.last_attack and not snd.waiting.queue then
  snd.last_attack = string
  snd.attack(snd.last_attack)
  snd.waiting.queue = true
  tempTimer(snd.delay(), [[snd.waiting.queue = false]])
 end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^hypno$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>hypnotise magic stack</name>
									<script>if snd.class == "Syssin" then
snd.hypno_stack = {
 "hypochondria",
 "clumsiness",
 "impatience",
 "confusion",
 "hypochondria",
 "impatience",
 "clumsiness",
 "confusion",
 "impatience",
 "loneliness",
 "confusion",
 "claustrophobia",
 "impatience",
 "agoraphobia"
}
snd.hyp = 0
snd.last_hypno = 0
snd.starting_attack()
function snd.attack_function()
 local string = ""
 if not snd.waiting.queue then
  if snd.hypno == "open" or snd.hypno == "none" then
   if snd.hypno == "none" then
    string = "hypnotise "..snd.target..snd.sep
   end
   if #snd.hypno_stack &gt; snd.last_hypno + 1 then
    snd.hyp = snd.last_hypno+1
    string = string.."suggest "..snd.target.." "..snd.hypno_stack[snd.hyp]
   else
    string = "seal "..snd.target.." 3"
   end
  else
   snd.message("Good to go! KILL THEM NOW!")
  end
 end
 if string ~= snd.last_attack and not snd.waiting.queue then
  snd.last_attack = string
  snd.attack(snd.last_attack)
  snd.waiting.queue = true
  tempTimer(snd.delay(), [[snd.waiting.queue = false]])
 end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^hypm$</regex>
								</Alias>
							</AliasGroup>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Affliction Offenses</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>mouse mode</name>
									<script>if snd.class == "Syssin" then
snd.starting_attack()
function snd.attack_function()
	local string = "" -- this will populate with our attack
	local call = "" -- this will be for affliction calling
	local touse = {} -- this will store the affs we still want to hit with
	local tohit = {} -- this will store the effects from touse
	local extraaff = "delphinium" -- what to use if we used everything else
	-- and how far away we are from a lock
	local missing = snd.missingAff("stupidity/paresis/anorexia/asthma/slickness", "/")
	if snd.target_locked() then
		snd.giving = {
		"a broken left leg",
		"a broken right leg",
		"hearing",
		"sensitivity",
		"voyria"
		}
	else
		snd.giving = { -- the venoms we're going to apply while hypnosis is building, in prioritized order
		--"sight",
		"clumsiness",
		"asthma",
		"paresis",
		"slickness",
		"stupidity",
		"anorexia",
		"hearing",
		"sensitivity",
		--"squelched",
		"shyness", -- to bury impatience once hypno fires
		--"vomiting", -- stick these two early, to bury scytherus
		"allergies", -- this being the second
		--"haemophilia",
		--"recklessness",
		"weariness",
		--"dizziness",
		--"voyria",
		}
	end
	if not snd.waiting.queue then -- make sure not to spam
		if not snd.can_arms() then -- this means we have at least one broken arm
			-- so we'll have to bedazzle instead of dstab
			string = "bedazzle "..snd.target
		-- let's move on
		elseif snd.checksomeAffs({"anorexia", "allergies", "vomiting", "mental disruption"},1) and not snd.checkAff("thin_blood") then
			if snd.used.paste then
				string = "quickwield left whip"..snd.sep.."flay "..snd.target.." fangbarrier"
				snd.flayingfang = true
			else
				-- if they don't yet have scytherus, fangbarrier is down, and they have at least one thing to cover it
				string = "bite "..snd.target.." scytherus"
			end
		elseif snd.target_locked() and snd.checkAff("sensitivity") then
			-- they're locked and ready to be finished off
			if snd.used.paste then
				string = "quickwield left whip"..snd.sep.."flay "..snd.target
			else
				string = "bite "..snd.target.." camus"
			end
		else -- none of the special conditions are met, let's go with a meat-and-potatoes dstab
			-- first and foremost, check if we can lock them with one or two more affs
			if #missing == 1 or (#missing == 2 and not snd.used.shield and not snd.used.rebounding) then
				touse = missing
			end
			-- any aff we're not using to lock, we'll pick from the lists above
			for i in pairs(snd.giving) do
				if not snd.checkAff(snd.giving[i]) then
					if not table.contains(touse, snd.giving[i]) then
						table.insert(touse, snd.giving[i])
					end
				end
			end
			for aff in pairs(touse) do
				table.insert(tohit, snd.effects[touse[aff]])
			end
			-- now we know which venoms we want, let's decide what attack to use
			if (snd.defenses.def_hiding.state == "deffed" or snd.defenses.def_phase.state == "deffed") and not snd.used.shield then
				string = "quickwield left dirk"..snd.sep.."backstab "..snd.target.." "..tohit[1]
				call = "wt Afflicting "..snd.target..": "..tohit[1]
			elseif snd.used.shield then
        string = "quickwield left whip"..snd.sep.."quickwield right shield"..snd.sep.."wipe left"..snd.sep.."envenom whip with "..tohit[1]..snd.sep.."flay "..snd.target.." shield"
			elseif snd.used.rebounding then
          -- we can use a venom with flay if we're flaying shield or rebounding
        string = "quickwield left whip"..snd.sep.."quickwield right shield"..snd.sep.."wipe left"..snd.sep.."envenom whip with "..tohit[1]..snd.sep.."flay "..snd.target.." rebounding"
        call = "wt Afflicting "..snd.target..": "..tohit[1]
      else -- otherwise, we don't need to flay - go full ham!
				string = "quickwield left dirk"..snd.sep.."wipe left"..snd.sep.."dstab "..snd.target.." "..tohit[2].." "..tohit[1]
				call = "wt Afflicting "..snd.target..": "..tohit[2]..", "..tohit[1]
			end
		end
		if snd.toggles.affcalling and not snd.target_gone then
			string = call..snd.sep..string
		end
	end
	-- anything we can do with shadow balance this round?
	if gmcp.Char.Vitals.ability_bal == "1" and gmcp.Char.Vitals.prone == "0" then
		-- we do have shadow balance and we don't need to hold it for numbness
		if snd.target_locked() and #snd.target_has &gt;= 8 then
			-- the target's locked and affed up, let's hurry the finish along
			string = string..snd.sep.."shadow sleight pall "..snd.target
		elseif not snd.checkAff("void") and snd.hypno ~= "running" then
			-- they aren't under active hypnosis, and not locked - let's void!
			string = string..snd.sep.."shadow sleight void "..snd.target
		else -- they're under hypnosis, but not yet locked, nudge it along with dissipate
			string = string..snd.sep.."shadow sleight dissipate "..snd.target
		end
	end
	if string ~= snd.last_attack and not snd.waiting.queue then
		snd.last_attack = string
		snd.attack(snd.last_attack)
		snd.waiting.queue = true
		tempTimer(0.2, [[snd.waiting.queue = false]])
	end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^ms$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>magic</name>
									<script>if snd.class == "Syssin" then
snd.hypno_stack = { -- hypnosis affs, in priority order
 "hypochondria",
 "impatience",
 "loneliness",
 "confusion",
 "hypochondria",
 "impatience",
 "vertigo",
 "confusion",
 "impatience",
 "loneliness",
 "confusion"
}
snd.starting_attack()
function snd.attack_function()
	local string = "" -- this will populate with our attack
	local call = "" -- this will be for affliction calling
	local touse = {} -- this will store the affs we still want to hit with
	local tohit = {} -- this will store the effects from touse
	local extraaff = "delphinium" -- what to use if we used everything else
	-- and how far away we are from a lock
	local missing = snd.missingAff("stupidity/paresis/anorexia/asthma/slickness", "/")
	if snd.target_locked() then
		snd.giving = {
		"a broken left leg",
		"a broken right leg",
		"hearing",
		"sensitivity",
		"voyria"
		}
	elseif snd.hypno == "running" then
		snd.giving = { -- the venoms we're going to apply while hypnosis is running, in prioritized order
		--"sight",
		"paresis",
		"weariness",
		"asthma",
		"shyness", -- to keep impatience stuck, this buries it
		"slickness",
		"anorexia", -- work harder on the lock than buffer affs, while hypnosis is going
		"stupidity", -- not as important, since we're running impatience
		--"vomiting",
		"allergies",
		"sensitivity",
		--"haemophilia",
		--"recklessness",
		"clumsiness",
		--"dizziness",
		"voyria",
		}
	else
		snd.giving = { -- the venoms we're going to apply while hypnosis is building, in prioritized order
		--"sight",
		"weariness",
		"asthma",
		"paresis",
		--"squelched",
		"shyness", -- to bury impatience once hypno fires
		--"vomiting", -- stick these two early, to bury scytherus
		"allergies", -- this being the second
		"slickness",
		"stupidity",
		"anorexia",
		"sensitivity",
		--"haemophilia",
		--"recklessness",
		"clumsiness",
		--"dizziness",
		--"voyria",
		}
	end
	if not snd.waiting.queue then -- make sure not to spam
		if not snd.can_arms() then -- this means we have at least one broken arm
			-- so we'll have to bedazzle instead of dstab
			string = "bedazzle "..snd.target
		elseif not snd.checkAff("numbed_skin") then
			-- they don't have numbness yet
			if snd.used.paste then -- but they have fangbarrier, so we can't give it
				-- we need to flay first
				string = "quickwield left whip"..snd.sep.."flay "..snd.target.." fangbarrier"
				snd.flayingfang = true
			else -- they don't have fangbarrier - go for it!
				string = "shadow mark numbness "..snd.target
			end
		-- they already have numbness, let's move on
		elseif snd.checksomeAffs({"anorexia", "allergies", "vomiting", "mental disruption"},1) and not snd.checkAff("thin_blood") then
			if snd.used.paste then
				string = "quickwield left whip"..snd.sep.."flay "..snd.target.." fangbarrier"
				snd.flayingfang = true
			else
				-- if they don't yet have scytherus, fangbarrier is down, and they have at least one thing to cover it
				string = "bite "..snd.target.." scytherus"
			end
		elseif snd.target_locked() and snd.checkAff("sensitivity") then
			-- they're locked and ready to be finished off
			if snd.used.paste then
				string = "quickwield left whip"..snd.sep.."flay "..snd.target
			else
				string = "bite "..snd.target.." camus"
			end
		else -- none of the special conditions are met, let's go with a meat-and-potatoes dstab
			-- first and foremost, check if we can lock them with one or two more affs
			if #missing == 1 or (#missing == 2 and not snd.used.shield and not snd.used.rebounding) then
				touse = missing
			end
			-- any aff we're not using to lock, we'll pick from the lists above
			for i in pairs(snd.giving) do
				if not snd.checkAff(snd.giving[i]) then
					if not table.contains(touse, snd.giving[i]) then
						table.insert(touse, snd.giving[i])
					end
				end
			end
			for aff in pairs(touse) do
				table.insert(tohit, snd.effects[touse[aff]])
			end
			-- now we know which venoms we want, let's decide what attack to use
			if snd.used.shield then
        string = "quickwield left whip"..snd.sep.."quickwield right shield"..snd.sep.."wipe left"..snd.sep.."envenom whip with "..tohit[1]..snd.sep.."flay "..snd.target.." shield"
			elseif snd.used.rebounding then
          -- we can use a venom with flay if we're flaying shield or rebounding
        string = "quickwield left whip"..snd.sep.."quickwield right shield"..snd.sep.."wipe left"..snd.sep.."envenom whip with "..tohit[1]..snd.sep.."flay "..snd.target.." rebounding"
        call = "wt Afflicting "..snd.target..": "..tohit[1]
      else -- otherwise, we don't need to flay - go full ham!
				string = "quickwield left dirk"..snd.sep.."wipe left"..snd.sep.."dstab "..snd.target.." "..tohit[2].." "..tohit[1]
				call = "wt Afflicting "..snd.target..": "..tohit[2]..", "..tohit[1]
			end
		end
		if snd.toggles.affcalling and not snd.target_gone then
			string = call..snd.sep..string
		end
		-- now let's see if we can append some hypnosis
		if snd.hypno == "open" or snd.hypno == "none" then
			-- 'open' means they're ready for suggestions, 'none' means we haven't started yet
			-- either way, we're going to suggest something now
			if #snd.hypno_stack &gt;= snd.last_hypno + 1 then -- we still have more in the hypno_stack
				snd.hyp = snd.last_hypno+1 -- move on to the next thing
				if snd.hypno == "none" then -- if we haven't hypnotised yet
					string = string..snd.sep.."hypnotise "..snd.target -- do that first
				end
				-- append the suggestion to our attack string
				string = string..snd.sep.."suggest "..snd.target.." "..snd.hypno_stack[snd.hyp]
			elseif snd.hypno == "open" then -- we're at the end of the (hypno) line, and they're not sealed yet
				string = "seal "..snd.target.." 3" -- so seal them up
			end
		elseif snd.hypno == "running" then -- we have an active hypnosis going
			-- just append hypnotise so we don't miss when it ends
			string = string..snd.sep.."hypnotise "..snd.target
		end
	end
	-- anything we can do with shadow balance this round?
	if gmcp.Char.Vitals.ability_bal == "1" and gmcp.Char.Vitals.prone == "0" and table.contains(snd.target_has, "numbed_skin") then
		-- we do have shadow balance and we don't need to hold it for numbness
		if snd.target_locked() and #snd.target_has &gt;= 8 then
			-- the target's locked and affed up, let's hurry the finish along
			string = string..snd.sep.."shadow sleight pall "..snd.target
		elseif not snd.checkAff("void") and snd.hypno ~= "running" then
			-- they aren't under active hypnosis, and not locked - let's void!
			string = string..snd.sep.."shadow sleight void "..snd.target
		else -- they're under hypnosis, but not yet locked, nudge it along with dissipate
			string = string..snd.sep.."shadow sleight dissipate "..snd.target
		end
	end
	if string ~= snd.last_attack and not snd.waiting.queue then
		snd.last_attack = string
		snd.attack(snd.last_attack)
		snd.waiting.queue = true
		tempTimer(0.2, [[snd.waiting.queue = false]])
	end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^mg$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>kill</name>
									<script>if snd.class == "Syssin" then
snd.hypno_stack = { -- hypnosis affs, in priority order
 "hypochondria",
 "impatience",
 "loneliness",
 "lethargy",
 "hypochondria",
 "impatience",
 "vertigo",
 "lethargy",
 "impatience",
 "loneliness",
 "lethargy"
}
snd.starting_attack()
function snd.attack_function()
	local string = "" -- this will populate with our attack
	local call = "" -- this will be for affliction calling
	local touse = {} -- this will store the affs we still want to hit with
	local tohit = {} -- this will store the effects from touse
	local extraaff = "delphinium" -- what to use if we used everything else
	-- and how far away we are from a lock
	local missing = snd.missingAff("stupidity/paresis/anorexia/asthma/slickness", "/")
	if snd.target_locked() then
		snd.giving = {
		"a broken left leg",
		"a broken right leg",
		"hearing",
		"sensitivity",
		"voyria"
		}
	elseif snd.hypno == "running" then
		snd.giving = { -- the venoms we're going to apply while hypnosis is running, in prioritized order
		--"sight",
		"paresis",
		"clumsiness",
		"asthma",
		"shyness", -- to keep impatience stuck, this buries it
		"slickness",
		"anorexia", -- work harder on the lock than buffer affs, while hypnosis is going
		"stupidity", -- not as important, since we're running impatience
		--"vomiting",
		"allergies",
		"sensitivity",
		--"haemophilia",
		--"recklessness",
		"weariness",
		--"dizziness",
		"voyria",
		}
	else
		snd.giving = { -- the venoms we're going to apply while hypnosis is building, in prioritized order
		--"sight",
		"clumsiness",
		"asthma",
		"paresis",
		--"squelched",
		"shyness", -- to bury impatience once hypno fires
		--"vomiting", -- stick these two early, to bury scytherus
		"allergies", -- this being the second
		"slickness",
		"stupidity",
		"anorexia",
		"sensitivity",
		--"haemophilia",
		--"recklessness",
		"weariness",
		--"dizziness",
		--"voyria",
		}
	end
	if not snd.waiting.queue then -- make sure not to spam
		if not snd.can_arms() then -- this means we have at least one broken arm
			-- so we'll have to bedazzle instead of dstab
			string = "bedazzle "..snd.target
		elseif not snd.checkAff("numbed_skin") then
			-- they don't have numbness yet
			if snd.used.paste then -- but they have fangbarrier, so we can't give it
				-- we need to flay first
				string = "quickwield left whip"..snd.sep.."flay "..snd.target.." fangbarrier"
				snd.flayingfang = true
			else -- they don't have fangbarrier - go for it!
				string = "shadow mark numbness "..snd.target
			end
		-- they already have numbness, let's move on
		elseif snd.checksomeAffs({"anorexia", "allergies", "vomiting", "mental disruption"},1) and not snd.checkAff("thin_blood") then
			if snd.used.paste then
				string = "quickwield left whip"..snd.sep.."flay "..snd.target.." fangbarrier"
				snd.flayingfang = true
			else
				-- if they don't yet have scytherus, fangbarrier is down, and they have at least one thing to cover it
				string = "bite "..snd.target.." scytherus"
			end
		elseif snd.target_locked() and snd.checkAff("sensitivity") then
			-- they're locked and ready to be finished off
			if snd.used.paste then
				string = "quickwield left whip"..snd.sep.."flay "..snd.target
			else
				string = "bite "..snd.target.." camus"
			end
		else -- none of the special conditions are met, let's go with a meat-and-potatoes dstab
			-- first and foremost, check if we can lock them with one or two more affs
			if #missing == 1 or (#missing == 2 and not snd.used.shield and not snd.used.rebounding) then
				touse = missing
			end
			-- any aff we're not using to lock, we'll pick from the lists above
			for i in pairs(snd.giving) do
				if not snd.checkAff(snd.giving[i]) then
					if not table.contains(touse, snd.giving[i]) then
						table.insert(touse, snd.giving[i])
					end
				end
			end
			for aff in pairs(touse) do
				table.insert(tohit, snd.effects[touse[aff]])
			end
			-- now we know which venoms we want, let's decide what attack to use
			if snd.used.shield then
        string = "quickwield left whip"..snd.sep.."quickwield right shield"..snd.sep.."wipe left"..snd.sep.."envenom whip with "..tohit[1]..snd.sep.."flay "..snd.target.." shield"
			elseif snd.used.rebounding then
          -- we can use a venom with flay if we're flaying shield or rebounding
        string = "quickwield left whip"..snd.sep.."quickwield right shield"..snd.sep.."wipe left"..snd.sep.."envenom whip with "..tohit[1]..snd.sep.."flay "..snd.target.." rebounding"
        call = "wt Afflicting "..snd.target..": "..tohit[1]
      else -- otherwise, we don't need to flay - go full ham!
				string = "quickwield left dirk"..snd.sep.."wipe left"..snd.sep.."dstab "..snd.target.." "..tohit[2].." "..tohit[1]
				call = "wt Afflicting "..snd.target..": "..tohit[2]..", "..tohit[1]
			end
		end
		if snd.toggles.affcalling and not snd.target_gone then
			string = call..snd.sep..string
		end
		-- now let's see if we can append some hypnosis
		if snd.hypno == "open" or snd.hypno == "none" then
			-- 'open' means they're ready for suggestions, 'none' means we haven't started yet
			-- either way, we're going to suggest something now
			if #snd.hypno_stack &gt;= snd.last_hypno + 1 then -- we still have more in the hypno_stack
				snd.hyp = snd.last_hypno+1 -- move on to the next thing
				if snd.hypno == "none" then -- if we haven't hypnotised yet
					string = string..snd.sep.."hypnotise "..snd.target -- do that first
				end
				-- append the suggestion to our attack string
				string = string..snd.sep.."suggest "..snd.target.." "..snd.hypno_stack[snd.hyp]
			elseif snd.hypno == "open" then -- we're at the end of the (hypno) line, and they're not sealed yet
				string = "seal "..snd.target.." 3" -- so seal them up
			end
		elseif snd.hypno == "running" then -- we have an active hypnosis going
			-- just append hypnotise so we don't miss when it ends
			string = string..snd.sep.."hypnotise "..snd.target
		end
	end
	-- anything we can do with shadow balance this round?
	if gmcp.Char.Vitals.ability_bal == "1" and gmcp.Char.Vitals.prone == "0" and table.contains(snd.target_has, "numbed_skin") then
		-- we do have shadow balance and we don't need to hold it for numbness
		if snd.target_locked() and #snd.target_has &gt;= 8 then
			-- the target's locked and affed up, let's hurry the finish along
			string = string..snd.sep.."shadow sleight pall "..snd.target
		elseif not snd.checkAff("void") and snd.hypno ~= "running" then
			-- they aren't under active hypnosis, and not locked - let's void!
			string = string..snd.sep.."shadow sleight void "..snd.target
		else -- they're under hypnosis, but not yet locked, nudge it along with dissipate
			string = string..snd.sep.."shadow sleight dissipate "..snd.target
		end
	end
	if string ~= snd.last_attack and not snd.waiting.queue then
		snd.last_attack = string
		snd.attack(snd.last_attack)
		snd.waiting.queue = true
		tempTimer(0.2, [[snd.waiting.queue = false]])
	end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^kl$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>1v1</name>
									<script>if snd.class == "Syssin" then
snd.hypno_stack = { -- hypnosis affs, in priority order
 "hypochondria",
 "impatience",
 "loneliness",
 "lethargy",
 "hypochondria",
 "impatience",
 "vertigo",
 "lethargy",
 "impatience",
 "loneliness",
 "lethargy"
}
snd.starting_attack()
function snd.attack_function()
	local string = "" -- this will populate with our attack
	local call = "" -- this will be for affliction calling
	local touse = {} -- this will store the affs we still want to hit with
	local tohit = {} -- this will store the effects from touse
	local extraaff = "delphinium" -- what to use if we used everything else
	-- and how far away we are from a lock
	local missing = snd.missingAff("stupidity/paresis/anorexia/asthma/slickness", "/")
	if snd.target_locked() then
		snd.giving = {
		"voyria",
		"a broken left leg",
		"a broken right leg",
		"sensitivity",
		"asleep",

		}
	elseif snd.hypno == "running" then
		snd.giving = { -- the venoms we're going to apply while hypnosis is running, in prioritized order
		--"sight",
		"paresis",
		"clumsiness",
		"asthma",
		"shyness", -- to keep impatience stuck, this buries it,
		"vomiting",
		"allergies",
		"stupidity", -- not as important, since we're running impatience
		"dizziness",
		"slickness",
		"anorexia", -- work harder on the lock than buffer affs, while hypnosis is going
		"sensitivity",
		"haemophilia",
		"recklessness",
		"weariness",
		"voyria",
		}
	else
		snd.giving = { -- the venoms we're going to apply while hypnosis is building, in prioritized order
		"paresis",
		"clumsiness",
		"asthma",
				--"sight",
		--"squelched",
		"vomiting", -- stick these two early, to bury scytherus
		"allergies", -- this being the second
		"stupidity",
		"dizziness",
		--"shyness", -- to bury impatience once hypno fires
		"slickness",
		"anorexia",
		"sensitivity",
		"haemophilia",
		"recklessness",
		"weariness",
		"voyria",
		}
	end
	if not snd.waiting.queue then -- make sure not to spam
		if not snd.can_arms() then -- this means we have at least one broken arm
			-- so we'll have to bedazzle instead of dstab
			string = "bedazzle "..snd.target
		elseif (snd.defenses.def_hiding.state == "deffed" or snd.defenses.def_phase.state == "deffed") and not snd.used.shield then
	 		string = "quickwield left dirk"..snd.sep.."quickwield right shield"..snd.sep.."backstab "..snd.target
		elseif snd.checksomeAffs({"anorexia", "allergies", "vomiting", "mental disruption"},1) and not snd.checkAff("thin_blood") then
			if snd.used.paste then
				string = "quickwield left whip"..snd.sep.."quickwield right shield"..snd.sep.."flay "..snd.target.." fangbarrier"
				snd.flayingfang = true
			else
				-- if they don't yet have scytherus, fangbarrier is down, and they have at least one thing to cover it
				string = "bite "..snd.target.." scytherus"
			end
		elseif snd.target_locked() and snd.checkAff("sensitivity") then
			-- they're locked and ready to be finished off
			if snd.used.paste then
				string = "quickwield left whip"..snd.sep.."quickwield right shield"..snd.sep.."flay "..snd.target
			else
				string = "bite "..snd.target.." camus"
			end
		else -- none of the special conditions are met, let's go with a meat-and-potatoes dstab
			-- first and foremost, check if we can lock them with one or two more affs
			if #missing == 1 or (#missing == 2 and not snd.used.shield and not snd.used.rebounding) then
				touse = missing
			end
			-- any aff we're not using to lock, we'll pick from the lists above
			for i in pairs(snd.giving) do
				if not snd.checkAff(snd.giving[i]) then
					if not table.contains(touse, snd.giving[i]) then
						table.insert(touse, snd.giving[i])
					end
				end
			end
			for aff in pairs(touse) do
				table.insert(tohit, snd.effects[touse[aff]])
			end
			-- now we know which venoms we want, let's decide what attack to use
			if snd.used.shield then
        string = "quickwield left whip"..snd.sep.."quickwield right shield"..snd.sep.."wipe left"..snd.sep.."envenom whip with "..tohit[1]..snd.sep.."flay "..snd.target.." shield"
			elseif snd.used.rebounding then
          -- we can use a venom with flay if we're flaying shield or rebounding
        string = "quickwield left whip"..snd.sep.."quickwield right shield"..snd.sep.."wipe left"..snd.sep.."envenom whip with "..tohit[1]..snd.sep.."flay "..snd.target.." rebounding"
        call = "wt Afflicting "..snd.target..": "..tohit[1]
      else -- otherwise, we don't need to flay - go full ham!
        string = "quickwield left dirk"..snd.sep.."quickwield right shield"..snd.sep.."wipe left"..snd.sep.."dstab "..snd.target.." "..tohit[2].." "..tohit[1]
        call = "wt Afflicting "..snd.target..": "..tohit[2]..", "..tohit[1]
      end
		end
		if snd.toggles.affcalling and not snd.target_gone then
			string = call..snd.sep..string
		end
		-- now let's see if we can append some hypnosis
		if snd.hypno == "open" or snd.hypno == "none" then
			-- 'open' means they're ready for suggestions, 'none' means we haven't started yet
			-- either way, we're going to suggest something now
			if #snd.hypno_stack &gt;= snd.last_hypno + 1 then -- we still have more in the hypno_stack
				snd.hyp = snd.last_hypno+1 -- move on to the next thing
				if snd.hypno == "none" then -- if we haven't hypnotised yet
					string = string..snd.sep.."hypnotise "..snd.target -- do that first
				end
				-- append the suggestion to our attack string
				string = string..snd.sep.."suggest "..snd.target.." "..snd.hypno_stack[snd.hyp]
			elseif snd.hypno == "open" then -- we're at the end of the (hypno) line, and they're not sealed yet
				string = "seal "..snd.target.." 3" -- so seal them up
			end
			elseif snd.hypno == "ready" then --They're sealed so snap em!
			  string = string..snd.sep.."snap "..snd.target
			end
		elseif snd.hypno == "running" then -- we have an active hypnosis going
			-- just append hypnotise so we don't miss when it ends
			string = string..snd.sep.."hypnotise "..snd.target
		end
	 
	
	-- anything we can do with shadow balance this round?
	if gmcp.Char.Vitals.ability_bal == "1" and gmcp.Char.Vitals.prone == "0" then
		-- we do have shadow balance and we don't need to hold it for numbness
		if snd.target_locked() and #snd.target_has &gt;= 8 then
			-- the target's locked and affed up, let's hurry the finish along
			string = string..snd.sep.."shadow sleight pall "..snd.target
		elseif not snd.checkAff("void") and snd.hypno ~= "running" then
			-- they aren't under active hypnosis, and not locked - let's void!
			string = string..snd.sep.."shadow sleight void "..snd.target
		else -- they're under hypnosis, but not yet locked, nudge it along with dissipate
			string = string..snd.sep.."shadow sleight dissipate "..snd.target
		end
	end
	if string ~= snd.last_attack and not snd.waiting.queue then
		snd.last_attack = string
		snd.attack(snd.last_attack)
		snd.waiting.queue = true
		tempTimer(0.2, [[snd.waiting.queue = false]])
	end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^aff$</regex>
								</Alias>
							</AliasGroup>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Damage Offenses</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>damage</name>
									<script>if snd.class == "Syssin" then
snd.starting_attack()
function snd.attack_function()
 local string = ""
 if not snd.waiting.queue then
  if (snd.defenses.def_hiding.state == "deffed" or snd.defenses.def_phase.state == "deffed") and not snd.used.shield then
	 string = "quickwield left dirk"..snd.sep.."backstab "..snd.target
  elseif snd.proned() and not snd.used.shield then
   string = "quickwield left whip"..snd.sep.."garrote "..snd.target
  else
	 if snd.used.paste then
	  string = "quickwield left whip"..snd.sep.."flay "..snd.target.." fangbarrier"
	 else
    string = "bite "..snd.target.." camus"
	 end
  end
 if gmcp.Char.Vitals.ability_bal == "1" and gmcp.Char.Vitals.prone == "0" then
	-- we do have shadow balance
  string = string..snd.sep.."shadow sleight pall "..snd.target
 end
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^dmg$</regex>
								</Alias>
							</AliasGroup>
						</AliasGroup>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Wayfarer</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Affs</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>Salve affs priority</name>
									<script>if snd.class == "Wayfarer" then -- Requires dropstrike
snd.starting_attack()
function snd.attack_function()
	if not snd.waiting.queue then
		local string = "" -- we'll load this with our attack string
		local call = "" -- and this with our affliction call
		local touse = {}
		local tohit = {}
		local extraaff = ""
		local missing = snd.missingAff("stupidity/paresis/anorexia/asthma/slickness", "/")
		local shatter = false
		local indoors = table.contains(gmcp.Room.Info.details, "indoors")
		local enrage = false
		local preatk = "qa "..snd.target..snd.sep
		
		if tonumber(gmcp.Char.Vitals.fury) &gt;=40 then
			shatter = true -- spam it
		else
			shatter = false
		end

		if tonumber(gmcp.Char.Vitals.fury) &gt;=50 then
			enrage = true
		else
			enrage = false
		end
		
		snd.giving = {
			"a broken left leg",
			"a broken right leg",
			"sensitivity",
			"a broken left arm",
			"a broken right arm",
			"stupidity",
			"anorexia",
			"asthma",
			"slickness",
			"paresis",
			"clumsiness",
    }
		if #missing == 2 and not snd.used.shield and not snd.used.rebounding then
			venom = snd.effects[missing[1]]
		elseif #missing == 1 and not snd.used.shield then
			venom = snd.effects[missing[1]]
		end
		
  	for i in pairs(snd.giving) do
  		if not snd.checkAff(snd.giving[i]) then
				if not table.contains(touse, snd.giving[i]) then 
				table.insert(touse, snd.giving[i])
				end
  		end
  	end
		
		for i in pairs(touse) do
        table.insert(tohit, snd.effects[touse[i]])
		end
		
		while #tohit &lt; 3 do
			table.insert(tohit, extraaff)
		end
		
		if snd.used.shield then
			string = "axe devastate "..snd.target.." "..tohit[1]
			call = "wt Afflicting "..snd.target..": "..tohit[1]..snd.sep
		elseif snd.used.shield and snd.used.rebounding then
			string = "axe devastate "..snd.target
		else
			string = "axe lob "..snd.target.." "..tohit[1]
			call = "wt Afflicting "..snd.target..": "..tohit[1]..snd.sep
		end
		
		if snd.health_percent &lt;= 35 and not indoors then
			if not snd.used_rebounding and not snd.highjumped then
			string = "highjump"
			elseif snd.highjumped == true then
				string = "axe dropstrike "..snd.target.." "..tohit[1]
				call = "wt Afflicting "..snd.target..": "..tohit[1]..snd.sep
			elseif snd.used_rebounding then
			string = "axe devastate "..snd.target.." "..tohit[1]
			call = "wt Afflicting "..snd.target..": "..tohit[1]..snd.sep
			end
		end

    if snd.health_percent &gt; 35 and not indoors and snd.checkAff("sensitivity") and snd.proned() and (snd.checkAff("a broken right leg") or snd.checkAff("a broken left leg")) then
			string = preatk.."axe slaughter "..snd.target.." "..tohit[2].." "..tohit[1]
			call = "wt Afflicting "..snd.target..": "..tohit[2]..", "..tohit[1]..snd.sep
		end
		
		if indoors and snd.checkAff("sensitivity") and snd.proned() and (snd.checkAff("a broken right leg") or snd.checkAff("a broken left leg")) then
			string = preatk.."axe slaughter "..snd.target.." "..tohit[2].." "..tohit[1]
			call = "wt Afflicting "..snd.target..": "..tohit[2]..", "..tohit[1]..snd.sep
		end
		
		if shatter and not snd.checkAff("sensitivity") and not snd.checkAff("weariness") and not snd.enraged then
			string = "fury shatter "..snd.target..snd.sep..string
		end
		
		if enrage == true and not snd.enraged and snd.checkAff("sensitivity") then
			string = "fury enrage "..snd.sep..string
		end
		

		if snd.toggles.affcalling and not snd.target_gone then
			string = call..string
		end
		
		-- handle anti-spam and the actual attacking now
		if string ~= snd.last_attack and not snd.waiting.queue then
			snd.last_attack = string
			snd.attack(snd.last_attack)
			snd.waiting.queue = true
			tempTimer(snd.delay(), [[snd.waiting.queue = false]])
		end
	end
end
		
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^legs$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>wayfarer aff support</name>
									<script>if snd.class == "Wayfarer" then
snd.starting_attack()
function snd.attack_function()
	if not snd.waiting.queue then
		local string = ""
		local call = "" 
		local touse = {}
		local tohit = {}
		local preatk = "qa "..snd.target..snd.sep
		
		local fury_amount = tonumber(gmcp.Char.Vitals.fury)
		local fury = ""

		snd.giving = {
		"asthma",
		"paresis",
		"clumsiness",
		"slickness",
		"a broken left leg",
		"a broken left arm",
		"anorexia",
		"stupidity",
		"a broken right leg",
		"a broken right arm",
		"haemophilia",
		"allergies",
		"vomiting",
		"recklessness",
		"sensitivity",
		"sight",
		"shyness",
		"dizziness",
    }
		
--This is a special case to use slaughter to quickly lock someone, with the additional chance 
--of using muddled to seal it long enough for next round. Affs are checked backwards so we can
--use the most necessary first, as they'll be put on top of the stack first.
		
		if snd.checksomeAffs({"slickness","clumsiness", "hypochondria", "weariness", "paresis"}, 2) and snd.checkAff("asthma") then
			if not snd.checkAff("stupidity") then
				if fury_amount &gt;= 60 and tonumber(gmcp.Char.Vitals.ability_bal) then
					fury = "fury shatter "..snd.target.." boost"
				else
					table.insert(snd.giving, 1, "stupidity")
				end
			end

			if not snd.checkAff("anorexia") then
				table.insert(snd.giving, 1, "anorexia")
			end

			if not snd.checkAff("slickness") then
				table.insert(snd.giving, 1, "slickness")
			end
			string = "we gon slaughter this bruh"
		end
-----	
		for i in pairs(snd.giving) do
  		if not snd.checkAff(snd.giving[i]) then
				if not table.contains(touse, snd.giving[i]) then 
				table.insert(touse, snd.giving[i])
				end
  		end
  	end
		
		for i in pairs(touse) do
        table.insert(tohit, snd.effects[touse[i]])
		end
-----
		if snd.used.shield then
			if snd.used.rebounding then
				string = "axe devastate "..snd.target
				call = nil
			else
				string = "axe devastate "..snd.target.." "..tohit[1]
			end
			
		elseif string:find("slaughter") or snd.target_locked() then
			string = "axe slaughter "..snd.target.." "..tohit[2].." "..tohit[1]
		
		else
			string = "axe lob "..snd.target.." "..tohit[1]
			
		end
		
		if fury_amount &gt;= 83 and tonumber(gmcp.Char.Vitals.ability_bal) and not snd.checkAff("lethargy") then
			fury = "fury halt "..snd.target
		end

		if fury~= "" then string = fury..snd.sep..string end

-----
		if snd.toggles.affcalling and not snd.target_gone and call ~= nil then
			if string:find("slaughter") then
				call = "wt Afflicting "..snd.target..": "..tohit[2]..", "..tohit[1]..snd.sep
			else
				call = "wt Afflicting "..snd.target..": "..tohit[1]..snd.sep
			end
			string = call..string
		end

		if string ~= snd.last_attack and not snd.waiting.queue then
			snd.last_attack = string
			snd.attack(snd.last_attack)
			snd.waiting.queue = true
			tempTimer(snd.delay(), [[snd.waiting.queue = false]])
		end
	end
end
		
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^lock$</regex>
								</Alias>
							</AliasGroup>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Damage</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>sensi + tfix support</name>
									<script>if snd.class == "Wayfarer" then
snd.starting_attack()
function snd.attack_function()
	
	if not snd.waiting.queue then
	
		local string = ""
		local call = ""
		local touse = {}
		local tohit = {}
		local extraaff = ""
		local boosthalt = false
		if tonumber(gmcp.Char.Vitals.fury) &gt;=50 then
			boosthalt = true -- spam it
		else
			boosthalt = false
		end
		
		snd.giving = {
		"hearing",
		"sensitivity",
		"sight",
		"paresis",
		"asthma",
		"vomiting",
		"allergies",
		"slickness",
		"a broken left leg",
		"a broken right leg",
		"anorexia",
		"stupidity",
    }
		
		for i in pairs(snd.giving) do
			if not snd.checkAff(snd.giving[i]) then
			if not table.contains(touse, snd.giving[i]) then 
				table.insert(touse, snd.giving[i])
				end
 			end
		end
		
		for i in pairs(touse) do
			table.insert(tohit, snd.effects[touse[i]])
		end
		
		while #tohit &lt; 3 do
			table.insert(tohit, extraaff)
		end
		
		if snd.used.shield then
			string = "axe devastate "..snd.target.." "..tohit[1]
			call = "wt Afflicting "..snd.target..": "..tohit[1]..snd.sep
		elseif snd.used.shield and snd.used.rebounding then
			string = "axe devastate "..snd.target
		else
			string = "axe slaughter "..snd.target.." "..tohit[2].." "..tohit[1]
			call = "wt Afflicting "..snd.target..": "..tohit[2]..", "..tohit[1]..snd.sep
		end
		
		if boosthalt and not snd.enraged then
			string = "fury halt "..snd.target.." boost"..snd.sep..string
		end
		
		if snd.proned() and boosthalt and not snd.enraged and snd.checkAff("sensitivity") and (snd.checkAff("a broken right leg") or snd.checkAff("a broken left leg")) then
			string = "fury enrage"..snd.sep..string
		end

		if snd.toggles.affcalling and not snd.target_gone then
			string = call..snd.sep..string
		end
		
		if string ~= snd.last_attack and not snd.waiting.queue then
			snd.last_attack = string
			snd.attack(snd.last_attack)
			snd.waiting.queue = true
			tempTimer(snd.delay(), [[snd.waiting.queue = false]])
		end
	end
end

snd.attack_function()
end
</script>
									<command></command>
									<packageName></packageName>
									<regex>^dmg$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>lock into slaughter</name>
									<script>if snd.class == "Wayfarer" then
snd.starting_attack()
function snd.attack_function()
	if not snd.waiting.queue then
		local string = "" -- we'll load this with our attack string
		local call = "" -- and this with our affliction call
		local touse = {}
		local tohit = {}
		local extraaff = ""
		local missing = snd.missingAff("stupidity/paresis/anorexia/asthma/slickness", "/")
		local shatter = false
		local boostshatter = false
		local indoors = table.contains(gmcp.Room.Info.details, "indoors")
		local enrage = false
		local preatk = "qa "..snd.target..snd.sep
		
		if tonumber(gmcp.Char.Vitals.fury) &gt;=40 then
			shatter = true -- spam it
		else
			shatter = false
		end

		if tonumber(gmcp.Char.Vitals.fury) &gt;=60 then
			boostshatter = true -- spam it
		else
			boostshatter = false
		end

		if tonumber(gmcp.Char.Vitals.fury) &gt;=50 then
			enrage = true
		else
			enrage = false
		end
		
		-- set the affs we want to use
		snd.giving = {
		"paresis",
		"asthma",
		"weariness",
		"sight",
		"sensitivity",
		"slickness",
		"anorexia",
		"stupidity",
		"a broken left leg",
		"a broken right leg",
		"clumsiness",
		"haemophilia",
		"allergies",
		"vomiting",
		"recklessness",
		"dizziness",
    }
		if #missing == 2 and not snd.used.shield and not snd.used.rebounding then
			venom = snd.effects[missing[1]]
		elseif #missing == 1 and not snd.used.shield then
			venom = snd.effects[missing[1]]
		end
		
		-- pick affs from the list above
  	for i in pairs(snd.giving) do
  		-- make sure not to double up paresis and paralysis
  		if not snd.checkAff(snd.giving[i]) then
  			-- and don't add an aff we've already got one higher in the list!
				if not table.contains(touse, snd.giving[i]) then 
				table.insert(touse, snd.giving[i])
				end
  		end
  	end
		
		for i in pairs(touse) do
        table.insert(tohit, snd.effects[touse[i]])
		end
		
		while #tohit &lt; 3 do
			table.insert(tohit, extraaff)
		end
		
		-- now to decide what attack to use!
		if snd.used.shield then
			string = "axe devastate "..snd.target.." "..tohit[1]
			call = "wt Afflicting "..snd.target..": "..tohit[1]..snd.sep
		elseif snd.used.shield and snd.used.rebounding then
			string = "axe devastate "..snd.target
		else
			string = "axe lob "..snd.target.." "..tohit[1]
			call = "wt Afflicting "..snd.target..": "..tohit[1]..snd.sep
		end
		
    if snd.proned() and snd.checkAff("sensitivity") and (snd.checkAff("a broken right leg") or snd.checkAff("a broken left leg")) then
			string = preatk.."axe slaughter "..snd.target.." "..tohit[2].." "..tohit[1]
			call = "wt Afflicting "..snd.target..": "..tohit[2]..", "..tohit[1]..snd.sep
		end
		
		if shatter and #missing &gt; 2 and not snd.checkAff("sensitivity") and not snd.enraged then
			string = "fury shatter "..snd.target..snd.sep..string
		end
		
		if boostshatter and #missing &lt;= 2 and not snd.checkAff("sensitivity") and not snd.enraged then
			string = "fury shatter "..snd.target.." boost"..snd.sep..string
		end
		
		if enrage == true and not snd.enraged and snd.checkAff("sensitivity") then
			string = "fury enrage "..snd.sep..string
		end
		
		-- prepend our affliction call, if we need one
		if snd.toggles.affcalling and not snd.target_gone then
			string = call..string
		end
		
		-- handle anti-spam and the actual attacking now
		if string ~= snd.last_attack and not snd.waiting.queue then
			snd.last_attack = string
			snd.attack(snd.last_attack)
			snd.waiting.queue = true
			tempTimer(snd.delay(), [[snd.waiting.queue = false]])
		end
	end
end

snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^gaff$</regex>
								</Alias>
							</AliasGroup>
						</AliasGroup>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Shapeshifter</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Limb Offenses</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>mouse mode</name>
									<script>if snd.class == "Shapeshifter" then
snd.starting_attack()
function snd.attack_function()
 if not snd.waiting.queue then
  -- list what limbs to hit
  limbs = {"left leg", "right leg", "left arm", "right arm", "head", "torso"}
	mangled = "nothing"
	broken = "nothing"
	for limb in pairs(limbs) do
	 if snd.limb_status[limbs[limb]] == "mangled" and mangled == "nothing" then
	  if string.find(limbs[limb], "leg") and not table.contains(snd.target_has, "thighlock") then
	   mangled = limbs[limb]
		elseif limbs[limb] == "head" and not table.contains(snd.target_has, "necklock") then
		 mangled = limbs[limb]
		elseif not table.contains(snd.target_has, "armpitlock") and (limbs[limb] == "torso" or string.find(limbs[limb], "arm")) then
		 mangled = limbs[limb]
		end
	 elseif snd.limb_status[limbs[limb]] == "broken" and snd.limb_dmg[limbs[limb]] &lt; 66.66 and broken == "nothing" then
	  if string.find(limbs[limb], "leg") or string.find(limbs[limb], "arm") then
	   broken = limbs[limb]
		end
	 end
	end
	if snd.used.shield then
	 string = "touch hammer "..snd.target
	-- check if we can jawlock now!
	elseif theyran then
		string = "neckdrag "..snd.target..snd.neckdragdir
	
  elseif snd.proned() and mangled ~= "nothing" and not snd.jawlocked then
	 if string.find(mangled, "leg") then
	  string = "jawlock thigh of "..snd.target
	 elseif mangled == "head" then
	  string = "jawlock neck of "..snd.target
	 elseif mangled == "torso" or string.find(mangled, "arm") then
	  string = "jawlock armpit of "..snd.target
	 end
	elseif broken ~= "nothing" and not snd.jawlocked then
	 string = "destroy "..broken.." of "..snd.target
	else
	 left = "nothing"
	 right = "nothing"
	 for limb in pairs(limbs) do
	  if limbs[limb] ~= snd.parried_limb and limbs[limb] ~= snd.last_hit_limb and (limbs[limb] ~= snd.resto_limb or snd.limb_dmg[limbs[limb]] &gt;= 33.33) then
		 if right == "nothing" then
		  right = limbs[limb]
		 elseif left == "nothing" then
		  left = limbs[limb]
		 end
		end
	 end
	 if left == "nothing" then -- we only found one limb to hit
	  left = right -- double up!
	 end
	 string = "combo "..snd.target.." slash "..left.." slash "..right
	end
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^ms$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>group quarter</name>
									<script>if snd.class == "Shapeshifter" then
snd.starting_attack()
function snd.attack_function()
 if not snd.waiting.queue then
 
  -- list what limbs to hit
  limbs = {"left leg", "right leg", "left arm", "right arm", "head", "torso"}
	mangled = "nothing"
	broken = "nothing"
	for limb in pairs(limbs) do
	 if snd.limb_status[limbs[limb]] == "mangled" and mangled == "nothing" then
	  if string.find(limbs[limb], "leg") and not table.contains(snd.target_has, "thighlock") then
	   mangled = limbs[limb]
		elseif limbs[limb] == "head" and not table.contains(snd.target_has, "necklock") then
		 mangled = limbs[limb]
		elseif not table.contains(snd.target_has, "armpitlock") and (limbs[limb] == "torso" or string.find(limbs[limb], "arm")) then
		 mangled = limbs[limb]
		end
	 elseif snd.limb_status[limbs[limb]] == "broken" and snd.limb_dmg[limbs[limb]] &lt; 66.66 and broken == "nothing" then
	  if string.find(limbs[limb], "leg") or string.find(limbs[limb], "arm") then
	   broken = limbs[limb]
		end
	 end
	end
		if snd.used.shield then
	 string = "touch hammer "..snd.target
	-- check if we can jawlock now!
	elseif theyran then
		string = "neckdrag "..snd.target..snd.neckdragdir
	elseif (table.contains(snd.target_has, "thighlock") or table.contains(snd.target_has, "necklock") or table.contains(snd.target_has, "armpitlock")) and not snd.jawlocked then
	 string = "quarter "..snd.target
	elseif broken ~= "nothing" and not snd.jawlocked then
	 string = "destroy "..broken.." of "..snd.target
	else
	 left = "nothing"
	 right = "nothing"
	 for limb in pairs(limbs) do
	  if limbs[limb] ~= snd.parried_limb and limbs[limb] ~= snd.last_hit_limb and (limbs[limb] ~= snd.resto_limb or snd.limb_dmg[limbs[limb]] &gt;= 33.33) then
		 if right == "nothing" then
		  right = limbs[limb]
		 elseif left == "nothing" then
		  left = limbs[limb]
		 end
		end
	 end
	 if left == "nothing" then -- we only found one limb to hit
	  left = right -- double up!
	 end
	 string = "combo "..snd.target.." slash "..left.." slash "..right
	end
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^insta$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>limbs</name>
									<script>if snd.class == "Shapeshifter" then
snd.starting_attack()
function snd.attack_function()
 if not snd.waiting.queue then
  -- list what limbs to hit
  limbs = {"left leg", "right leg", "left arm", "right arm", "head", "torso"}
	mangled = "nothing"
	broken = "nothing"
	crippled = "nothing"
	for limb in pairs(limbs) do
	 if snd.limb_status[limbs[limb]] == "mangled" and mangled == "nothing" then
	  if string.find(limbs[limb], "leg") and not table.contains(snd.target_has, "thighlock") then
	   mangled = limbs[limb]
		elseif limbs[limb] == "head" and not table.contains(snd.target_has, "necklock") then
		 mangled = limbs[limb]
		elseif not table.contains(snd.target_has, "armpitlock") and (limbs[limb] == "torso" or string.find(limbs[limb], "arm")) then
		 mangled = limbs[limb]
		end
	 elseif snd.limb_status[limbs[limb]] == "broken" and snd.limb_dmg[limbs[limb]] &lt; 66.66 and broken == "nothing" then
	  if string.find(limbs[limb], "leg") or string.find(limbs[limb], "arm") then
	   broken = limbs[limb]
		end
	 elseif table.contains(snd.target_has, "a broken "..limbs[limb]) and snd.limb_dmg[limbs[limb]] &lt; 33.33 and crippled == "nothing" then
	  if string.find(limbs[limb], "leg") or string.find(limbs[limb], "arm") then
		 crippled = limbs[limb]
		end
	 end
	end
	if snd.used.shield then
	 string = "touch hammer "..snd.target
	
	elseif theyran then
		string = "neckdrag "..snd.target..snd.neckdragdir
	elseif snd.jawlocked then
	 string = "rupture "..snd.target
	-- check if we can jawlock now!
  elseif snd.proned() and mangled ~= "nothing" and not snd.jawlocked then
	 if string.find(mangled, "leg") then
	  string = "jawlock thigh of "..snd.target
	 elseif mangled == "head" then
	  string = "jawlock neck of "..snd.target
	 elseif mangled == "torso" or string.find(mangled, "arm") then
	  string = "jawlock armpit of "..snd.target
	 end
	elseif broken ~= "nothing" and not snd.jawlocked and snd.defenses.def_fury.state ~= "deffed" then
	 string = "destroy "..broken.." of "..snd.target
	elseif crippled ~= "nothing" and not snd.jawlocked and snd.defenses.def_fury.state ~= "deffed" then
	 string = "mangle "..crippled.." of "..snd.target
	elseif snd.resto_limb ~= "none" and snd.defenses.def_fury.state ~= "deffed" then
	 string = "combo "..snd.target.." hamstring left hamstring right"
	else
	 left = "nothing"
	 right = "nothing"
	 for limb in pairs(limbs) do
	  if limbs[limb] ~= snd.parried_limb and limbs[limb] ~= snd.last_hit_limb and (limbs[limb] ~= snd.resto_limb or snd.limb_dmg[limbs[limb]] &gt;= 33.33) then
		 if right == "nothing" then
		  right = limbs[limb]
		 elseif left == "nothing" then
		  left = limbs[limb]
		 end
		end
	 end
	 if left == "nothing" then -- we only found one limb to hit
	  left = right -- double up!
	 end
	 string = "combo "..snd.target.." slash "..left.." slash "..right
	 if snd.defenses.def_fury.state == "deffed" then
	  string = "pounce "..snd.target..snd.sep..string
	 end
	end
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^limbs$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>Skiva</name>
									<script>--making the converter to ferality attacks refrences later.
if snd.class == "Shapeshifter" then    
	snd.starting_attack()
		
	function snd.attack_function()        
 		if not snd.waiting.queue then                    
  		local function feralityConvert(limb)            
    		if string.find(limb, "leg") then              
    		  return "hamstring "..limb:gsub(" leg", "")
    		elseif string.find(limb, "arm") then
      		return "rend "..limb:gsub(" arm", "")
    		elseif limb == "torso" then
      		return "bodypunch"         
    		elseif limb == "head" then
      		return "skullwhack"
    		else
      		return "slash "..limb
    		end
  		end
	
-- Making the table of limbs and damage
  		limbs = {"left leg", "right leg", "left arm", "right arm", "head", "torso"}
			mangled = "nothing"
			broken = "nothing"
			crippled = "nothing"
			
			for limb in pairs(limbs) do
	 			if snd.limb_status[limbs[limb]] == "mangled" and mangled == "nothing" then -- checking for mangle opertunities
		  		if string.find(limbs[limb], "leg") and not snd.checksomeAffs({"groinrip","thighlock"},1) then	
				 		mangled = limbs[limb]
					elseif limbs[limb] == "head" and not snd.checksomeAffs({"throatrip","necklock"},1) then
				 		mangled = limbs[limb]
					elseif not snd.checksomeAffs({"spleenrip","armpitlock"},1) and (limbs[limb] == "torso" or string.find(limbs[limb], "arm")) then
				 		mangled = limbs[limb]
					end
			 	elseif snd.limb_status[limbs[limb]] == "broken" and snd.limb_dmg[limbs[limb]] &lt; 66.66 and broken == "nothing" then -- Updating the table with current breaks
			  	if string.find(limbs[limb], "leg") or string.find(limbs[limb], "arm") then
	   				broken = limbs[limb]
					end
	 			elseif table.contains(snd.target_has, "a broken "..limbs[limb]) and snd.limb_dmg[limbs[limb]] &lt; 33.33 and crippled == "nothing" then -- Updating the table with current cripples
	  			if string.find(limbs[limb], "leg") or string.find(limbs[limb], "arm") then
				 		crippled = limbs[limb]
					end
	 			end
			end  --end of for loop       
	
	 		if snd.used.shield then           
		 		string = "pounce "..snd.target
			elseif snd.checksomeAffs({"groinrip", "throatrip", "spleenrip"},2) then --nom nom nom
				string = "devour "..snd.target            
			elseif snd.checkAff("necklock") and not snd.checkAff("throatrip") then-- Checking for Rip opertunities
				string = "throatrip "..snd.target          
			elseif snd.checkAff("armpitlock") and not snd.checkAff("spleenrip") then-- Checking for Rip opertunities
				string = "spleenrip "..snd.target
			elseif snd.checkAff("thighlock") and not snd.checkAff("groinrip") then-- Checking for Rip opertunities
				string = "groinrip "..snd.target
			elseif snd.proned() and mangled ~= "nothing" and not snd.jawlocked then -- Checking for Jawlock opertunities
				if string.find(mangled, "leg") and not snd.checkAff("groinrip")then
	  			string = "jawlock thigh of "..snd.target
	 			elseif mangled == "head" and not snd.checkAff("throatrip") then
	  			string = "jawlock neck of "..snd.target
	 			elseif mangled == "torso" or string.find(mangled, "arm") and not snd.checkAff("spleenrip") then
	  			string = "jawlock armpit of "..snd.target
				end
			elseif broken ~= "nothing" and not snd.jawlocked and snd.defenses.def_fury.state ~= "deffed" then  -- Limb escalation
		 		string = "destroy "..broken.." of "..snd.target   
			elseif crippled ~= "nothing" and not snd.jawlocked and snd.defenses.def_fury.state ~= "deffed" then -- Limb escalation
	 			string = "mangle "..crippled.." of "..snd.target

			else -- build the limb breaks if nothing else major going on
	 			left = "nothing"       
	 			right = "nothing"          
	 			for limb in pairs(limbs) do
	  			if limbs[limb] ~= snd.parried_limb and limbs[limb] ~= snd.last_hit_limb and not table.contains(snd.target_has, "a broken "..limb) then  
		 				if right == "nothing" then  
		  				right = limbs[limb]
		 				elseif left == "nothing" then  
		  				left = limbs[limb]
		 				end
					end
	 			end
	 
--Doubling up the same attack if only one is found
	 			if left == "nothing" then 
	  			left = right 
	 			end
	 
-- using the feraility convert with what we've made so far
	 			string = "combo "..snd.target.." "..feralityConvert(left).." "..feralityConvert(right)  
			end -- end of primary attacking function setup
	
--queuing it so we can keep the attack rolling
  	if string ~= snd.last_attack and not snd.waiting.queue then   
   		snd.last_attack = string 
   		snd.send("qeb "..snd.last_attack)
   		snd.waiting.queue = true
   		tempTimer(snd.delay(), [[snd.waiting.queue = false]])  
  	end--end the actual attack rolling
 	end --end the main code
end --end the function
--and sending it to the mud
snd.attack_function()   
end -- end the class if
</script>
									<command></command>
									<packageName></packageName>
									<regex>^kll$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>Skiva quartering</name>
									<script>if snd.class == "Shapeshifter" then
	snd.starting_attack()
	function snd.attack_function()
 		if not snd.waiting.queue then
  		local function feralityConvert(limb)
    		if string.find(limb, "leg") then
      		return "hamstring "..limb:gsub(" leg", "")
    		elseif string.find(limb, "arm") then
      		return "rend "..limb:gsub(" arm", "")
    		elseif limb == "torso" then
      		return "bodypunch"
    		elseif limb == "head" then
      		return "skullwhack"
    		else
      		return "slash "..limb
    		end
  		end
  -- list what limbs to hit
  		limbs = {"left leg", "right leg", "left arm", "right arm", "head", "torso"}
			mangled = "nothing"
      damaged = "nothing"
			broken = "nothing"
  		for limb in pairs(limbs) do
	 			if snd.limb_status[limbs[limb]] == "mangled" and mangled == "nothing" then
	  			if string.find(limbs[limb], "leg") and not table.contains(snd.target_has, "thighlock") then
	   				mangled = limbs[limb]
					elseif limbs[limb] == "head" and not table.contains(snd.target_has, "necklock") then
		 				mangled = limbs[limb]
					elseif not table.contains(snd.target_has, "armpitlock") and (limbs[limb] == "torso" or string.find(limbs[limb], "arm")) then
		 				mangled = limbs[limb]
					end
	 			elseif snd.limb_status[limbs[limb]] == "broken" and snd.limb_dmg[limbs[limb]] &lt; 66.66 and broken == "nothing" then
	  			if string.find(limbs[limb], "leg") or string.find(limbs[limb], "arm") and snd.parried_limb ~= limbs[limb] then
	   				broken = limbs[limb]
					end
	 			end
  		end  --end of for loop  
  		for _, aff in pairs(snd.target_has) do
      	if string.find(aff, "a broken") and snd.limb_status[aff:gsub("a broken ", "")] ~= "broken" and snd.limb_status[aff:gsub("a broken ", "")] ~= "mangled" and snd.parried_limb ~= aff:gsub("a broken ", "") then
        	damaged = aff:gsub("a broken ", "")
          break
        end
      end  --end of for loop  
			display(damaged)
			if snd.used.shield then
	 			string = "pounce "..snd.target
				
			elseif snd.checksomeAffs({"thighlock", "necklock", "armpitlock"},3) and not snd.jawlocked then -- check if we can jawlock now!
	 			string = "quarter "..snd.target
  		elseif snd.proned() and mangled ~= "nothing" and not snd.jawlocked then -- Checking for Jawlock opertunities
				if string.find(mangled, "leg") and not snd.checkAff("groinrip")then
	  			string = "jawlock thigh of "..snd.target
	 			elseif mangled == "head" and not snd.checkAff("throatrip") then
	  			string = "jawlock neck of "..snd.target
	 			elseif mangled == "torso" or string.find(mangled, "arm") and not snd.checkAff("spleenrip") then
	  			string = "jawlock armpit of "..snd.target
				end --end of attempts to get a lock in
	 
			elseif broken ~= "nothing" and not snd.jawlocked then
	 			string = "destroy "..broken.." of "..snd.target
			elseif damaged ~= "nothing" and not snd.jawlocked then
        string = "mangle "..damaged.." of "..snd.target
      else
	 			left = "nothing"
	 			right = "nothing"
	 			for limb in pairs(limbs) do
	  			if limbs[limb] ~= snd.parried_limb and limbs[limb] ~= snd.last_hit_limb and (limbs[limb] ~= snd.resto_limb or snd.limb_dmg[limbs[limb]] &gt;= 33.33) then
		 				if right == "nothing" then
		  				right = feralityConvert(limbs[limb])
		 				elseif left == "nothing" then
		  				left = feralityConvert(limbs[limb])
		 				end
					end
	 			end
	 			if left == "nothing" then -- we only found one limb to hit
	  			left = right -- double up!
	 			end
	 			string = "combo "..snd.target.." "..left.." "..right
			end -- end of primary attacking function setup
				
  		if string ~= snd.last_attack and not snd.waiting.queue then
   			snd.last_attack = string
   			snd.send("qeb "..snd.last_attack)
   			snd.waiting.queue = true
   			tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  	end--end the actual attack rolling
 	end --end the main code
end --end the function
--and sending it to the mud
snd.attack_function()   
end -- end the class </script>
									<command></command>
									<packageName></packageName>
									<regex>^quart$</regex>
								</Alias>
							</AliasGroup>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Damage Offenses</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>raw damage</name>
									<script>if snd.class == "Shapeshifter" then
snd.starting_attack()
function snd.attack_function()
 	if not snd.waiting.queue then
  	if snd.used.shield then
   		string = "touch hammer "..snd.target
		elseif theyran then
			string = "neckdrag "..snd.target..snd.neckdragdir
		elseif snd.defenses.def_fury.state == "deffed" then
	 		string = "pounce "..snd.target..snd.sep.."combo "..snd.target.." jugular jugular"
		elseif not snd.no_parry() then
	 		string = "combo "..snd.target.." bodypunch jugular"
		else
	 		string = "combo "..snd.target.." jugular jugular"
		end
  	if string ~= snd.last_attack and not snd.waiting.queue then
   		snd.last_attack = string
   		snd.attack(snd.last_attack)
   		snd.waiting.queue = true
   		tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  	end
 	end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^dmg$</regex>
								</Alias>
							</AliasGroup>
						</AliasGroup>
					</AliasGroup>
					<AliasGroup isActive="yes" isFolder="yes">
						<name>Spirit</name>
						<script></script>
						<command></command>
						<packageName></packageName>
						<regex></regex>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Ascendril</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Damage Offense</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>Manually reset glimpse</name>
									<script>snd.glimpse = "none"
snd.glimpsing = false</script>
									<command></command>
									<packageName></packageName>
									<regex>^glimpse none$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>order loyals aggro</name>
									<script>send("order efreeti kill "..snd.target)</script>
									<command></command>
									<packageName></packageName>
									<regex>^olk$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>order loyals stop aggro</name>
									<script>send("order loyals passive")</script>
									<command></command>
									<packageName></packageName>
									<regex>^olp$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>frozen</name>
									<script>if snd.class == "Ascendril" then
  snd.starting_attack()

  function snd.attack_function()
    if not snd.waiting.queue then
      local string = ""
      -- we'll load this with our attack string
      local call = ""
      -- and this with our affliction call
      -- next, the afflictions we want to give
      local touse = {}
      local tohit = {}
      local stalled = false
      if snd.defenses.def_stalled.state == "deffed" then
        stalled = true
      end
      -- and in case we don't find enough of them
      local total_aff_count = 0
      for aff in pairs(snd.all_affs) do
        if table.contains(snd.target_has, snd.all_affs[aff]) then
          total_aff_count = total_aff_count + 1
        end
      end
      local extraaff = ""
      snd.giving = {"anorexia"}
      for i in pairs(snd.giving) do
        -- make sure not to double up paresis and paralysis
        if not snd.checkAff(snd.giving[i]) then
          -- and don't add an aff we've already got in the list!
          if not table.contains(touse, snd.giving[i]) then
            table.insert(touse, snd.giving[i])
          end
        end
      end
      -- now let's convert affs to venoms/empowerments
      for aff in pairs(touse) do
        table.insert(tohit, snd.effects[touse[aff]])
      end
      -- if we didn't find enough stuff to hit with, stick in our filler
      while #tohit &lt; 3 do
        table.insert(tohit, extraaff)
      end
      if snd.glimpse == "none" and not snd.glimpsing and not snd.checkAff("frostbrand") then
        string = "fulcrum glimpse water"
      elseif snd.glimpse == "none" and snd.checkAff("frostbrand") then
        string = "fulcrum catalyst " .. snd.target .. " frost"
      elseif snd.used.shield == true then
        string = "cast windlance " .. snd.target
      elseif snd.glimpse == "water" or snd.glimpse == "fire" or snd.glimpse == "air" then
        if gmcp.Char.Vitals.ability_bal == "1" then
          string = "fulcrum flare " .. snd.target
        end
        if snd.checkAff("frozen") and snd.checkAff("impaled") then
          string = string .. snd.sep .. "cast shatter " .. snd.target
        elseif gmcp.Char.Vitals.resonance == "water" then
          if not stalled then
            if snd.limb_dmg.torso == 0 and snd.parried_limb ~= "torso" then
              string = string .. snd.sep .. "fulcrum stall 3 firelash " .. snd.target .. " torso"
            elseif snd.limb_dmg.torso &gt; 0 then
              string = string .. snd.sep .. "fulcrum stall 3 mistral " .. snd.target
            end
          elseif stalled then
            if snd.checkAff("shivering") and not snd.checkAff("direfrost") and not snd.checkAff("frostbrand") then
              string = string .. snd.sep .. "cast direfrost " .. snd.target
            elseif snd.checkAff("frozen") and not snd.target_impaled then
              string = string .. snd.sep .. "cast icicle " .. snd.target
            else
              string = string .. snd.sep .. "cast mistral " .. snd.target
						end
          end
        elseif gmcp.Char.Vitals.resonance == "fire" then
          if not stalled then
            if snd.limb_dmg.torso == 0 and snd.parried_limb ~= "torso" then
              string = string .. snd.sep .. "fulcrum stall 3 firelash " .. snd.target .. " torso"
            elseif snd.limb_dmg.torso &gt; 0 then
              string = string .. snd.sep .. "fulcrum stall 3 coldsnap " .. snd.target
            end
          elseif stalled then
            if snd.checkAff("shivering") and not snd.checkAff("direfrost") and not snd.checkAff("frostbrand") then
              string = string .. snd.sep .. "cast direfrost " .. snd.target
            elseif snd.checkAff("frozen") and not snd.target_impaled then
              string = string .. snd.sep .. "cast icicle " .. snd.target
            elseif not snd.checkAff("gorged") then
              string = string .. snd.sep .. "cast gorge " .. snd.target .. " euphoriant"
						else
							string = string .. snd.sep .. "cast hailstorm " .. snd.target
            end
          end
        elseif gmcp.Char.Vitals.resonance == "air" then
          if not stalled then
            if snd.limb_dmg.torso == 0 and snd.parried_limb ~= "torso" then
              string = string .. snd.sep .. "fulcrum stall 3 firelash " .. snd.target .. " torso"
            else
              string = string .. snd.sep .. "fulcrum stall 3 hailstorm " .. snd.target
            end
          elseif stalled then
           if snd.checkAff("shivering") and not snd.checkAff("direfrost") and not snd.checkAff("frostbrand") then
              string = string .. snd.sep .. "cast direfrost " .. snd.target
            elseif snd.checkAff("frozen") and not snd.target_impaled then
              string = string .. snd.sep .. "cast icicle " .. snd.target
            elseif not snd.checkAff("gorged") then
              string = string .. snd.sep .. "cast gorge " .. snd.target .. " euphoriant"
						elseif not snd.checkAff("masochism") then
							string = string .. snd.sep .. "cast coldsnap " ..snd.target
						else
							string = string .. snd.sep .. "cast hailstorm " ..snd.target
            end
          end
        end
      end
      if string ~= snd.last_attack and not snd.waiting.queue then
        snd.last_attack = string
        snd.attack(snd.last_attack)
        snd.waiting.queue = true
        tempTimer(snd.delay(), [[snd.waiting.queue = false]])
      end
    end
  end

  snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^freeze$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>damage</name>
									<script>if snd.class == "Ascendril" then
snd.starting_attack()
function snd.attack_function()
	if not snd.waiting.queue then
		local string = "" -- we'll load this with our attack string
		local call = "" -- and this with our affliction call
			
	if snd.glimpse == "none" and snd.checkAff("stormtouched") and not snd.glimpsing then
		string = "fulcrum glimpse air"
	elseif snd.glimpse == "none" and not snd.checkAff("stormtouched") then
		string = "fulcrum glimpse fire"
	end

	if snd.checkAff("stormtouched") and not snd.used.shield then
		string = string..snd.sep.."cast lightning "..snd.target
	end
	
	if snd.used.shield then
		string = string..snd.sep.."cast windlance "..snd.target
	end

	if snd.glimpse == "water" or snd.glimpse == "fire" or snd.glimpse == "air" then
	
		if gmcp.Char.Vitals.ability_bal == "1" then
			string = "fulcrum flare "..snd.target
		end
		
		if gmcp.Char.Vitals.resonance == "none" or gmcp.Char.Vitals.resonance == "water" then
			string = string..snd.sep.."fulcrum enrich fire"
		end

		if gmcp.Char.Vitals.resonance == "fire" then
			string = string..snd.sep.."cast windlance "..snd.target
		end

		if gmcp.Char.Vitals.resonance == "air" then
			string = string..snd.sep.."cast fireball "..snd.target
		end

end

	if string ~= snd.last_attack and not snd.waiting.queue then
		snd.last_attack = string
		snd.attack(snd.last_attack)
		snd.waiting.queue = true
		tempTimer(snd.delay(), [[snd.waiting.queue = false]])
	end
end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^damage$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>solo shatter</name>
									<script>if snd.class == "Ascendril" then
  snd.starting_attack()

  function snd.attack_function()
    if not snd.waiting.queue then
      local string = ""
      -- we'll load this with our attack string
      local call = ""
      -- and this with our affliction call
      local limbs = {"left leg", "right leg", "left arm", "right arm"}
      local targ = "nothing"
      local stalled = false
      if snd.defenses.def_stalled.state == "deffed" then
        stalled = true
      end
      for limb in pairs(limbs) do
        -- ignore last parried, last hit, and any limbs being resto'd
        if
          limbs[limb] ~= snd.parried_limb and
          limbs[limb] ~= snd.last_hit_limb and
          limbs[limb] ~= snd.resto_limb
        then
          if targ == "nothing" then
            targ = limbs[limb]
          end
        end
      end
      if snd.glimpse == "none" and not snd.glimpsing and not snd.checkAff("frostbrand") then
        string = "fulcrum glimpse water"
      elseif snd.glimpse == "none" and snd.checkAff("frostbrand") then
        string = "fulcrum catalyst " .. snd.target .. " frost"
      elseif snd.used.shield == true then
        string = "cast windlance " .. snd.target
      elseif snd.glimpse == "water" or snd.glimpse == "fire" or snd.glimpse == "air" then
        if gmcp.Char.Vitals.ability_bal == "1" then
          string = "fulcrum flare " .. snd.target
        end
        if snd.checkAff("frozen") and snd.checkAff("impaled") then
          string = string .. snd.sep .. "cast shatter " .. snd.target
        elseif gmcp.Char.Vitals.resonance == "water" then
          if not stalled then
            if snd.limb_dmg.torso == 0 and snd.parried_limb ~= "torso" then
              string = string .. snd.sep .. "fulcrum stall 3 firelash " .. snd.target .. " torso"
            else
              string = string .. snd.sep .. "fulcrum stall 3 firelash " .. snd.target .. " " .. targ
            end
          elseif stalled then
            if
              snd.checkAff("no_caloric") and
              not snd.checkAff("direfrost") and
              not snd.checkAff("frostbrand")
            then
              string = string .. snd.sep .. "cast direfrost " .. snd.target
            elseif snd.checkAff("frozen") and not snd.target_impaled then
              string = string .. snd.sep .. "cast icicle " .. snd.target
            else
              string = string .. snd.sep .. "cast firelash " .. snd.target .. " " .. targ
            end
          end
        elseif gmcp.Char.Vitals.resonance == "fire" then
          if not stalled then
            if snd.limb_dmg.torso == 0 and snd.parried_limb ~= "torso" then
              string = string .. snd.sep .. "fulcrum stall 3 firelash " .. snd.target .. " torso"
            else
              string = string .. snd.sep .. "fulcrum stall 3 firelash " .. snd.target .. " " .. targ
            end
          elseif stalled then
            if
              snd.checkAff("no_caloric") and
              not snd.checkAff("direfrost") and
              not snd.checkAff("frostbrand")
            then
              string = string .. snd.sep .. "cast direfrost " .. snd.target
            elseif snd.checkAff("frozen") and not snd.target_impaled then
              string = string .. snd.sep .. "cast icicle " .. snd.target
            else
              string = string .. snd.sep .. "cast firelash " .. snd.target .. " " .. targ
            end
          end
        elseif gmcp.Char.Vitals.resonance == "air" then
          if not stalled then
            if snd.limb_dmg.torso == 0 and snd.parried_limb ~= "torso" then
              string = string .. snd.sep .. "fulcrum stall 3 firelash " .. snd.target .. " torso"
            else
              string = string .. snd.sep .. "fulcrum stall 3 firelash " .. snd.target .. " " .. targ
            end
          elseif stalled then
            --not snd.direfrost and not snd.checkAff("frostbrand") then
            if
              snd.checkAff("no_caloric") and
              not snd.checkAff("direfrost") and
              not snd.checkAff("frostbrand")
            then
              string = string .. snd.sep .. "cast direfrost " .. snd.target
            elseif snd.checkAff("frozen") and not snd.target_impaled then
              string = string .. snd.sep .. "cast icicle " .. snd.target
            else
              string = string .. snd.sep .. "cast firelash " .. snd.target .. " " .. targ
            end
          end
        end
      end
      if string ~= snd.last_attack and not snd.waiting.queue then
        snd.last_attack = string
        snd.attack(snd.last_attack)
        snd.waiting.queue = true
        tempTimer(snd.delay(), [[snd.waiting.queue = false]])
      end
    end
  end

  snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^solo$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>affs</name>
									<script>if snd.class == "Ascendril" then
snd.starting_attack()
function snd.attack_function()
	if not snd.waiting.queue then
		local string = "" -- we'll load this with our attack string
		local call = "" -- and this with our affliction call
		-- next, the afflictions we want to give
		local touse = {}
		local tohit = {}
		-- and in case we don't find enough of them
		local total_aff_count = 0
    for aff in pairs(snd.all_affs) do
        if table.contains(snd.target_has, snd.all_affs[aff]) then
            total_aff_count = total_aff_count + 1
        end
    end
		local extraaff = ""
		
			snd.giving = {
			"clumsiness",
			"paresis",
			"haemophilia",
			"asthma",
			"slickness",
			"anorexia",
			"stupidity",
			}
			
	for i in pairs(snd.giving) do
		-- make sure not to double up paresis and paralysis
		if not snd.checkAff(snd.giving[i]) then
			-- and don't add an aff we've already got in the list!
			if not table.contains(touse, snd.giving[i]) then
				table.insert(touse, snd.giving[i])
			end
		end
	end
	-- now let's convert affs to venoms/empowerments
	for aff in pairs(touse) do
		table.insert(tohit, snd.effects[touse[aff]])
	end
	-- if we didn't find enough stuff to hit with, stick in our filler
	while #tohit &lt; 3 do
		table.insert(tohit, extraaff)
	end
			
	if snd.glimpse == "none" and not snd.checkAff("thunderbrand") and not snd.glimpsing then
		string = "fulcrum glimpse air"
	elseif snd.glimpse == "none" and snd.checkAff("thunderbrand") then
		string = "fulcrum catalyst "..snd.target.." air"
	end

	if snd.checkAff("stormtouched") then
		string = string..snd.sep.."cast lightning "..snd.target
	elseif snd.glimpse == "water" or snd.glimpse == "fire" or snd.glimpse == "air" then
	
		if snd.checkAff("vertigo") then
			string = "fulcrum flare"
		end
		
		if gmcp.Char.Vitals.resonance == "" or gmcp.Char.Vitals.resonance == "none" or gmcp.Char.Vitals.resonance == "fire" then
			string = "fulcrum enrich air"
		end

		if gmcp.Char.Vitals.resonance == "water" then
			if snd.defenses.def_stalled.state ~= "deffed" then
				string = string..snd.sep.."fulcrum stall 3 pressurize "..snd.target
			elseif snd.defenses.def_stalled.state == "deffed" then
				if snd.used.shield then
					string = string..snd.sep.."cast windlance "..snd.target
				else
					if snd.checksomeAffs({"dizziness", "stupidity"},2) then
						string = string..snd.sep.."cast frostblade "..snd.target.." "..tohit[1]
					else
						string = string..snd.sep.."cast lightning "..snd.target
					end
				end
			end

		elseif gmcp.Char.Vitals.resonance == "air" then
			if snd.defenses.def_stalled.state ~= "deffed" then
				if snd.checksomeAffs({"dizziness", "stupidity"},2) and not snd.proned then
					string = string..snd.sep.."fulcrum stall 3 frostblade "..snd.target.." "..tohit[2]
				else
					string = string..snd.sep.."fulcrum stall 3 thunder "..snd.target
				end
			elseif snd.defenses.def_stalled.state == "deffed" then
				if snd.used.shield then
					string = string..snd.sep.."cast windlance "..snd.target
				elseif snd.proned then
					if snd.checksomeAffs({"lethargy", "confusion"},2) then
						string = string..snd.sep.."cast frostblade "..snd.target.." "..tohit[1]
					else
						string = string..snd.sep.."cast hailstorm "..snd.target
					end
				elseif not snd.proned then
					if snd.checksomeAffs({"masochism", "stupidity"},2) then
						string = string..snd.sep.."cast frostblade "..snd.target.." "..tohit[1]
					else
						string = string..snd.sep.."cast coldsnap "..snd.target
					end
				end
			end
		end

end

	if string ~= snd.last_attack and not snd.waiting.queue then
		snd.last_attack = string
		snd.attack(snd.last_attack)
		snd.waiting.queue = true
		tempTimer(snd.delay(), [[snd.waiting.queue = false]])
	end
end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^affs$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>ablaze</name>
									<script>if snd.class == "Ascendril" then
snd.starting_attack()
function snd.attack_function()
	if not snd.waiting.queue then
		local string = "" -- we'll load this with our attack string
		local call = "" -- and this with our affliction call
		local limbs = {"head", "left leg", "torso", "right leg", "left arm", "right arm"}
		local targ = "nothing"
		
		for limb in pairs(limbs) do
			-- ignore last parried, last hit, and any limbs being resto'd
			if limbs[limb] ~= snd.parried_limb and limbs[limb] ~= snd.last_hit_limb and limbs[limb] ~= snd.resto_limb then
				if targ == "nothing" then
					targ = limbs[limb]
				end
			end
		end
			
	if snd.used.shield then
		string = string..snd.sep.."cast windlance "..snd.target
	end
			
	if snd.glimpse == "none" and not snd.glimpsing then
		string = "fulcrum glimpse fire"
	end

	if snd.glimpse == "water" or snd.glimpse == "fire" or snd.glimpse == "air" then
	
		if gmcp.Char.Vitals.ability_bal == "1" then
			string = "fulcrum flare "..snd.target
		end
		
		if gmcp.Char.Vitals.resonance ~= "fire" then
			string = string..snd.sep.."fulcrum enrich fire"
		end
		
		if gmcp.Char.Vitals.resonance == "fire" then
			if snd.defenses.def_stalled.state ~= "deffed" then
				string = string..snd.sep.."fulcrum stall 3 firelash "..snd.target.." "..targ
			else
				string = string..snd.sep.."cast firelash "..snd.target.." "..targ
			end
		end

	end

	if string ~= snd.last_attack and not snd.waiting.queue then
		snd.last_attack = string
		snd.attack(snd.last_attack)
		snd.waiting.queue = true
		tempTimer(snd.delay(), [[snd.waiting.queue = false]])
	end
	
end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^fire$</regex>
								</Alias>
							</AliasGroup>
						</AliasGroup>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Luminary</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Wielding</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>wield bashing</name>
									<script>if snd.class == "Luminary" then
snd.send("quickwield both mace tower")
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^wbsh$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>wield pvp</name>
									<script>if snd.class == "Luminary" then
snd.send("quickwield both mace buckler")
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^wpvp$</regex>
								</Alias>
							</AliasGroup>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Spirituality</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>beckon</name>
									<script>if snd.class == "Luminary" then
if matches[2] == "" then
 snd.send("qeb angel beckon "..snd.target)
elseif matches[2] == "all" then
 snd.send("qeb angel beckon")
else
 snd.send("qeb angel beckon "..matches[2])
end
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^bk(.*)$</regex>
								</Alias>
							</AliasGroup>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Devotion</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>force stop</name>
									<script>if snd.class == "Luminary" then
 snd.toggles.attacking = false
 if matches[2] == "" then
  snd.send("qeb perform force "..snd.target.." stop")
 else
  snd.send("qeb perform force "..matches[2].." stop")
 end
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^fs(.*)$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>resurrection</name>
									<script>if snd.class == "Luminary" then
snd.toggles.attacking = false
snd.send("qeb perform resurrection "..matches[2])
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^rez (\w+)$</regex>
								</Alias>
							</AliasGroup>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Affliction Offenses</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>mouse mode</name>
									<script>if snd.class == "Luminary" then
snd.giving_shield = {
"sight",
"paresis",
"weariness",
"asthma",
}
snd.giving_battle = {
"impatience",
"sensitivity",
"stupidity",
"vertigo",
"self-pity",
"migraine",
}
snd.giving_chasten = {
"loneliness",
"hypochondria",
"stupidity",
"lethargy",
"dementia",
"recklessness",
"masochism",
"paranoia"
}
snd.starting_attack()
function snd.attack_function()
 local string = ""
 local shield = "none"
 local battle = "none"
 local chasten = "none"
 if snd.mana_percent &lt; 40 and not snd.used.shield then
  string = "angel absolve "..snd.target
 elseif snd.proned() then
  string = "shield overwhelm "..snd.target
 elseif table.contains(snd.target_has, "sight") then
  string = "evoke transfixion "..snd.target
 else
  if snd.balance.battle then
   for i in pairs(snd.giving_battle) do
	  if not snd.checkAff(snd.giving_battle[i]) and battle == "none" then
	   battle = snd.giving_battle[i]
	  end
	 end
  end
  if snd.used.shield then
   shield = "shield raze"
  else
   for i in pairs(snd.giving_shield) do
    if not snd.checkAff(snd.giving_shield[i]) and shield == "none" then
	   shield = snd.spirituality_attacks[snd.giving_shield[i]]
	  end
   end
  end
  if shield == "none" then
   shield = "shield strike"
  end
  if snd.used.rebounding and shield ~= "facesmash" then
   shield = "shield raze"
  end
  for i in pairs(snd.giving_chasten) do
   if not snd.checkAff(snd.giving_chasten[i]) and chasten == "none" and snd.giving_chasten[i] ~= battle then
	  chasten = snd.giving_chasten[i]
	 end
  end
  if battle ~= "none" then
   if snd.toggles.affcalling and not snd.target_gone then
	  string = "wt Battle "..snd.target..": "..battle..snd.sep
	 end
   string = string.."angel battle "..battle.." "..snd.target..snd.sep
  end
  string = string..shield.." "..snd.target..snd.sep
  if shield ~= "slam" and shield ~= "overwhelm" then
   if chasten == "none" then
    string = string.."chasten "..snd.target
   else
	  if snd.toggles.affcalling and not snd.target_gone then
	   string = string.."wt Chasten "..snd.target..": "..chasten..snd.sep
	  end
    string = string.."chasten "..snd.target.." "..chasten
	 end
  end
 end
 if string.find(string, "overwhelm") then
  string = "quickwield right tower"..snd.sep..string
 else
  string = "quickwield right buckler "..snd.sep..string
 end
 string = "contemplate "..snd.target..snd.sep..string
 if string ~= snd.last_attack and not snd.waiting.queue then
  snd.last_attack = string
  snd.attack(snd.last_attack)
  snd.waiting.queue = true
  tempTimer(snd.delay(), [[snd.waiting.queue = false]])
 end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^ms$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>Group Affs - Used to lock someone in place</name>
									<script>-- The purpose of this is to lock someone down with disrupt so they cannot use lock-breakers to escape.
if snd.class == "Luminary" then
  snd.giving_shield = {"sight", "confusion", "weariness", "transfixed", "paresis", "asthma"}
  snd.giving_battle = {"impatience", "stupidity", "sensitivity", "self_pity", "vertigo"}
  snd.giving_chasten =
    {
      "hypochondria",
      "stupidity",
      "recklessness",
      "lethargy",
      "masochism",
      "dementia",
      "paranoia",
      "anorexia",
    }
  snd.starting_attack()

  function snd.attack_function()
    local total_aff_count = 0
    for aff in pairs(snd.all_affs) do
      if table.contains(snd.target_has, snd.all_affs[aff]) then
        total_aff_count = total_aff_count + 1
      end
    end
    local mental_aff_count = 0
    for aff in pairs(snd.mental_affs) do
      if table.contains(snd.target_has, snd.mental_affs[aff]) then
        mental_aff_count = mental_aff_count + 1
      end
    end
    local string = ""
    local shield = "none"
    local battle = "none"
    local chasten = "none"
    --Absolve check
    if snd.mana_percent &lt; 40 and not snd.used.shield then
      string = "angel absolve " .. snd.target
    else
      --battle aff pick
      if snd.balance.battle then
        for i in pairs(snd.giving_battle) do
          if not snd.checkAff(snd.giving_battle[i]) and battle == "none" then
            battle = snd.giving_battle[i]
          end
        end
      end
      --If they have shield we can do nothing
      if snd.used.shield then
        shield = "shield raze"
        --If they are prone/psuedo prone and have 5 affs, smack them
      elseif total_aff_count &gt;= 5 and snd.proned() then
        shield = "shield overwhelm " .. snd.target
        --We need to build up disrupt/affs.
      else
        for i in pairs(snd.giving_shield) do
          if not snd.checkAff(snd.giving_shield[i]) and shield == "none" then
            shield = snd.spirituality_attacks[snd.giving_shield[i]]
          end
        end
        --If they have 2 mental affs and confusion is one of them, disrupt ASAP to lock them in place.
        if
          mental_aff_count &gt;= 2 and
          snd.checkAff("confusion") and
          not snd.checkAff("disrupted") and
          total_aff_count &lt; 7
        then
          shield = "shield crash"
        end
      end
      --Dazzle can hit through rebounding, check if they have confusion first.
      if snd.used.rebounding then
        if snd.checkAff("confusion") then
          shield = "shield raze"
        else
          shield = "perform dazzle"
        end
      end
      --Chasten aff pick
      for i in pairs(snd.giving_chasten) do
        if
          not snd.checkAff(snd.giving_chasten[i]) and
          chasten == "none" and
          snd.giving_chasten[i] ~= battle
        then
          chasten = snd.giving_chasten[i]
        end
      end
      --Start building our attack - battle first
      if battle ~= "none" then
        if snd.toggles.affcalling and not snd.target_gone then
          string = "wt Battle " .. snd.target .. ": " .. battle .. snd.sep
        end
        string = string .. "angel battle " .. battle .. " " .. snd.target .. snd.sep
      end
      --Add shield/evoke/perform attacks
      string = string .. shield .. " " .. snd.target .. snd.sep
      --Add chasten choice
      if shield ~= "slam" then
        if chasten == "none" then
          string = string .. "chasten " .. snd.target
        else
          if snd.toggles.affcalling and not snd.target_gone then
            string = string .. "wt Chasten " .. snd.target .. ": " .. chasten .. snd.sep
          end
          string = string .. "chasten " .. snd.target .. " " .. chasten
        end
      end
    end
    --Are we gonna smack them with overwhelm? Let's make it hurt.
    if string.find(string, "overwhelm") then
      string = "quickwield right tower" .. snd.sep .. string
    else
      string = "quickwield right buckler" .. snd.sep .. string
    end
    --We have an instakill at 40% mana, let's make sure we keep track of mana.
    string = "contemplate " .. snd.target .. snd.sep .. string
    if string ~= snd.last_attack and not snd.waiting.queue then
      snd.last_attack = string
      snd.attack(snd.last_attack)
      snd.waiting.queue = true
      tempTimer(snd.delay(), [[snd.waiting.queue = false]])
    end
  end

  snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^affaf$</regex>
								</Alias>
							</AliasGroup>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Damage Offenses</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>mana drain</name>
									<script>if snd.class == "Luminary" then
  snd.giving_battle = {"stupidity", "vertigo", "self-pity", "migraine", "sensitivity", "impatience"}
  snd.giving_chasten =
    {
      "lethargy",
      "loneliness",
      "stupidity",
      "hypochondria",
      "dementia",
      "recklessness",
      "masochism",
      "paranoia",
    }
  snd.starting_attack()

  function snd.attack_function()
    local string = ""
    local battle = "none"
    local chasten = "none"
    if snd.mana_percent &lt; 40 and not snd.used.shield then
      string = "angel absolve " .. snd.target
    elseif snd.mana_percent &lt; 40 and snd.used.shield then
      for i in pairs(snd.giving_chasten) do
        if
          not snd.checkAff(snd.giving_chasten[i]) and
          chasten == "none" and
          snd.giving_chasten[i] ~= battle
        then
          chasten = snd.giving_chasten[i]
        end
      end
      string = "shield raze " .. snd.target .. snd.sep
      if snd.toggles.affcalling and not snd.target_gone then
        string = string .. "wt Chasten " .. snd.target .. ": " .. chasten .. snd.sep
      end
      string = string .. "chasten " .. snd.target .. " " .. chasten
    else
      string = "angel sap " .. snd.target
    end
    if snd.balance.battle then
      for i in pairs(snd.giving_battle) do
        if not snd.checkAff(snd.giving_battle[i]) and battle == "none" then
          battle = snd.giving_battle[i]
        end
      end
    end
    string = "angel battle " .. battle .. " " .. snd.target .. snd.sep .. string
    if snd.toggles.affcalling and not snd.target_gone then
      string = "wt Battle " .. snd.target .. ": " .. battle .. snd.sep .. string
    end
    string = "contemplate " .. snd.target .. snd.sep .. string
    if string ~= snd.last_attack and not snd.waiting.queue then
      snd.last_attack = string
      snd.attack(snd.last_attack)
      snd.waiting.queue = true
      tempTimer(snd.delay(), [[snd.waiting.queue = false]])
    end
  end

  snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^mana$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>Group Damage - Best used with an impale</name>
									<script>--This is for quick kills with sensitivity/transfix/impale/overwhelm/disembowel.
--May have tougher time on hardier opponents.
--May vary in usefulness depending on damage output.
if snd.class == "Luminary" then
  snd.giving_shield = {"paresis", "weariness", "sight", "asthma"}
  snd.giving_battle = {"impatience", "sensitivity", "self_pity", "stupidity", "vertigo"}
  snd.giving_chasten =
    {
      "hypochondria",
      "loneliness",
      "recklessness",
      "stupidity",
      "lethargy",
      "masochism",
      "dementia",
      "paranoia",
      "anorexia",
    }
  snd.starting_attack()

  function snd.attack_function()
    local total_aff_count = 0
    for aff in pairs(snd.all_affs) do
      if table.contains(snd.target_has, snd.all_affs[aff]) then
        total_aff_count = total_aff_count + 1
      end
    end
    local string = ""
    local shield = "none"
    local battle = "none"
    local chasten = "none"
    --Absolve check
    if snd.mana_percent &lt; 40 and not snd.used.shield then
      string = "angel absolve " .. snd.target
      --They've hit our aff count limit, let's lock them down/kill them.
    elseif total_aff_count &gt;= 4 and snd.checkAff("sight") and not snd.used.shield then
      if not snd.checkAff("transfixed") then
        string = "evoke transfixion " .. snd.target
      else
        string = "shield overwhelm " .. snd.target
        if snd.checkAff("hearing") and not snd.checkAff("sensitivity") then
          string = "angel battle " .. snd.target .. " sensitivity" .. snd.sep .. string
        end
      end
      --Need to pile a few affs on still. Aiming for at least 4 before overwhelm so by the time
      --we get to overwhelm, they're in the overwhelm aff/damage scaling range.	
    else
      if snd.balance.battle then
        for i in pairs(snd.giving_battle) do
          if not snd.checkAff(snd.giving_battle[i]) and battle == "none" then
            battle = snd.giving_battle[i]
          end
        end
      end
      if snd.used.shield then
        shield = "shield raze"
      else
        for i in pairs(snd.giving_shield) do
          if not snd.checkAff(snd.giving_shield[i]) and shield == "none" then
            shield = snd.spirituality_attacks[snd.giving_shield[i]]
          end
        end
      end
      if shield == "none" then
        shield = "shield strike"
      end
      if snd.used.rebounding and shield ~= "facesmash" then
        shield = "shield raze"
      end
      --Chasten aff pick
      for i in pairs(snd.giving_chasten) do
        if
          not snd.checkAff(snd.giving_chasten[i]) and
          chasten == "none" and
          snd.giving_chasten[i] ~= battle
        then
          chasten = snd.giving_chasten[i]
        end
      end
      --Start building our attack - battle first
      if battle ~= "none" then
        if snd.toggles.affcalling and not snd.target_gone then
          string = "wt Battle " .. snd.target .. ": " .. battle .. snd.sep
        end
        string = string .. "angel battle " .. battle .. " " .. snd.target .. snd.sep
      end
      --Add shield/evoke/perform attacks
      string = string .. shield .. " " .. snd.target .. snd.sep
      --Add chasten choice
      if shield ~= "slam" then
        if chasten == "none" then
          string = string .. "chasten " .. snd.target
        else
          if snd.toggles.affcalling and not snd.target_gone then
            string = string .. "wt Chasten " .. snd.target .. ": " .. chasten .. snd.sep
          end
          string = string .. "chasten " .. snd.target .. " " .. chasten
        end
      end
    end
    --Are we gonna smack them with overwhelm? Let's make it hurt.
    if string.find(string, "overwhelm") then
      string = "quickwield right tower" .. snd.sep .. string
    else
      string = "quickwield right buckler" .. snd.sep .. string
    end
    --We have an instakill at 40% mana, let's make sure we keep track of mana.
    string = "contemplate " .. snd.target .. snd.sep .. string
    if string ~= snd.last_attack and not snd.waiting.queue then
      snd.last_attack = string
      snd.attack(snd.last_attack)
      snd.waiting.queue = true
      tempTimer(snd.delay(), [[snd.waiting.queue = false]])
    end
  end

  snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^dmg$</regex>
								</Alias>
							</AliasGroup>
						</AliasGroup>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Sentinel</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Affliction Offenses</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>mouse mode</name>
									<script>if snd.class == "Sentinel" then
snd.giving = {
"sight",
"paresis",
"clumsiness",
"asthma",
"sensitivity",
"vomiting",
"allergies",
"haemophilia",
"slickness",
--"anorexia",
--"stupidity",
--"recklessness",
--"weariness",
--"dizziness",
--"voyria",
}
snd.starting_attack()
function snd.attack_function()
 if not snd.waiting.queue then
  call = ""
  left = "none"
  right = "none"
  for i in pairs(snd.giving) do
   if not table.contains(snd.target_has, snd.giving[i]) then
	 if snd.giving[i] ~= "paresis" or not table.contains(snd.target_has, "paralysis") then
     if right == "none" then
      right = snd.effects[snd.giving[i]]
     elseif left == "none" then
      left = snd.effects[snd.giving[i]]
		end
    end
   end
  end
  if left == "none" then
   left = "epseth"
  end
  if right == "none" then
   right = "epseth"
  end
  if snd.used.rebounding and snd.used.shield then
   string = "dhuriv dualraze "..snd.target
  elseif snd.used.shield or snd.used.rebounding then
	 string = "dhuriv combo "..snd.target.." reave stab "..right
	if snd.toggles.affcalling and not snd.target_gone then
	 call = "wt Afflicting "..snd.target..": "..right..snd.sep
	end
  else
   string = "dhuriv combo "..snd.target.." slash stab "..left.." "..right
	if snd.toggles.affcalling and not snd.target_gone then
	 call = "wt Afflicting "..snd.target..": "..left..", "..right..snd.sep
	end
  end
	string = call..string
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^ms$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>Venom Lock</name>
									<script>if snd.class == "Sentinel" then
snd.current_offense = "SentVLock"

local second_attack = ""

snd.starting_attack()
function snd.attack_function()

		if not snd.waiting.queue then
		if snd.target_locked() then
			snd.giving = {
			"impairment",
			"stupidity",
			"confusion",
			"a broken left leg",
			"a broken right leg",
			"weariness",
			"dizziness",
			"hearing",
			"sensitivity",}
		else
			snd.giving = {
			"paresis",
		--"clumsiness",
		  "impatience",
		--"lethargy",
			"asthma",
			"slickness",
			"stupidity",
		--"anorexia",
			"confusion",
			"a broken left leg",
			"a broken right leg",
			"stupidity",
			"vomiting",
			"dizziness",
			"sight",
			"hearing",
			"sensitivity",}
		end

	call = ""
	left = "none"
	right = "none"

	 left, right = Sentinel_Attack_Choice(snd.giving, left, right) -- we send our aff list to a function to get our attacks.

		if left  == "none" then left  = "epseth" end
		if right == "none" then right = "epseth" end
	
		if snd.checksomeAffs({"paralysis", "paresis"},1) or left == "paresis" then 
			second_attack = "thrust"
		else
			second_attack = "stab"
		end

		if snd.used.rebounding and snd.used.shield then
			string = "dhuriv dualraze "..snd.target
			
		elseif left == "destroyed_throat" then
			string = "dhuriv throatcrush "..snd.target
			
		elseif snd.dhuriv_attacks[left] == "daunt" or snd.dhuriv_attacks[left] == "icewyrm" then
			left = snd.daunt_animals[left]
			string = left..snd.target..snd.sep.."dhuriv flourish "..snd.target.." "..snd.effects[right]
			
		else
			if table.contains(snd.dhuriv_affs, left) then
				if not table.contains(snd.effects, right) then
					string = snd.dhuriv_attacks[left].." "..snd.dhuriv_attacks[right]
				else
					string = snd.dhuriv_attacks[left].." "..second_attack.." "..snd.effects[right]
				end
			elseif table.contains(snd.dhuriv_affs, right) then
				string = "slash "..snd.dhuriv_attacks[right].." "..snd.effects[left]
			else
				string = "slash "..second_attack.." "..snd.effects[left].." "..snd.effects[right]
			end
			
			string = "dhuriv combo "..snd.target.." "..string
		end
		
		if snd.toggles.affcalling and not snd.target_gone then
			if table.contains(snd.effects, left) then 
				call = "wt Afflicting "..snd.target..": "..snd.effects[left]
				if table.contains(snd.effects, right) then 
					call = call..", "..snd.effects[right]
				end
				call = call..snd.sep
			elseif table.contains(snd.effects, right) then 
				call = "wt Afflicting "..snd.target..": "..snd.effects[right]..snd.sep
			end
		end

		if snd.checksomeAffs({"confusion", "a broken left leg", "a broken right leg", "prone"}, 4) then
			string = "dhuriv spinecut "..snd.target
		end
		
		if string:find("impale") or string:find("gorge") or string:find("throatcrush") or string:find("dualraze") or string:find("spinecut") then
			call = ""
		end

		string = call..string
		if string ~= snd.last_attack and not snd.waiting.queue then
			snd.last_attack = string
			snd.attack(snd.last_attack)
			snd.waiting.queue = true
			tempTimer(snd.delay(), [[snd.waiting.queue = false]])
		end
	end
end

	snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^aff$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>Transfix + Sensitivity</name>
									<script>if snd.class == "Sentinel" then
snd.giving = {

"sight",
"hearing",
"sensitivity",
"vomiting",
"paresis",
"asthma",
"impatience",
"slickness",
"confusion",
"a broken left leg",
"a broken right leg",
"anorexia",
"stupidity",
"dizziness",
"heartflutter",
"shyness",
}


local second_attack = ""

snd.starting_attack()
function snd.attack_function()

		if not snd.waiting.queue then

	call = ""
	left = "none"
	right = "none"

	 left, right = Sentinel_Attack_Choice(snd.giving, left, right) -- we send our aff list to a function to get our attacks.

		if left  == "none" then left  = "epseth" end
		if right == "none" then right = "epseth" end
	
		if snd.checksomeAffs({"paralysis", "paresis"},1) or left == "paresis" then 
			second_attack = "thrust"
		else
			second_attack = "stab"
		end

		if snd.used.rebounding and snd.used.shield then
			string = "dhuriv dualraze "..snd.target
			
		elseif left == "destroyed_throat" then
			string = "dhuriv throatcrush "..snd.target
			
		elseif snd.dhuriv_attacks[left] == "daunt" or snd.dhuriv_attacks[left] == "icewyrm" then
			left = snd.daunt_animals[left]
			string = left..snd.target..snd.sep.."dhuriv flourish "..snd.target.." "..snd.effects[right]
			
		else

			if table.contains(snd.dhuriv_affs, left) then
				if not table.contains(snd.effects, right) then
					string = "dhuriv combo "..snd.target.." "..snd.dhuriv_attacks[left].." "..snd.dhuriv_attacks[right]
				else
					string = "dhuriv combo "..snd.target.." "..snd.dhuriv_attacks[left].." "..second_attack.." "..snd.effects[right]
				end
			elseif table.contains(snd.dhuriv_affs, right) then
				string = "dhuriv combo "..snd.target.." slash "..snd.dhuriv_attacks[right].." "..snd.effects[left]
			else
				string = "dhuriv combo "..snd.target.." slash "..second_attack.." "..snd.effects[left].." "..snd.effects[right]
			end
		end

		
		if snd.toggles.affcalling and not snd.target_gone then
			if table.contains(snd.effects, left) then 
				call = "wt Afflicting "..snd.target..": "..snd.effects[left]
				if table.contains(snd.effects, right) then 
					call = call..", "..snd.effects[right]
				end
				call = call..snd.sep
			elseif table.contains(snd.effects, right) then 
				call = "wt Afflicting "..snd.target..": "..snd.effects[right]..snd.sep
			end
		end

		if  snd.checksomeAffs({"confusion", "a broken left leg", "a broken right leg", "prone"}, 4) then
			string = "dhuriv spinecut "..snd.target
		end

		if string:find("impale") or string:find("gorge") or string:find("throatcrush") or string:find("dualraze") or string:find("spinecut") then
			call = ""
		end

		string = call..string
		if string ~= snd.last_attack and not snd.waiting.queue then
			snd.last_attack = string
			snd.attack(snd.last_attack)
			snd.waiting.queue = true
			tempTimer(snd.delay(), [[snd.waiting.queue = false]])
		end
	end
end

	snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^lumi$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>Mentals</name>
									<script>if snd.class == "Sentinel" then
snd.current_offense = "SentMental"
local second_attack = ""

snd.starting_attack()
function snd.attack_function()

	if not snd.waiting.queue then

snd.giving = {

"impatience",
"stupidity",
"agoraphobia",
"claustrophobia",
"weariness",
"clumsiness",
"asthma",
"slickness",
"confusion",
"a broken left leg",
"a broken right leg",
"anorexia",
"sight",
"hearing",
"sensitivity",
}

	call = ""
	left = "none"
	right = "none"

	 left, right = Sentinel_Attack_Choice(snd.giving, left, right) -- we send our aff list to a function to get our attacks.

		if left  == "none" then left  = "epseth" end
		if right == "none" then right = "epseth" end
	
		if snd.checksomeAffs({"paralysis", "paresis"},1) or left == "paresis" then 
			second_attack = "thrust"
		else
			second_attack = "stab"
		end

		if snd.used.rebounding and snd.used.shield then
			string = "dhuriv dualraze "..snd.target
			
		elseif left == "destroyed_throat" then
			string = "dhuriv throatcrush "..snd.target
			
		elseif snd.dhuriv_attacks[left] == "daunt" or snd.dhuriv_attacks[left] == "icewyrm" then
			left = snd.daunt_animals[left]
			string = left..snd.target..snd.sep.."dhuriv flourish "..snd.target.." "..snd.effects[right]
			
		else
			if table.contains(snd.dhuriv_affs, left) then
				if not table.contains(snd.effects, right) then
					string = "dhuriv combo "..snd.target.." "..snd.dhuriv_attacks[left].." "..snd.dhuriv_attacks[right]
				else
					string = "dhuriv combo "..snd.target.." "..snd.dhuriv_attacks[left].." "..second_attack.." "..snd.effects[right]
				end
			elseif table.contains(snd.dhuriv_affs, right) then
				string = "dhuriv combo "..snd.target.." slash "..snd.dhuriv_attacks[right].." "..snd.effects[left]
			else
				string = "dhuriv combo "..snd.target.." slash "..second_attack.." "..snd.effects[left].." "..snd.effects[right]
			end
		end

		
		if snd.toggles.affcalling and not snd.target_gone then
			if table.contains(snd.effects, left) then 
				call = "wt Afflicting "..snd.target..": "..snd.effects[left]
				if table.contains(snd.effects, right) then 
					call = call..", "..snd.effects[right]
				end
				call = call..snd.sep
			elseif table.contains(snd.effects, right) then 
				call = "wt Afflicting "..snd.target..": "..snd.effects[right]..snd.sep
			end
		end

		if  snd.checksomeAffs({"confusion", "a broken left leg", "a broken right leg", "prone"}, 4) then
			string = "dhuriv spinecut "..snd.target
		end
			
		if string:find("impale") or string:find("gorge") or string:find("throatcrush") or string:find("dualraze") or string:find("spinecut") then
			call = ""
		end

		string = call..string
		if string ~= snd.last_attack and not snd.waiting.queue then
			snd.last_attack = string
			snd.attack(snd.last_attack)
			snd.waiting.queue = true
			tempTimer(snd.delay(), [[snd.waiting.queue = false]])
		end
	end
end

	snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^ment$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>Salves</name>
									<script>if snd.class == "Sentinel" then -- Requires Raloth and Icewyrm
snd.current_offense = "SentSalve"
snd.giving = {

"frozen",
"a broken left leg",
"a broken right leg",
"a broken left arm",
"a broken right arm",
"anorexia",
"slickness",
"asthma",
"paresis",
"impatience",
"confusion",
"anorexia",
"stupidity",
"vomiting",
"dizziness",
"sight",
"hearing",
"sensitivity",
}

local second_attack = ""

snd.starting_attack()
function snd.attack_function()

	if not snd.waiting.queue then

	call = ""
	left = "none"
	right = "none"

	 left, right = Sentinel_Attack_Choice(snd.giving, left, right) -- we send our aff list to a function to get our attacks.

		if left  == "none" then left  = "epseth" end
		if right == "none" then right = "epseth" end
	
		if snd.checksomeAffs({"paralysis", "paresis"},1) or left == "paresis" then 
			second_attack = "thrust"
		else
			second_attack = "stab"
		end

		if snd.used.rebounding and snd.used.shield then
			string = "dhuriv dualraze "..snd.target
			
		elseif left == "destroyed_throat" then
			string = "dhuriv throatcrush "..snd.target
			
		elseif snd.dhuriv_attacks[left] == "daunt" or snd.dhuriv_attacks[left] == "icewyrm" then
			left = snd.daunt_animals[left]
			string = left..snd.target..snd.sep.."dhuriv flourish "..snd.target.." "..snd.effects[right]
			
		elseif snd.target_prone then
			string = "qdmount"..snd.sep.."qmount "..snd.my_raloth..snd.sep.."order "..snd.my_raloth.." trample "..snd.target

		else

			if table.contains(snd.dhuriv_affs, left) then
				if not table.contains(snd.effects, right) then
					string = "dhuriv combo "..snd.target.." "..snd.dhuriv_attacks[left].." "..snd.dhuriv_attacks[right]
				else
					string = "dhuriv combo "..snd.target.." "..snd.dhuriv_attacks[left].." "..second_attack.." "..snd.effects[right]
				end
			elseif table.contains(snd.dhuriv_affs, right) then
				string = "dhuriv combo "..snd.target.." slash "..snd.dhuriv_attacks[right].." "..snd.effects[left]
			else
				string = "dhuriv combo "..snd.target.." slash "..second_attack.." "..snd.effects[left].." "..snd.effects[right]
			end
		end

		if snd.toggles.affcalling and not snd.target_gone then
			if table.contains(snd.effects, left) then 
				call = "wt Afflicting "..snd.target..": "..snd.effects[left]
				if table.contains(snd.effects, right) then 
					call = call..", "..snd.effects[right]
				end
				call = call..snd.sep
			elseif table.contains(snd.effects, right) then 
				call = "wt Afflicting "..snd.target..": "..snd.effects[right]..snd.sep
			end
		end
		
		if  snd.checksomeAffs({"confusion", "a broken left leg", "a broken right leg", "prone"}, 4) then
			string = "dhuriv spinecut "..snd.target
		end
		
		if string:find("impale") or string:find("gorge") or string:find("throatcrush") or string:find("dualraze") or string:find("spinecut") then
			call = ""
		end

		string = call..string
		if string ~= snd.last_attack and not snd.waiting.queue then
			snd.last_attack = string
			snd.attack(snd.last_attack)
			snd.waiting.queue = true
			tempTimer(snd.delay(), [[snd.waiting.queue = false]])
		end
	end
end

	snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^salve$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>Group Impale/Frozen</name>
									<script>if snd.class == "Sentinel" then -- Requires Raloth and Icewyrm
snd.current_offense = "SentImpale"
snd.giving = {

"frozen",
"a broken left leg",
"a broken right leg",
"a broken left arm",
"a broken right arm",
"anorexia",
"slickness",
"asthma",
"paresis",
"impatience",
"confusion",
"anorexia",
"stupidity",
"vomiting",
"dizziness",
"sight",
"hearing",
"sensitivity",
}

local second_attack = ""

snd.starting_attack()
function snd.attack_function()

	if not snd.waiting.queue then

	call = ""
	left = "none"
	right = "none"

	left, right = Sentinel_Attack_Choice(snd.giving, left, right) -- we send our aff list to a function to get our attacks.

		if left  == "none" then left  = "epseth" end
		if right == "none" then right = "epseth" end
	
		if snd.checksomeAffs({"paralysis", "paresis"},1) or left == "paresis" then 
			second_attack = "thrust"
		else
			second_attack = "stab"
		end

		if snd.used.rebounding and snd.used.shield then
			string = "dhuriv dualraze "..snd.target
			
		elseif left == "destroyed_throat" then
			string = "dhuriv throatcrush "..snd.target
			
		elseif snd.target_impaled then
			string = "dhuriv gorge "..snd.target
			
		elseif snd.proned() then         
      if not snd.checkAff("impaled") then
      	string = "dhuriv impale "..snd.target
       else
        string = "qdmount"..snd.sep.."qmount "..snd.my_raloth..snd.sep.."order "..snd.my_raloth.." trample "..snd.target
      end	
			
		elseif snd.dhuriv_attacks[left] == "daunt" or snd.dhuriv_attacks[left] == "icewyrm" then
			left = snd.daunt_animals[left]
			string = left..snd.target..snd.sep.."dhuriv flourish "..snd.target.." "..snd.effects[right]
						
		else

			if table.contains(snd.dhuriv_affs, left) then
				if not table.contains(snd.effects, right) then
					string = "dhuriv combo "..snd.target.." "..snd.dhuriv_attacks[left].." "..snd.dhuriv_attacks[right]
				else
					string = "dhuriv combo "..snd.target.." "..snd.dhuriv_attacks[left].." "..second_attack.." "..snd.effects[right]
				end
			elseif table.contains(snd.dhuriv_affs, right) then
				string = "dhuriv combo "..snd.target.." slash "..snd.dhuriv_attacks[right].." "..snd.effects[left]
			else
				string = "dhuriv combo "..snd.target.." slash "..second_attack.." "..snd.effects[left].." "..snd.effects[right]
			end
		end
		
		if snd.toggles.affcalling and not snd.target_gone then
			if table.contains(snd.effects, left) then 
				call = "wt Afflicting "..snd.target..": "..snd.effects[left]
				if table.contains(snd.effects, right) then 
					call = call..", "..snd.effects[right]
				end
				call = call..snd.sep
			elseif table.contains(snd.effects, right) then 
				call = "wt Afflicting "..snd.target..": "..snd.effects[right]..snd.sep
			end
		end

		if snd.checksomeAffs({"confusion", "a broken left leg", "a broken right leg", "prone"}, 4) then
			string = "dhuriv spinecut "..snd.target
		end
		
		if string:find("impale") or string:find("gorge") or string:find("throatcrush") or string:find("dualraze") or string:find("spinecut") then
			call = ""
		end

		string = call..string
		if string ~= snd.last_attack and not snd.waiting.queue then
			snd.last_attack = string
			snd.attack(snd.last_attack)
			snd.waiting.queue = true
			tempTimer(snd.delay(), [[snd.waiting.queue = false]])
		end
	end
end

	snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^gimp$</regex>
								</Alias>
							</AliasGroup>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Damage Offenses</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
							</AliasGroup>
						</AliasGroup>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Shaman</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Damage Offenses</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>mouse mode</name>
									<script>if snd.class == "Shaman" then
snd.giving = {
"sight",
"sensitivity",
"clumsiness",
"asthma",
"allergies",
"vomiting",
"haemophilia",
"slickness",
"stupidity",
"anorexia",
--"weariness",
--"recklessness",
--"dizziness",
--"voyria",
}
snd.starting_attack()
function snd.attack_function()
 if not snd.waiting.queue then
  venom = "none"
  for i in pairs(snd.giving) do
   if not table.contains(snd.target_has, snd.giving[i]) then
    if venom == "none" then
     venom = snd.effects[snd.giving[i]]
    end
   end
  end
	if venom == "none" then
	 venom = "epseth"
	end
  if snd.used.shield then
   string = "commune leafstorm "..snd.target
  elseif tonumber(gmcp.Char.Vitals.energy) then
   string = "commune boost"..snd.sep.."commune vinelash "..snd.target.." "..venom
  else
   string = "commune vinelash "..snd.target.." "..venom
  end
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^ms$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>Stormtouched</name>
									<script>if snd.class == "Shaman" then
snd.giving = {

"clumsiness",
"asthma",
"allergies",
"vomiting",
"haemophilia",
"slickness",
"stupidity",
"anorexia",
--"weariness",
--"recklessness",
--"dizziness",
--"voyria",
}
snd.starting_attack()
function snd.attack_function()

	call = ""
	
 if not snd.waiting.queue then
  venom = "none"
  for i in pairs(snd.giving) do
   if not table.contains(snd.target_has, snd.giving[i]) then
    if venom == "none" then
     venom = snd.effects[snd.giving[i]]
    end
   end
  end
	if venom == "none" then
	 venom = "epseth"
	end
  if snd.used.shield then
 	 string = "fetish attune "..snd.target..snd.sep.."commune leafstorm "..snd.target
  elseif snd.checkAff("stormtouched") then
 	 if tonumber(gmcp.Char.Vitals.energy) then
  	string = "fetish attune "..snd.target..snd.sep.."commune boost"..snd.sep.."commune lightning "..snd.target
 	 else
 	 	string = "fetish attune "..snd.target..snd.sep.."commune lightning "..snd.target
  	end
 	else
  	string = "fetish attune "..snd.target..snd.sep.."commune vinelash "..snd.target.." "..venom
  	call = "wt Vinelash "..snd.target..": "..venom..snd.sep
  	if tonumber(gmcp.Char.Vitals.energy) &gt;= 4 then
  		string = "commune boost "..snd.sep..string  
  	end
  end
	
	string = call..string
	
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^storm$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>Aff support</name>
									<script>if snd.class == "Shaman" then
snd.giving = {

"clumsiness",
"asthma",
"slickness",
"anorexia",
"stupidity",
"weariness",
"allergies",
"vomiting",
"haemophilia",
"sensitivity",
"recklessness",
"dizziness",
--"voyria",
}
snd.starting_attack()
function snd.attack_function()

	call = ""
--local boosting = false -- this is like templar vorpal
-- if tonumber(gmcp.Char.Vitals.energy) &gt;= 3 then boosting = true -- yesss
-- end
	
 if not snd.waiting.queue then
  venom = "none"
  for i in pairs(snd.giving) do
   if not table.contains(snd.target_has, snd.giving[i]) then
    if venom == "none" then
     venom = snd.effects[snd.giving[i]]
    end
   end
  end
	if venom == "none" then
	 venom = "epseth"
	end
  if snd.used.shield then
   string = "commune leafstorm "..snd.target
	elseif tonumber(gmcp.Char.Vitals.energy) &gt;= 3 then
		if not snd.checkAff("impatience") and not snd.checkAff("confusion") then
			string = "commune sporulation "..snd.target
		elseif not snd.checkAff("paresis") and not snd.checkAff("stupidity") then
			string = "commune overload "..snd.target
		else
			string = "commune vinelash "..snd.target.." "..venom
	 		call = "wt Vinelash "..snd.target..": "..venom..snd.sep
		end	
  else
   string = "commune vinelash "..snd.target.." "..venom
	 call = "wt Vinelash "..snd.target..": "..venom..snd.sep
  end
	
	string = call..string
	
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^supp$</regex>
								</Alias>
							</AliasGroup>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Naturalism Utility</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>Surge</name>
									<script>if snd.class == "Shaman" then
	if matches[2] == "" then
		snd.attack("nature surge "..snd.target)
	else
 		snd.attack("nature surge "..matches[2])
	end
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^ns (.*)$</regex>
								</Alias>
								<Alias isActive="no" isFolder="no">
									<name>Pull</name>
									<script>if snd.class == "Shaman" then
if matches[2] == "" then
 snd.attack("nature pull "..snd.target)
else
 snd.attack("nature pull "..matches[2])
end
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^np(.*)$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>Displacement</name>
									<script>if snd.class == "Shaman" then
if matches[2] == "" then
 snd.attack("nature displacement "..snd.target)
else
 snd.attack("nature displacement "..matches[2])
end
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^dp(.*)$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>Canopy</name>
									<script>if snd.class == "Shaman" then
 snd.attack("nature canopy")
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^can$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>Screen</name>
									<script>if snd.class == "Shaman" then
 snd.attack("nature screen")
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^scr$</regex>
								</Alias>
								<Alias isActive="no" isFolder="no">
									<name>Flow</name>
									<script>if snd.class == "Shaman" then
if matches[2] == "" then
 snd.attack("nature flow "..snd.target)
else
 snd.attack("nature flow "..matches[2])
end
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^fl(.*)$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>Thorncoat</name>
									<script>if snd.class == "Shaman" then
if matches[2] == "" then
 snd.attack("nature thorncoat me")
else
 snd.attack("nature thorncoat "..matches[2])
end
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^tco(.*)$</regex>
								</Alias>
							</AliasGroup>
						</AliasGroup>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Templar</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Wielding</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>wield bashing</name>
									<script>if snd.class == "Templar" then
snd.send("quickwield both longsword shield")
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^wbsh$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>wield zeal</name>
									<script>if snd.class == "Templar" then
snd.send("quickwield both warhammer")
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^wzl$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>wield pvp</name>
									<script>if snd.class == "Templar" then
	snd.send("quickwield both shortsword shortsword.2")
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^wpvp$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>wield limbs</name>
									<script>if snd.class == "Templar" then
snd.send("quickwield both mace mace.2")
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^wlb$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>wield longswords</name>
									<script>if snd.class == "Templar" then
snd.send("quickwield both longsword longsword.2")
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^wls$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>wield damage</name>
									<script>if snd.class == "Templar" then
snd.send("quickwield both bastard")
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^wdmg$</regex>
								</Alias>
							</AliasGroup>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Battlefury</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>strike</name>
									<script>if snd.class == "Templar" then
snd.attack("strike "..snd.target)
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^stk$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>duality</name>
									<script>if snd.class == "Templar" then
snd.attack("dsk "..snd.target)
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^dsk$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>impale</name>
									<script>if snd.class == "Templar" then
if matches[2] == "" then
 snd.attack("impale "..snd.target)
else
 snd.attack("impale "..matches[2])
end
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^imp (.+)$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>disembowel</name>
									<script>if snd.class == "Templar" then
if matches[2] == "" then
 snd.attack("disembowel "..snd.target)
else
 snd.attack("disembowel "..matches[2])
end
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^db(.*)$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>cleave</name>
									<script>if snd.class == "Templar" then
if matches[2] == "" then
 snd.attack("cleave "..snd.target)
else
 snd.attack("cleave "..matches[2])
end
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^clv(.*)$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>lunge</name>
									<script>if matches[2] == "" then
 snd.send("qeb lunge "..snd.target)
else
 snd.send("qeb lunge "..matches[2])
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^ln(.*)$</regex>
								</Alias>
							</AliasGroup>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Righteousness</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>deliver</name>
									<script>if snd.class == "Templar" then
snd.send("qeb get monolith"..snd.sep.."aura deliverance "..matches[2])
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^del (.*)$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>resurrection</name>
									<script>if snd.class == "Templar" then
snd.toggles.attacking = false
snd.send("qeb aura resurrection "..matches[2])
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^rez (\w+)$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>pilgrimage</name>
									<script>if snd.class == "Templar" then
snd.toggles.attacking = false
snd.toggles.bashing = false
snd.toggles.fasthunt = false
if snd.have_aff("paresis") then
 snd.send("firstaid elevate paresis")
end
snd.send("undefend")
snd.send("qeb get monolith"..snd.sep.."get monolith"..snd.sep.."aura pilgrimage")
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^pilg$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>latency</name>
									<script>if snd.class == "Templar" then
snd.toggles.attacking = false
snd.toggles.bashing = false
snd.toggles.fasthunt = false
if snd.have_aff("paresis") then
 snd.send("firstaid elevate paresis")
end
snd.send("undefend")
snd.send("qeb get monolith"..snd.sep.."get monolith"..snd.sep.."aura pilgrimage aura")
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^ltn$</regex>
								</Alias>
							</AliasGroup>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Affliction Offenses</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>straight retri</name>
									<script>if snd.class == "Templar" then
snd.starting_attack()
function snd.attack_function()
	if not snd.waiting.queue then
		local string = "" -- we'll load this with our attack string
		local call = "" -- and this with our affliction call
		-- next, the afflictions we want to give
		local touse = {}
		local tohit = {}
		-- and in case we don't find enough of them
		local extraaff = "sacrifice"
		local vorpal = false -- can we use vorpal?
		if tonumber(gmcp.Char.Vitals.charge_left) &gt;= 140 and tonumber(gmcp.Char.Vitals.charge_right) &gt;= 140 then
			vorpal = true -- yesssssss
		end
		-- set the affs we want to use
			snd.giving = {
			"conviction",
			"crippled",
			"paresis",
			"mental disruption",
			"physical disruption",
			"crippled body",
			--deathblow!
			}
		-- first and foremost, check if we can retri!
		
		if snd.checksomeAffs({"paralysis", "crippled body", "mental disruption","physical disruption" },4) then
			string = "retribution "..snd.target
		else -- if not...
			-- pick affs from the list above
			for i in pairs(snd.giving) do
				-- make sure not to double up paresis and paralysis
				if not snd.checkAff(snd.giving[i]) then
					-- and don't add an aff we've already got in the list!
					if not table.contains(touse, snd.giving[i]) then
						table.insert(touse, snd.giving[i])
					end
				end
			end
			-- now let's convert affs to venoms/empowerments
			for aff in pairs(touse) do
				table.insert(tohit, snd.effects[touse[aff]])
			end
			-- if we didn't find enough stuff to hit with, stick in our filler
			while #tohit &lt; 3 do
				table.insert(tohit, extraaff)
			end
			-- now to decide what attack to use!
			if snd.used.shield then
				string = "raze "..snd.target
			elseif snd.used.rebounding then
				string = "dsk "..snd.target.." blaze "..tohit[1]
				snd.blazing = true
				call = "wt Afflicting "..snd.target..": blaze, "..tohit[1]..snd.sep
			elseif vorpal then
				string = "blade release right vorpal "..snd.target.." "..tohit[1]..snd.sep.."dsk "..snd.target.." "..tohit[3].." "..tohit[2]
				call = "wt Afflicting "..snd.target..": "..tohit[1]..", "..tohit[3]..", "..tohit[2]..snd.sep
			else
				string = "dsk "..snd.target.." "..tohit[2].." "..tohit[1]
				call = "wt Afflicting "..snd.target..": "..tohit[2]..", "..tohit[1]..snd.sep
			end
		end
		-- prepend our affliction call, if we need one
		if snd.toggles.affcalling and not snd.target_gone then
			string = call..string
		end
		-- handle anti-spam and the actual attacking now
		if string ~= snd.last_attack and not snd.waiting.queue then
			snd.last_attack = string
			snd.attack(snd.last_attack)
			snd.waiting.queue = true
			tempTimer(snd.delay(), [[snd.waiting.queue = false]])
		end
	end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^raw$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>retribution stack</name>
									<script>--Meat and potatoes for 1v1, this is a classic vlock followed by
--retri finisher. Good for whales.
if snd.class == "Templar" then
snd.starting_attack()
function snd.attack_function()
	if not snd.waiting.queue then
		local string = "" -- we'll load this with our attack string
		local call = "" -- and this with our affliction call
		-- next, the afflictions we want to give
		local touse = {}
		local tohit = {}
		-- and in case we don't find enough of them
		local extraaff = "sacrifice"
		-- let's determine how many affs we are away from locking
		local missing = snd.missingAff("stupidity/paresis/anorexia/asthma/slickness", "/")
		local vorpal = false -- can we use vorpal?
		if tonumber(gmcp.Char.Vitals.charge_left) &gt;= 140 and tonumber(gmcp.Char.Vitals.charge_right) &gt;= 140 then
			vorpal = true -- yesssssss
		end
		-- we're going to use a different affliction stack if the target is locked
		if snd.target_locked() then
			snd.giving = {
			"a broken left leg",
			"a broken right leg",
			"crippled",
			"mental disruption",
			"physical disruption",
			"crippled body",
			"sensitivity",
			"clumsiness",
			"weariness",
			}
		else
		-- and this one if they're not
			snd.giving = {
			"conviction",
			"asthma",
			"clumsiness",
			"paresis",
			"crippled",
			"slickness",
			"stupidity",
			"anorexia",
			"mental disruption",
			"physical disruption",
			"crippled body",
			--deathblow!
			"weariness",
			"haemophilia",
			"allergies",
			"sensitivity",
			"vomiting",
			"recklessness",
			"dizziness"
			}
		end
		-- first and foremost, check if we can retri!
		if snd.checksomeAffs({"paralysis", "crippled body", "mental disruption","physical disruption" },4) then
			string = "retribution "..snd.target
		else -- if not...
			-- see if we can lock this round, in any of three possible ways
			if vorpal and #missing == 3 and not snd.used.shield and not snd.used.rebounding then
				touse = missing
			elseif #missing == 2 and not snd.used.shield and not snd.used.rebounding then
				touse = missing
			elseif #missing == 1 and not snd.used.shield then
				touse = missing
			end
			-- any aff we're not using to lock, we'll pick from the list above
			for i in pairs(snd.giving) do
				-- make sure not to double up paresis and paralysis
				if not snd.checkAff(snd.giving[i]) then
					-- and don't add an aff we've already got in the list!
					if not table.contains(touse, snd.giving[i]) then
						table.insert(touse, snd.giving[i])
					end
				end
			end
			-- now let's convert affs to venoms/empowerments
			for aff in pairs(touse) do
				table.insert(tohit, snd.effects[touse[aff]])
			end
			-- if we didn't find enough stuff to hit with, stick in our filler
			while #tohit &lt; 3 do
				table.insert(tohit, extraaff)
			end
			-- now to decide what attack to use!
			if snd.used.shield then
				string = "raze "..snd.target
			elseif snd.used.rebounding then
				string = "dsk "..snd.target.." blaze "..tohit[1]
				snd.blazing = true
				call = "wt Afflicting "..snd.target..": blaze, "..tohit[1]..snd.sep
			elseif vorpal and not snd.target_locked() and #missing &gt; 2 then
				string = "blade release right vorpal "..snd.target.." "..tohit[1]..snd.sep.."dsk "..snd.target.." "..tohit[3].." "..tohit[2]
				call = "wt Afflicting "..snd.target..": "..tohit[1]..", "..tohit[3]..", "..tohit[2]..snd.sep
			else
				string = "dsk "..snd.target.." "..tohit[2].." "..tohit[1]
				call = "wt Afflicting "..snd.target..": "..tohit[2]..", "..tohit[1]..snd.sep
			end
		end
		-- prepend our affliction call, if we need one
		if snd.toggles.affcalling and not snd.target_gone then
			string = call..string
		end
		-- handle anti-spam and the actual attacking now
		if string ~= snd.last_attack and not snd.waiting.queue then
			snd.last_attack = string
			snd.attack(snd.last_attack)
			snd.waiting.queue = true
			tempTimer(snd.delay(), [[snd.waiting.queue = false]])
		end
	end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^ret$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>magic</name>
									<script>--Meat and potatoes for 1v1, this is a classic vlock followed by
--retri finisher. Good for whales.
if snd.class == "Templar" then
snd.starting_attack()
function snd.attack_function()
	if not snd.waiting.queue then
		local string = "" -- we'll load this with our attack string
		local call = "" -- and this with our affliction call
		-- next, the afflictions we want to give
		local touse = {}
		local tohit = {}
		-- and in case we don't find enough of them
		local extraaff = "sacrifice"
		-- let's determine how many affs we are away from locking
		local missing = snd.missingAff("stupidity/paresis/anorexia/asthma/slickness", "/")
		local vorpal = false -- can we use vorpal?
		if tonumber(gmcp.Char.Vitals.charge_left) &gt;= 140 and tonumber(gmcp.Char.Vitals.charge_right) &gt;= 140 then
			vorpal = true -- yesssssss
		end
		-- we're going to use a different affliction stack if the target is locked
		if snd.target_locked() then
			snd.giving = {
			"a broken left leg",
			"a broken right leg",
			"crippled",
			"mental disruption",
			"physical disruption",
			"crippled body",
			"sensitivity",
			"weariness",
			"clumsiness",
			}
		else
		-- and this one if they're not
			snd.giving = {
			"conviction",
			"asthma",
			"weariness",
			"paresis",
			"crippled",
			"slickness",
			"stupidity",
			"anorexia",
			"mental disruption",
			"physical disruption",
			"crippled body",
			--deathblow!
			"clumsiness",
			"haemophilia",
			"allergies",
			"sensitivity",
			"vomiting",
			"recklessness",
			"dizziness"
			}
		end
		-- first and foremost, check if we can retri!
		if snd.checksomeAffs({"paralysis", "crippled body", "mental disruption","physical disruption" },4) then
			string = "retribution "..snd.target
		else -- if not...
			-- see if we can lock this round, in any of three possible ways
			if vorpal and #missing == 3 and not snd.used.shield and not snd.used.rebounding then
				touse = missing
			elseif #missing == 2 and not snd.used.shield and not snd.used.rebounding then
				touse = missing
			elseif #missing == 1 and not snd.used.shield then
				touse = missing
			end
			-- any aff we're not using to lock, we'll pick from the list above
			for i in pairs(snd.giving) do
				-- make sure not to double up paresis and paralysis
				if not snd.checkAff(snd.giving[i]) then
					-- and don't add an aff we've already got in the list!
					if not table.contains(touse, snd.giving[i]) then
						table.insert(touse, snd.giving[i])
					end
				end
			end
			-- now let's convert affs to venoms/empowerments
			for aff in pairs(touse) do
				table.insert(tohit, snd.effects[touse[aff]])
			end
			-- if we didn't find enough stuff to hit with, stick in our filler
			while #tohit &lt; 3 do
				table.insert(tohit, extraaff)
			end
			-- now to decide what attack to use!
			if snd.used.shield then
				string = "raze "..snd.target
			elseif snd.used.rebounding then
				string = "dsk "..snd.target.." blaze "..tohit[1]
				snd.blazing = true
				call = "wt Afflicting "..snd.target..": blaze, "..tohit[1]..snd.sep
			elseif vorpal and not snd.target_locked() and #missing &gt; 2 then
				string = "blade release right vorpal "..snd.target.." "..tohit[1]..snd.sep.."dsk "..snd.target.." "..tohit[3].." "..tohit[2]
				call = "wt Afflicting "..snd.target..": "..tohit[1]..", "..tohit[3]..", "..tohit[2]..snd.sep
			else
				string = "dsk "..snd.target.." "..tohit[2].." "..tohit[1]
				call = "wt Afflicting "..snd.target..": "..tohit[2]..", "..tohit[1]..snd.sep
			end
		end
		-- prepend our affliction call, if we need one
		if snd.toggles.affcalling and not snd.target_gone then
			string = call..string
		end
		-- handle anti-spam and the actual attacking now
		if string ~= snd.last_attack and not snd.waiting.queue then
			snd.last_attack = string
			snd.attack(snd.last_attack)
			snd.waiting.queue = true
			tempTimer(snd.delay(), [[snd.waiting.queue = false]])
		end
	end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^mg$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>legs</name>
									<script>if snd.class == "Templar" then
snd.starting_attack()
function snd.attack_function()
	if not snd.waiting.queue then
		local string = "" -- we'll load this with our attack string
		local call = "" -- and this with our affliction call
		-- next, the afflictions we want to give
		local touse = {}
		local tohit = {}
		-- and in case we don't find enough of them
		local extraaff = "hemorrhage"
		local iceblast = false
		if tonumber(gmcp.Char.Vitals.charge_left) &gt;= 100 and tonumber(gmcp.Char.Vitals.charge_right) &gt;= 100 then
			iceblast = true
		end
		-- set the affs we want to use
			snd.giving = {
			"a broken right leg",
			"a broken left leg",
			"a broken right arm",
			"a broken left arm",
			"stupidity",
			"mental disruption",
			"anorexia",
			"slickness",
			"asthma",
			"paresis",
			"crippled",
			"physical disruption",
			}
			
		-- pick affs from the list above
		for i in pairs(snd.giving) do
			-- make sure not to double up paresis and paralysis
			if not snd.checkAff(snd.giving[i]) then
				-- and don't add an aff we've already got in the list!
				if not table.contains(touse, snd.giving[i]) then
					table.insert(touse, snd.giving[i])
				end
			end
		end
			
		-- first and foremost, check if we can retri!
		if snd.checkAff("paralysis") and snd.checkAff("crippled body") and snd.checkAff("mental disruption") and snd.checkAff("physical disruption") then
			string = "retribution "..snd.target
		elseif snd.target_impaled then
			string = "disembowel "..snd.target
		elseif snd.proned() and not snd.checkAff("impaled") then
			string = "penance "..snd.target..snd.sep.."impale "..snd.target
			if iceblast then
				string = "blade release left iceblast "..snd.target..snd.sep.."blade release right iceblast "..snd.target..snd.sep..string
			end
		else 
			-- now let's convert affs to venoms/empowerments
			for aff in pairs(touse) do
				table.insert(tohit, snd.effects[touse[aff]])
			end
			-- if we didn't find enough stuff to hit with, stick in our filler
			while #tohit &lt; 3 do
				table.insert(tohit, extraaff)
			end
			-- now to decide what attack to use!
			if snd.used.shield then
				string = "raze "..snd.target
			elseif snd.used.rebounding then
				string = "razestrike "..snd.target.." "..tohit[1]
				snd.blazing = true
				call = "wt Afflicting "..snd.target..": Blaze, "..tohit[1]..snd.sep
			elseif iceblast then
				string = "blade release right iceblast "..snd.target..snd.sep.."blade release left iceblast "..snd.target..snd.sep.."dsk "..snd.target.." "..tohit[2].." "..tohit[1]
				call = "wt Afflicting "..snd.target..": "..tohit[2]..", "..tohit[1]..snd.sep
			else
				string = "dsk "..snd.target.." "..tohit[2].." "..tohit[1]
				call = "wt Afflicting "..snd.target..": "..tohit[2]..", "..tohit[1]..snd.sep
			end
		end
		-- prepend our affliction call, if we need one
		if snd.toggles.affcalling and not snd.target_gone then
			string = call..string
		end
		-- handle anti-spam and the actual attacking now
		if string ~= snd.last_attack and not snd.waiting.queue then
			snd.last_attack = string
			snd.attack(snd.last_attack)
			snd.waiting.queue = true
			tempTimer(snd.delay(), [[snd.waiting.queue = false]])
		end
	end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^lgs$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>mouse mode</name>
									<script>if snd.class == "Templar" then
snd.starting_attack()
function snd.attack_function()
	if not snd.waiting.queue then
		local string = "" -- we'll load this with our attack string
		local call = "" -- and this with our affliction call
		-- next, the afflictions we want to give
		local touse = {}
		local tohit = {}
		-- and in case we don't find enough of them
		local extraaff = "sacrifice"
		local vorpal = false -- can we use vorpal?
		if tonumber(gmcp.Char.Vitals.charge_left) &gt;= 140 and tonumber(gmcp.Char.Vitals.charge_right) &gt;= 140 then
			vorpal = true -- yesssssss
		end
		-- set the affs we want to use
			snd.giving = {
      "sight",
      "paresis",
      "clumsiness",
      "asthma",
      "sensitivity",
      "vomiting",
      "allergies",
      "haemophilia",
      "slickness",
      --"anorexia",
      --"stupidity",
      --"recklessness",
      --"weariness",
      --"dizziness",
      --"voyria",
      }
		-- first and foremost, check if we can disembowel!
		if snd.target_impaled then
			string = "disembowel "..snd.target
		-- otherwise, see if we can impale
		elseif not snd.checkAff("impaled") and snd.proned() and snd.checkAff("sensitivity") and not snd.checkAff("thighlock") and not snd.checkAff("armpitlock") and not snd.checkAff("necklock") then
			if vorpal then
				string = "blade release left crescent "..snd.target..snd.sep.."blade release right crescent "..snd.target..snd.sep.."penance "..snd.target..snd.sep.."impale "..snd.target
			else
				string = "penance "..snd.target..snd.sep.."impale "..snd.target
			end
		else -- if not...
			-- pick affs from the list above
			for i in pairs(snd.giving) do
				-- make sure not to double up paresis and paralysis
				if not snd.checkAff(snd.giving[i]) then
					-- and don't add an aff we've already got in the list!
					if not table.contains(touse, snd.giving[i]) then
						table.insert(touse, snd.giving[i])
					end
				end
			end
			-- now let's convert affs to venoms/empowerments
			for aff in pairs(touse) do
				table.insert(tohit, snd.effects[touse[aff]])
			end
			-- if we didn't find enough stuff to hit with, stick in our filler
			while #tohit &lt; 3 do
				table.insert(tohit, extraaff)
			end
			-- now to decide what attack to use!
			if snd.used.shield then
				string = "raze "..snd.target
			elseif snd.used.rebounding then
				string = "dsk "..snd.target.." blaze "..tohit[1]
				snd.blazing = true
				call = "wt Afflicting "..snd.target..": blaze, "..tohit[1]..snd.sep
			elseif vorpal then
				string = "blade release right vorpal "..snd.target.." "..tohit[1]..snd.sep.."dsk "..snd.target.." "..tohit[3].." "..tohit[2]
				call = "wt Afflicting "..snd.target..": "..tohit[1]..", "..tohit[3]..", "..tohit[2]..snd.sep
			else
				string = "dsk "..snd.target.." "..tohit[2].." "..tohit[1]
				call = "wt Afflicting "..snd.target..": "..tohit[2]..", "..tohit[1]..snd.sep
			end
		end
		-- prepend our affliction call, if we need one
		if snd.toggles.affcalling and not snd.target_gone then
			string = call..string
		end
		-- handle anti-spam and the actual attacking now
		if string ~= snd.last_attack and not snd.waiting.queue then
			snd.last_attack = string
			snd.attack(snd.last_attack)
			snd.waiting.queue = true
			tempTimer(snd.delay(), [[snd.waiting.queue = false]])
		end
	end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^ms$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>impale mode</name>
									<script>if snd.class == "Templar" then
snd.starting_attack()
function snd.attack_function()
	if not snd.waiting.queue then
		local string = "" -- we'll load this with our attack string
		local call = "" -- and this with our affliction call
		local physcount = 0
		for aff in pairs(snd.physical_affs) do
			if table.contains(snd.target_has, snd.physical_affs[aff]) then
				physcount = physcount + 1
			end
		end
		-- next, the afflictions we want to give
		local touse = {}
		local tohit = {}
		-- and in case we don't find enough of them
		local extraaff = "sacrifice"
		local vorpal = false -- can we use vorpal?
		if tonumber(gmcp.Char.Vitals.charge_left) &gt;= 140 and tonumber(gmcp.Char.Vitals.charge_right) &gt;= 140 then
			vorpal = true -- yesssssss
		end
		-- set the affs we want to use
			snd.giving = {
      "paresis",
      "clumsiness",
      "asthma",
      "sensitivity",
      "vomiting",
      "allergies",
      "haemophilia",
      "slickness",
      "a broken left leg",
      "a broken right leg",
      --"anorexia",
      --"stupidity",
      --"recklessness",
      --"weariness",
      --"dizziness",
      --"voyria",
      }
		-- first and foremost, check if we can disembowel!
		if snd.target_impaled then
			string = "disembowel "..snd.target
		-- otherwise, see if we can impale
		elseif not snd.checkAff("impaled") and snd.proned() and snd.checkAff("sensitivity") and physcount &gt;= 4 and vorpal then
			string = "blade release left crescent "..snd.target..snd.sep.."blade release right crescent "..snd.target..snd.sep.."penance "..snd.target..snd.sep.."impale "..snd.target
		else -- if not...
			-- pick affs from the list above
			for i in pairs(snd.giving) do
				-- make sure not to double up paresis and paralysis
				if not snd.checkAff(snd.giving[i]) then
					-- and don't add an aff we've already got in the list!
					if not table.contains(touse, snd.giving[i]) then
						table.insert(touse, snd.giving[i])
					end
				end
			end
			-- now let's convert affs to venoms/empowerments
			for aff in pairs(touse) do
				table.insert(tohit, snd.effects[touse[aff]])
			end
			-- if we didn't find enough stuff to hit with, stick in our filler
			while #tohit &lt; 3 do
				table.insert(tohit, extraaff)
			end
			-- now to decide what attack to use!
			if snd.used.shield then
				string = "raze "..snd.target
			elseif snd.used.rebounding then
				string = "dsk "..snd.target.." blaze "..tohit[1]
				snd.blazing = true
				call = "wt Afflicting "..snd.target..": blaze, "..tohit[1]..snd.sep
			elseif vorpal then
				string = "blade release right vorpal "..snd.target.." "..tohit[1]..snd.sep.."dsk "..snd.target.." "..tohit[3].." "..tohit[2]
				call = "wt Afflicting "..snd.target..": "..tohit[1]..", "..tohit[3]..", "..tohit[2]..snd.sep
			else
				string = "dsk "..snd.target.." "..tohit[2].." "..tohit[1]
				call = "wt Afflicting "..snd.target..": "..tohit[2]..", "..tohit[1]..snd.sep
			end
		end
		-- prepend our affliction call, if we need one
		if snd.toggles.affcalling and not snd.target_gone then
			string = call..string
		end
		-- handle anti-spam and the actual attacking now
		if string ~= snd.last_attack and not snd.waiting.queue then
			snd.last_attack = string
			snd.attack(snd.last_attack)
			snd.waiting.queue = true
			tempTimer(snd.delay(), [[snd.waiting.queue = false]])
		end
	end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^im$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>newbie mode</name>
									<script>if snd.class == "Templar" then
snd.starting_attack()
function snd.attack_function()
	if not snd.waiting.queue then
		local string = "" -- we'll load this with our attack string
		local call = "" -- and this with our affliction call
		-- next, the afflictions we want to give
		local touse = {}
		local tohit = {}
		-- and in case we don't find enough of them
		local extraaff = "sacrifice"
		-- set the affs we want to use
			snd.giving = {
      "sight",
      "paresis",
      "clumsiness",
      "asthma",
      "sensitivity",
      "vomiting",
      "allergies",
      "haemophilia",
      "slickness",
      --"anorexia",
      --"stupidity",
      --"recklessness",
      --"weariness",
      --"dizziness",
      --"voyria",
      }
		-- first and foremost, check if we can disembowel!
		if snd.target_impaled then
			string = "disembowel "..snd.target
		-- otherwise, see if we can impale
		elseif not snd.checkAff("impaled") and snd.proned() and not snd.checkAff("thighlock") and not snd.checkAff("armpitlock") and not snd.checkAff("necklock") then
			string = "impale "..snd.target
		else -- if not...
			-- pick affs from the list above
			for i in pairs(snd.giving) do
				-- make sure not to double up paresis and paralysis
				if not snd.checkAff(snd.giving[i]) then
					-- and don't add an aff we've already got in the list!
					if not table.contains(touse, snd.giving[i]) then
						table.insert(touse, snd.giving[i])
					end
				end
			end
			-- now let's convert affs to venoms/empowerments
			for aff in pairs(touse) do
				table.insert(tohit, snd.effects[touse[aff]])
			end
			-- if we didn't find enough stuff to hit with, stick in our filler
			while #tohit &lt; 3 do
				table.insert(tohit, extraaff)
			end
			-- now to decide what attack to use!
			if snd.used.shield then
				string = "raze "..snd.target
			elseif snd.used.rebounding then
				string = "razestrike "..snd.target.." "..tohit[1]
				call = "wt Afflicting "..snd.target..": "..tohit[1]..snd.sep
			else
				string = "dsk "..snd.target.." "..tohit[2].." "..tohit[1]
				call = "wt Afflicting "..snd.target..": "..tohit[2]..", "..tohit[1]..snd.sep
			end
		end
		-- prepend our affliction call, if we need one
		if snd.toggles.affcalling and not snd.target_gone then
			string = call..string
		end
		-- handle anti-spam and the actual attacking now
		if string ~= snd.last_attack and not snd.waiting.queue then
			snd.last_attack = string
			snd.attack(snd.last_attack)
			snd.waiting.queue = true
			tempTimer(snd.delay(), [[snd.waiting.queue = false]])
		end
	end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^newb$</regex>
								</Alias>
							</AliasGroup>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Damage Offenses</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>zeal</name>
									<script>if snd.class == "Templar" then
snd.starting_attack()
function snd.attack_function()
	if not snd.waiting.queue then
		local string = ""
		if snd.used.rebounding or snd.used.shield then
			string = "raze "..snd.target
		elseif tonumber(gmcp.Char.Vitals.charge_left) &gt;= 140 then
			string = "blade release left crescent "..snd.target..snd.sep.."empower left with sacrifice"..snd.sep.."empower left with sacrifice"..snd.sep.."empower left with sacrifice"..snd.sep.."empower left with sacrifice"..snd.sep.."zeal "..snd.target
		else
			string = "empower left with sacrifice"..snd.sep.."empower left with sacrifice"..snd.sep.."empower left with sacrifice"..snd.sep.."empower left with stun"..snd.sep.."zeal "..snd.target
		end
		if string ~= snd.last_attack and not snd.waiting.queue then
			snd.last_attack = string
			snd.attack(snd.last_attack)
			snd.waiting.queue = true
			tempTimer(snd.delay(), [[snd.waiting.queue = false]])
		end
	end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^zeal$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>damage</name>
									<script>if snd.class == "Templar" then
snd.starting_attack()
function snd.attack_function()
	if not snd.waiting.queue then
		local string = ""
		if snd.used.rebounding or snd.used.shield then
			string = "raze "..snd.target
		elseif tonumber(gmcp.Char.Vitals.charge_left) &gt;= 140 then
			string = "blade release left crescent "..snd.target..snd.sep.."empower left with sacrifice"..snd.sep.."empower left with sacrifice"..snd.sep.."empower left with sacrifice"..snd.sep.."empower left with sacrifice"..snd.sep.."zeal "..snd.target
		else
			string = "dsw "..snd.target.." sacrifice sacrifice"
		end
		if string ~= snd.last_attack and not snd.waiting.queue then
			snd.last_attack = string
			snd.attack(snd.last_attack)
			snd.waiting.queue = true
			tempTimer(snd.delay(), [[snd.waiting.queue = false]])
		end
	end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^dmg$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>mana burn</name>
									<script>if snd.class == "Templar" then
snd.starting_attack()
function snd.attack_function()
 if not snd.waiting.queue then
  local string = ""
  if snd.used.rebounding or snd.used.shield then
--   snd.send("razestrike "..snd.target.." blaze")
   string = "raze "..snd.target
  elseif tonumber(gmcp.Char.Vitals.charge_left) &gt;= 140 and tonumber(gmcp.Char.Vitals.charge_right) &gt;= 140 then
   string = "empower right with combustion"..snd.sep.."blade release right vorpal "..snd.target..snd.sep.."dsk "..snd.target.." combustion combustion"
  else
   string = "dsk "..snd.target.." combustion combustion"
  end
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
--snd.send("engage "..snd.target)
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^mana$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>iceblast</name>
									<script>if snd.class == "Templar" then
snd.starting_attack()
function snd.attack_function()
 if not snd.waiting.queue then
  local string = ""
  if snd.used.rebounding and snd.used.shield then
--   snd.send("razestrike "..snd.target.." blaze")
   string = "raze "..snd.target
  elseif snd.used.rebounding or snd.used.shield then
   string = "razestrike "..snd.target.." sacrifice"
  else
   string = "blade release left iceblast "..snd.target..snd.sep.."empower left with sacrifice"..snd.sep.."empower left with sacrifice"..snd.sep.."empower left with sacrifice"..snd.sep.."empower left with sacrifice"..snd.sep.."zeal "..snd.target
  end
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
--snd.send("engage "..snd.target)
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^ib$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>Group Impale</name>
									<script>-- Hello. This route requires a warhammer, as well as you setting up what type of weapon you're using.
-- There is a variable in the script 'PvP variables', which you need to change to be whatever weapon you use.
-- We need this so we can switch to a warhammer/switch back at will without having to put in lots of
-- weird checks to see what kind of weapon you use. Templar has many!

if snd.class == "Templar" then
snd.starting_attack()
function snd.attack_function()
	if not snd.waiting.queue then
		local string = "" -- we'll load this with our attack string
		local call = "" -- and this with our affliction call
		-- next, the afflictions we want to give
		local touse = {}
		local tohit = {}
		-- and in case we don't find enough of them
		local extraaff = "sacrifice"
		local vorpal = false -- can we use vorpal? set to false until we check
		if tonumber(gmcp.Char.Vitals.charge_left) &gt;= 140 and tonumber(gmcp.Char.Vitals.charge_right) &gt;= 140 then
			vorpal = true -- yesssssss
		end
		local wield = ""
		if not string.find(gmcp.Char.Vitals.wield_right, snd.templar_weapon_type) then wield = "relax grip".."quickwield both 1."..snd.templar_weapon_type.." 2."..snd.templar_weapon_type.."grip" end
		-- set the affs we want to use
     snd.giving = {
      "sight",
		  "paresis",
	    "sensitivity",
			"asthma",
      "vomiting",
      "allergies",
      "slickness",
			"a broken left leg",
			"a broken right leg",
      "anorexia",
      "stupidity",
      }
		-- first and foremost, check if we can disembowel!
		if snd.target_impaled then
			string = "disembowel "..snd.target
		-- otherwise, see if we can impale
		elseif not snd.checkAff("impaled") and snd.proned() and snd.checkAff("sensitivity") then
				string = "penance "..snd.target..snd.sep.."impale "..snd.target
		elseif snd.checkAff("impaled") and snd.checkAff("sensitivity") then
				string = "penance "..snd.target..snd.sep.."relax grip"..snd.sep.."quickwield both warhammer"..snd.sep.."grip"..snd.sep.."dsw "..snd.target.." sacrifice sacrifice"		
		else -- if not...
			-- pick affs from the list above
			for i in pairs(snd.giving) do
				-- make sure not to double up paresis and paralysis
				if not snd.checkAff(snd.giving[i]) then
					-- and don't add an aff we've already got in the list!
					if not table.contains(touse, snd.giving[i]) then
						table.insert(touse, snd.giving[i])
					end
				end
			end
			if string.find(string, "impale") or string.find(string, "dsw") and vorpal then -- Do we have vorpal and are we finishing someone off?
					string = "blade release left crescent "..snd.target..snd.sep.."blade release right crescent "..snd.target..snd.sep..string
			end
			-- now let's convert affs to venoms/empowerments
			for aff in pairs(touse) do
				table.insert(tohit, snd.effects[touse[aff]])
			end
			-- if we didn't find enough stuff to hit with, stick in our filler
			while #tohit &lt; 3 do
				table.insert(tohit, extraaff)
			end
			-- now to decide what attack to use!
			if snd.used.shield then
				string = "raze "..snd.target
			elseif snd.used.rebounding then
				string = "rsk "..snd.target.." "..tohit[1]
				call = "wt Afflicting "..snd.target..": "..tohit[1]..snd.sep
			else
				string = "dsk "..snd.target.." "..tohit[2].." "..tohit[1]
				call = "wt Afflicting "..snd.target..": "..tohit[2]..", "..tohit[1]..snd.sep
			end
		end
		
		--check if we need to re-wield our speed weps
		if wield ~= "" then string = wield..snd.sep..string end
		
		-- prepend our affliction call, if we need one
		if snd.toggles.affcalling and not snd.target_gone then
			string = call..string
		end
		-- handle anti-spam and the actual attacking now
		if string ~= snd.last_attack and not snd.waiting.queue then
			snd.last_attack = string
			snd.attack(snd.last_attack)
			snd.waiting.queue = true
			tempTimer(snd.delay(), [[snd.waiting.queue = false]])
		end
	end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^gimp$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>Group Aff - Requires 1 Luminary</name>
									<script>-- Hello. This route requires a warhammer, as well as you setting up what type of weapon you're using.
-- There is a variable in the script 'PvP variables', which you need to change to be whatever weapon you use.
-- We need this so we can switch to a warhammer/switch back at will without having to put in lots of
-- weird checks to see what kind of weapon you use. Templar has many!

if snd.class == "Templar" then
snd.starting_attack()
function snd.attack_function()
	if not snd.waiting.queue then
		local string = "" -- we'll load this with our attack string
		local call = "" -- and this with our affliction call
		-- next, the afflictions we want to give
		local touse = {}
		local tohit = {}
		-- and in case we don't find enough of them
		local extraaff = "sacrifice"
		local vorpal = false -- can we use vorpal? set to false until we check
		if tonumber(gmcp.Char.Vitals.charge_left) &gt;= 140 and tonumber(gmcp.Char.Vitals.charge_right) &gt;= 140 then
			vorpal = true -- yesssssss
		end
		local wield = ""
		if not string.find(gmcp.Char.Vitals.wield_right, snd.templar_weapon_type) then wield = "relax grip".."quickwield both 1."..snd.templar_weapon_type.." 2."..snd.templar_weapon_type.."grip" end
		-- set the affs we want to use
		snd.giving = {
			"paresis",
			"asthma",
			"weariness",
			"sight",
			"sensitivity",
			"slickness",
			"anorexia",
			"stupidity",
			"a broken left leg",
			"a broken right leg",
			"clumsiness",
			"haemophilia",
			"allergies",
			"vomiting",
			"recklessness",
			"dizziness"
      }
		-- Since we're with a Luminary, we're banking on them using the Penance proc on overwhelm to instantly kill someone. Deleted!
		if snd.checkAff("transfixed") and snd.checkAff("sensitivity") then
			if  snd.health_percent &lt;= 75 then
				string = "penance "..snd.target
			else -- Okay, their health isn't low enough to kill them straight out. Let's just make sure we hit them some more.
				string = "penance "..snd.target..snd.sep.."relax grip"..snd.sep.."quickwield both warhammer"..snd.sep.."grip"..snd.sep.."dsw "..snd.target.." sacrifice sacrifice"		
				if vorpal then
					string = "blade release left crescent "..snd.target..snd.sep.."blade release right crescent "..snd.target..snd.sep..string
				end
			end
		else -- if not...
			-- pick affs from the list above
			for i in pairs(snd.giving) do
				-- make sure not to double up paresis and paralysis
				if not snd.checkAff(snd.giving[i]) then
					-- and don't add an aff we've already got in the list!
					if not table.contains(touse, snd.giving[i]) then
						table.insert(touse, snd.giving[i])
					end
				end
			end
			-- now let's convert affs to venoms/empowerments
			for aff in pairs(touse) do
				table.insert(tohit, snd.effects[touse[aff]])
			end
			-- if we didn't find enough stuff to hit with, stick in our filler
			while #tohit &lt; 3 do
				table.insert(tohit, extraaff)
			end
			-- now to decide what attack to use!
			if snd.used.shield then
				string = "raze "..snd.target
			elseif snd.used.rebounding then
				string = "rsk "..snd.target.." "..tohit[1]
				call = "wt Afflicting "..snd.target..": "..tohit[1]..snd.sep
			else
				string = "dsk "..snd.target.." "..tohit[2].." "..tohit[1]
				call = "wt Afflicting "..snd.target..": "..tohit[2]..", "..tohit[1]..snd.sep
			end
		end
		
		string = "qa "..snd.target..snd.sep..string 
		
		-- prepend our affliction call, if we need one
		if snd.toggles.affcalling and not snd.target_gone then
			string = call..string
		end
		-- handle anti-spam and the actual attacking now
		if string ~= snd.last_attack and not snd.waiting.queue then
			snd.last_attack = string
			snd.attack(snd.last_attack)
			snd.waiting.queue = true
			tempTimer(snd.delay(), [[snd.waiting.queue = false]])
		end
	end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^gaff$</regex>
								</Alias>
							</AliasGroup>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Limb Offenses</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>limbs</name>
									<script>if snd.class == "Templar" then
snd.starting_attack()
function snd.attack_function()
 if not snd.waiting.queue then
  local string = ""
  -- list what limbs to hit
  local limbs = {"left leg", "right leg", "left arm", "right arm"}
	-- check if we can rupture now!
  local rupture = "none"
	local vorpal = false
	local call = ""
  for limb in ipairs(limbs) do
   if snd.limb_bruising[limbs[limb]] &gt;= 3 then
    rupture = limbs[limb]
   end
  end
  if rupture ~= "none" and not snd.used.shield then -- if rupture is go
   	string = "penance "..snd.target..snd.sep.."rupture "..snd.target.." "..rupture
  else -- can't rupture, needs logic
   -- but can we vorpal tho!
   	if tonumber(gmcp.Char.Vitals.charge_left) &gt;= 140 and tonumber(gmcp.Char.Vitals.charge_right) &gt;= 140 then
    	vorpal = true
	 	else
		  vorpal = false
		end
	 	-- pick what limbs to hit
	 	left = "nothing"
	 	right = "nothing"
	 	if snd.target_prone then -- focus legs hard on prone
	  	if snd.parried_limb == "right leg" then
	   		right = "left leg"
	  	elseif snd.parried_limb == "left leg" then
	   		right = "right leg"
	  	else
	   		right = "right leg"
		 		left = "left leg"
	  	end
	 	else -- target not prone
	  	for limb in pairs(limbs) do
		 	-- ignore last parried, last hit, and any limbs being resto'd
	   		if limbs[limb] ~= snd.parried_limb and limbs[limb] ~= snd.last_hit_limb and (limbs[limb] ~= snd.resto_limb or snd.limb_dmg[limbs[limb]] &gt;= 33.33) then
		  	-- if it's a leg that's about to break
	    		if (limbs[limb] == "left leg" or limbs[limb] == "right leg") and (snd.limb_dmg[limbs[limb]]+snd.limb_dmg_done &gt;= 33.3) then
		   		-- if we have vorpal and can use it with impunity
			 			if vorpal and not snd.used.shield and not snd.used.rebounding and snd.resto_limb ~= "none" then
			  			if right == "nothing" then
			   				right = limbs[limb]
			  			elseif left == "nothing" then
			   				left = limbs[limb]
			  			end
							-- otherwise leave the prepped leg alone!
		   			end
			 			-- if it's not a leg about to break, go for it
		  		elseif right == "nothing" then
		   			right = limbs[limb]
	    		elseif left == "nothing" and limbs[limb] ~= right then
	     			left = limbs[limb]
		  		end
	   		end
	  	end
	 end
	 if left == "nothing" then -- we only found one limb to hit
	  left = right -- double up!
	 end
	 -- end limb picking logic
	 -- on to attacking logic!
	 if snd.used.shield and snd.used.rebounding then -- baddie is turtling
    string = "raze "..snd.target -- raze has static balance cost
	 elseif snd.used.shield or snd.used.rebounding then
    string = "target nothing with left"..snd.sep.."target "..right.." with right"..snd.sep.."razestrike "..snd.target.." trauma"
	 -- here's the tricky part, we're checking for optimal conditions
	 -- we need vorpal ready, a leg about to break, and resto poultice off balance
	 elseif vorpal and snd.resto_limb ~= "none" and (snd.limb_dmg[left]+snd.limb_dmg_done &gt;= 33.3) and snd.limb_dmg[left] &lt; 33.33 and string.find(left, "leg") then
	  if left == "left leg" then right = "right leg" end
	  if left == "right leg" then right = "left leg" end
	  string = "target "..left.." with left"..snd.sep.."target "..right.." with right"..snd.sep.."empower right with stun"..snd.sep.."blade release right vorpal "..snd.target..snd.sep.."dsk "..snd.target.." trauma numbing"
	 -- we could also meet the same conditions, but on the other limb we picked
	 elseif vorpal and snd.resto_limb ~= "none" and (snd.limb_dmg[right]+snd.limb_dmg_done &gt;= 33.3) and snd.limb_dmg[right] &lt; 33.33 and string.find(right, "leg") then
	  if right == "left leg" then left = "right leg" end
	  if right == "right leg" then left = "left leg" end
	  string = "target "..left.." with left"..snd.sep.."target "..right.." with right"..snd.sep.."empower right with stun"..snd.sep.."blade release right vorpal "..snd.target..snd.sep.."dsk "..snd.target.." numbing trauma"
	 else -- we can't do a Big Bad Break, run normal logic
	  string = "target "..left.." with left"..snd.sep.."target "..right.." with right"..snd.sep.."dsk "..snd.target.." trauma trauma"
   end
	end
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
snd.send("engage "..snd.target)
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^limbs$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>ice blast limbs</name>
									<script>if snd.class == "Templar" then
snd.starting_attack()
function snd.attack_function()
 if not snd.waiting.queue then
  local string = ""
  local limbs = {"left leg", "right leg", "left arm", "right arm"}
  local left = "nothing"
  local right = "nothing"
	local vorpal = false
	local rupture = "none"
	if tonumber(gmcp.Char.Vitals.charge_left) &gt;= 140 and tonumber(gmcp.Char.Vitals.charge_right) &gt;= 140 then
	 vorpal = true
	else
	 vorpal = false
	end
	if table.contains(snd.target_has, "frozen") then
	 if snd.limb_dmg["left leg"] &gt;= snd.limb_dmg["right leg"] then
	  left = "left leg"
		right = "left leg"
	 else
	  left = "right leg"
		right = "right leg"
	 end
	else
	 for limb in pairs(limbs) do
	  if limbs[limb] ~= snd.parried_limb and limbs[limb] ~= snd.last_hit_limb then
	   if right == "nothing" then
	    right = limbs[limb]
	   elseif left == "nothing" and limbs[limb] ~= right and limbs[limb] ~= snd.last_hit_limb then
	    left = limbs[limb]
		 end
	  end
	 end
	end
  for limb in ipairs(limbs) do
	 if snd.limb_bruising[limbs[limb]] &gt;= 3 then
	  rupture = limbs[limb]
	 end
  end
  if snd.used.shield and snd.used.rebounding then
   string = "raze "..snd.target
	elseif snd.used.shield then
	 string = "target nothing with left"..snd.sep.."target "..left.." with right"..snd.sep.."razestrike "..snd.target.." trauma"
  elseif rupture ~= "none" then
	 string = "penance "..snd.target..snd.sep.."rupture "..snd.target.." "..rupture
	elseif snd.used.rebounding then
   string = "target nothing with left"..snd.sep.."target "..left.." with right"..snd.sep.."razestrike "..snd.target.." trauma"
	elseif tonumber(gmcp.Char.Vitals.charge_left) &gt;= 140 and not table.contains(snd.target_has, "frozen") then
	  string = "target "..left.." with left"..snd.sep.."target "..right.." with right"..snd.sep.."blade release left iceblast "..snd.target..snd.sep.."dsk "..snd.target.." trauma trauma"
	elseif tonumber(gmcp.Char.Vitals.charge_right) &gt;= 140 and not table.contains(snd.target_has, "frozen") then
	  string = "target "..left.." with left"..snd.sep.."target "..right.." with right"..snd.sep.."blade release right iceblast "..snd.target..snd.sep.."dsk "..snd.target.." trauma trauma"
	elseif vorpal then
	 string = "target "..left.." with left"..snd.sep.."target "..right.." with right"..snd.sep.."empower right with stun"..snd.sep.."blade release right vorpal "..snd.target..snd.sep.."dsk "..snd.target.." trauma trauma"
	else
   string = "target "..left.." with left"..snd.sep.."target "..right.." with right"..snd.sep.."dsk "..snd.target.." trauma trauma"
  end
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
snd.send("engage "..snd.target)
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^lb$</regex>
								</Alias>
							</AliasGroup>
							<Alias isActive="yes" isFolder="no">
								<name>charge</name>
								<script>if snd.class == "Templar" then
echo(gmcp.Char.Vitals.charge_right)
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^bc$</regex>
							</Alias>
						</AliasGroup>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Zealot</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Affliction Offenses</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
							</AliasGroup>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Damage Offenses</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
							</AliasGroup>
						</AliasGroup>
					</AliasGroup>
					<AliasGroup isActive="yes" isFolder="yes">
						<name>Shadow</name>
						<script></script>
						<command></command>
						<packageName></packageName>
						<regex></regex>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Archivist</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Damage Offenses</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>damage</name>
									<script>if snd.class == "Archivist" then
snd.starting_attack()
function snd.attack_function()
 local string = ""
 local bioessence = tonumber(gmcp.Char.Vitals.bio) 
 local hp = 100*(gmcp.Char.Vitals.hp/gmcp.Char.Vitals.maxhp)
 local biostring = "" 

      if bioessence &gt; 1 then
      	biostring = "bio stimulant"..snd.sep
      end


 if not snd.waiting.queue then
  if snd.used.shield then
   	string = "incite fork "..snd.target
	elseif theytumbling then
		string = "elicit return "..snd.target.." 3"
	elseif hp &lt;= 70 and bioessence &gt; 1 then
		if snd.defenses.def_ethereal.state ~= "deffed" then
			string = "bio ethereal"
		end
	elseif snd.my_incite == "nil" then
		string = "incite hex "..snd.target..snd.sep
	else
		string = "geo impress star"..snd.sep.."incite crux "..snd.target..snd.sep
  end
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^dmg$</regex>
								</Alias>
							</AliasGroup>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Afflictions</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>Basic group affs</name>
									<script>if snd.class == "Archivist" then
snd.starting_attack()
function snd.attack_function()
    if not snd.waiting.queue then
			local touse = {}
      local string = "" 
      local biostring = "" 
      local call = "" 
      local bioessence = tonumber(gmcp.Char.Vitals.bio) 
      local hp = 100*(gmcp.Char.Vitals.hp/gmcp.Char.Vitals.maxhp)
      local physcount = 0
      for aff in pairs(snd.physical_affs) do
          if table.contains(snd.target_has, snd.physical_affs[aff]) then
              physcount = physcount + 1
          end
      end
      local mentcount = 0 
      for aff in pairs(snd.mental_affs) do
          if table.contains(snd.target_has, snd.mental_affs[aff]) then
              mentcount = mentcount + 1
          end
      end
      if bioessence &gt; 1 then
      	biostring = "bio stimulant"..snd.sep
      end
				
			snd.giving = {
			"laxity",
			"faintness",
			"berserking",
			"recklessness",
			"masochism",
			"magnanimity",
			"epilepsy",
			"shyness",
			}
			
			snd.mutagen_giving = {
			"addiction",
			"allergies",
			"blisters",
			"lethargy",
			}
	
			for i in pairs(snd.giving) do
				if not snd.checkAff(snd.giving[i]) then
					if not table.contains(touse, snd.giving[i]) then
						table.insert(touse, snd.giving[i])
					end
				end
			end
			
      if snd.used.shield then
      	string = string.."incite fork "..snd.target
			elseif theytumbling then
				string = "elicit return "..snd.target.." 3"
			elseif hp &lt;= 70 and bioessence &gt; 1 then
				if snd.defenses.def_ethereal.state ~= "deffed" then
					string = "bio ethereal"
				end
			elseif physcount &gt;= 3 and mentcount &gt;= 3 and snd.my_mutagen then
        if snd.empowerready == true then
					string = "empower rafic"..snd.sep.."elicit unravel "..snd.target..snd.sep..biostring
        else
       	 string = "elicit unravel "..snd.target..snd.sep..biostring
				end
      elseif not snd.checkAff("mutagen") and bioessence &gt;1 then
				if snd.their_mutagen == false then
        	string = "bio infect "..snd.target.." with one"..snd.sep
				end
      elseif not snd.checksomeAffs({"dementia", "paranoia", "hallucinations"}, 2) and not snd.madnessused then
          if snd.empowerready then
            string = "empower jhako"..snd.sep.."geo impress swirl"..snd.sep.."elicit madness "..snd.target..snd.sep
					else
						string = "geo impress swirl"..snd.sep.."elicit madness "..snd.target..snd.sep
					end
			elseif snd.health_percent &lt;= 75 then
				if not snd.my_impress == "star" then
					string = "geo impress star"..snd.sep
				end
				string = string.."incite "..snd.shape_attacks[touse[1]].." "..snd.target..snd.sep
      else
				if not snd.my_impress == "hex" then 
					string = "geo impress hex"..snd.sep	
				end
				string = string.."incite "..snd.shape_attacks[touse[1]].." "..snd.target..snd.sep
      end

      if snd.toggles.affcalling and not snd.target_gone then
          string = call..string
					call = "wt Afflicting "..snd.target..": "..string
      end

      if string ~= snd.last_attack and not snd.waiting.queue then
          snd.last_attack = string
          snd.attack(snd.last_attack)
          snd.waiting.queue = true
          tempTimer(snd.delay(), [[snd.waiting.queue = false]])
      end
 
    end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^aff$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>Sorta 1v1 Build</name>
									<script>if snd.class == "Archivist" then
snd.starting_attack()
function snd.attack_function()
    if not snd.waiting.queue then
			local touse = {}
      local string = "" 
      local biostring = "" 
      local call = "" 
      local bioessence = tonumber(gmcp.Char.Vitals.bio) 
      local hp = 100*(gmcp.Char.Vitals.hp/gmcp.Char.Vitals.maxhp)
      local physcount = 0
      for aff in pairs(snd.physical_affs) do
          if table.contains(snd.target_has, snd.physical_affs[aff]) then
              physcount = physcount + 1
          end
      end
      local mentcount = 0 
      for aff in pairs(snd.mental_affs) do
          if table.contains(snd.target_has, snd.mental_affs[aff]) then
              mentcount = mentcount + 1
          end
      end
      if bioessence &gt; 1 then
      	biostring = "bio stimulant"..snd.sep
      end
				
			snd.giving = {
				"dizziness",
        "faintness",
        "epilepsy",
        "shyness",
        "laxity",
        "lovers_effect",
        "peace",
        "magnanimity",
        "merciful",
        "masochism",
        "berserking",
        "recklessness",
			}
			
			snd.mutagen_giving = {
			"addiction",
			"allergies",
			"blisters",
			"lethargy",
			}
			
		--addiction = "phys",
		--allergies = "one",
		--blisters = "phys4",
		--lethargy = "phys3",
	
			for i in pairs(snd.giving) do
				if not snd.checkAff(snd.giving[i]) then
					if not table.contains(touse, snd.giving[i]) then
						table.insert(touse, snd.giving[i])
					end
				end
			end
			
      cecho("\n&lt;red&gt;"..physcount.." "..mentcount)
      
      if snd.used.shield then
      	string = string.."geo impress hex"..snd.sep.."incite fork "..snd.target
			elseif physcount &gt; 2 and mentcount &gt; 2 and snd.my_mutagen then
        if snd.empowerready then
					string = "empower rafic"..snd.sep.."elicit unravel "..snd.target..snd.sep
        else
       		string = "elicit unravel "..snd.target..snd.sep
				end
      elseif not snd.my_mutagen and bioessence &gt; 0 then
				string = "bio infect "..snd.target.." with phys"..snd.sep
			elseif physcount &gt;= 3 and mentcount == 2 and snd.my_mutagen then
				if not snd.checkAff("addiction") and bioessence &gt; 0 then
					string = "empower jhako"..snd.sep.."geo impress swirl"..snd.sep.."bio flare "..snd.target..snd.sep
				end
			elseif not snd.checkAff("patterns") and snd.checksomeAffs({"lemniscate","matrix"}, 1) then
				string = "empower rafic"..snd.sep.."geo pattern "..snd.target..snd.sep
      elseif not snd.checksomeAffs({"dementia", "paranoia", "hallucinations"}, 1) and not snd.madnessused then
        if snd.empowerready then
          string = "empower jhako"..snd.sep.."geo impress swirl"..snd.sep.."elicit madness "..snd.target..snd.sep
				else
					string = "geo impress swirl"..snd.sep.."elicit madness "..snd.target..snd.sep
				end
			elseif physcount &gt; 1 and mentcount &lt; 2 then
				string = "empower ef'tig"..snd.sep.."geo impress hex"..snd.sep.."elicit changeheart "..snd.target.." ally"..snd.sep
			elseif snd.checksomeAffs({"dizziness", "faintness", "epilepsy", "shyness"}, 4) and not snd.squareseal then
				string = "geo impress hex"..snd.sep.."geo sealing square " ..snd.target.. "" ..snd.sep
				snd.squareseal = true
 			elseif snd.checksomeAffs({"laxity", "lovers_effect", "peace", "magnanimity"}, 4) and not snd.triangleseal then
				string = "geo impress hex"..snd.sep.."geo sealing triangle " ..snd.target.. "" ..snd.sep
				snd.triangleseal = true
 			elseif snd.checksomeAffs({"merciful", "masochism", "berserking", "recklessness"}, 4) and not snd.circleseal then
				string = "geo impress hex"..snd.sep.."geo sealing circle " ..snd.target.. "" ..snd.sep
				snd.circleseal = true		
			elseif (mentcount == 2 or mentcount == 7) and not snd.checkAff("vomiting") and not snd.madnessused then 
				string = "empower jhako" ..snd.sep.. "geo impress bloom" ..snd.sep.. "elicit madness " ..snd.target.. "" ..snd.sep
			elseif (mentcount == 4 or mentcount == 9) and not snd.checkAff("vomiting") then 
				if not snd.checksomeAffs({"dizziness", "faintness", "epilepsy", "shyness", "laxity", "lovers_effect", "peace", "magnanimity", "merciful", "masochism", "berserking", "recklessness"}, 1) then
					if not snd.conjoin then
						string = "empower jhako"..snd.sep.."geo impress bloom" ..snd.sep.."geo conjoin"..snd.sep.."incite "..snd.shape_attacks[touse[1]].." "..snd.target..snd.sep
					else
						string = "empower jhako"..snd.sep.."geo impress bloom" ..snd.sep.."incite "..snd.shape_attacks[touse[1]].." "..snd.target..snd.sep
					end
				end
			elseif mentcount &gt; 6 and physcount == 1 and not snd.checkAff("addiction") and bioessence &gt; 0 and not snd.growth then
				string = "empower jhako"..snd.sep.."geo impress bloom" ..snd.sep.."bio growth " ..snd.target.. "" ..snd.sep
			elseif mentcount &gt; 5 and physcount &lt; 2 and not snd.my_incite == "Hex"  then
				string = "empower jhako"..snd.sep.."geo impress star" ..snd.sep.. "incite hex " ..snd.target.. "" ..snd.sep
			elseif snd.checksomeAffs({"faintness", "dizziness"}, 2) or snd.checksomeAffs({"shyness", "laxity"}, 1) and not snd.checkAff("lemniscate") then
				string = "empower ef'tig"..snd.sep.."geo impress hex" ..snd.sep.. "incite lemniscate " ..snd.target.. "" ..snd.sep
			elseif snd.checkAff("lemniscate") and not snd.checkAff("matrix") then
				string = "empower jhako"..snd.sep.."geo impress hex" ..snd.sep.. "geo matrix " ..snd.target.. "" ..snd.sep
			elseif not snd.checksomeAffs({"dizziness", "faintness", "epilepsy", "shyness", "laxity", "lovers_effect", "peace", "magnanimity", "merciful", "masochism", "berserking", "recklessness"}, 1) then
				if not snd.conjoin then
					string = "geo conjoin"..snd.sep.."incite "..snd.shape_attacks[touse[1]].." "..snd.target..snd.sep
				else
					string = "geo impress hex"..snd.sep.."incite "..snd.shape_attacks[touse[1]].." "..snd.target..snd.sep
				end
			else
				string = "geo impress hex"..snd.sep.."incite "..snd.shape_attacks[touse[1]].." "..snd.target..snd.sep

			end

      if snd.toggles.affcalling and not snd.target_gone then
          string = call..string
					call = "wt Afflicting "..snd.target..": "..string
      end

      if string ~= snd.last_attack and not snd.waiting.queue then
          snd.last_attack = string
          snd.attack(snd.last_attack)
          snd.waiting.queue = true
          tempTimer(snd.delay(), [[snd.waiting.queue = false]])
      end
 
    end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^kll$</regex>
								</Alias>
							</AliasGroup>
						</AliasGroup>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Carnifex</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Wielding</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>wield bashing</name>
									<script>if snd.class == "Carnifex" then
snd.send("quickwield both greatmaul")
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^wbsh$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>wield pvp</name>
									<script>if snd.class == "Carnifex" then
snd.send("quickwield both bardiche")
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^wpvp$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>wield limbs</name>
									<script>if snd.class == "Carnifex" then
snd.send("quickwield both warhammer")
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^wlb$</regex>
								</Alias>
							</AliasGroup>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Savagery</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>impale</name>
									<script>if snd.class == "Carnifex" then
if matches[2] == "" then
 snd.attack("pole skewer "..snd.target)
else
 snd.attack("pole skewer "..matches[2])
end
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^imp(.*)$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>disembowel</name>
									<script>if snd.class == "Carnifex" then
 snd.attack("pole wrench")
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^db$</regex>
								</Alias>
							</AliasGroup>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Deathlore</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>rez</name>
									<script>if snd.class == "Carnifex" then
snd.toggles.attacking = false
snd.send("qeb soul call "..matches[2])
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^rez (\w+)$</regex>
								</Alias>
							</AliasGroup>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Warhounds</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
							</AliasGroup>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Affliction Offenses</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>venoms only</name>
									<script>if snd.class == "Carnifex" then
snd.giving = {
"paresis",
"clumsiness",
"asthma",
"slickness",
"stupidity",
"anorexia",
"allergies",
--"weariness",
--"haemophilia",
--"sensitivity",
--"vomiting",
--"recklessness",
--"dizziness",
--"voyria",
}
snd.starting_attack()
function snd.attack_function()
 if not snd.waiting.queue then
--display(snd.target_has)
  local string = ""
  local left = "none"
  local right = "none"
  for i in pairs(snd.giving) do
   if not table.contains(snd.target_has, snd.giving[i]) then
    if right == "none" then
     right = snd.effects[snd.giving[i]]
    elseif left == "none" then
     left = snd.effects[snd.giving[i]]
    end
   end
  end
  if left == "none" then
   left = "epteth"
  end
  if right == "none" then
   right = "epseth"
  end
	x = ""
  if snd.have_raloth then
    string = "pole hook "..sndtarget
  elseif snd.used.rebounding and snd.used.shield then
   string = "raze "..snd.target
  elseif snd.used.rebounding or snd.used.shield then
   string = "pole razehack "..snd.target.." "..right
	 if snd.toggles.affcalling and not snd.target_gone then
	  x = "wt Afflicting "..snd.target..": "..right..snd.sep
	 end
  else
   string = "pole spinslash "..snd.target.." "..left.." "..right
	 if snd.toggles.affcalling and not snd.target_gone then
	  x = "wt Afflicting "..snd.target..": "..left..", "..right..snd.sep
	 end
	end
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^vn$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>affs</name>
									<script>if snd.class == "Carnifex" then
snd.giving = {
"paresis",
"asthma",
"clumsiness",
"slickness",
"stupidity",
"anorexia",
"dizziness",
--"weariness",
--"sensitivity",
--"haemophilia",
--"vomiting",
--"allergies",
--"recklessness",
--"voyria",
}
snd.hound_queue = {
"dizziness",
"berserking",
"weariness",
"impairment",
}
snd.starting_attack()
function snd.attack_function()
 snd.handle_hounds()
 if not snd.waiting.queue then
--display(snd.target_has)
  local string = ""
  local left = "none"
  local right = "none"
  for i in pairs(snd.giving) do
   if not table.contains(snd.target_has, snd.giving[i]) and snd.giving[i] ~= snd.implant then
    if right == "none" then
     right = snd.effects[snd.giving[i]]
    elseif left == "none" then
     left = snd.effects[snd.giving[i]]
    end
   end
  end
  if left == "none" then
   left = "epseth"
  end
  if right == "none" then
   right = "epseth"
  end
	x = ""
  if snd.have_raloth then
    string = "pole hook "..sndtarget
  elseif snd.used.rebounding and snd.used.shield then
   string = "raze "..snd.target
  elseif snd.used.rebounding or snd.used.shield then
   string = "pole razehack "..snd.target.." "..right
	 if snd.toggles.affcalling and not snd.target_gone then
	  x = "wt Afflicting "..snd.target..": "..right..snd.sep
	 end
  else
	 if snd.target_prone and snd.target_locked() then
	  if table.contains(snd.target_has, "crushed_chest") then
		 string = "hammer pulverize "..snd.target
		else
	   string = "hammer crush "..snd.target.." chest"
		end
	 else
    string = "pole spinslash "..snd.target.." "..left.." "..right
	  if snd.toggles.affcalling and not snd.target_gone then
	   x = "wt Afflicting "..snd.target..": "..left..", "..right..snd.sep
	  end
	 end
	end
	if snd.soul &lt;= 80 and not table.contains(snd.target_has, "soul_disease") then
	 string = string..snd.sep.."soul disease "..snd.target
	elseif snd.soul &lt;= 90 and not table.contains(snd.target_has, "soul_wraith") then
	 string = string..snd.sep.."soul wraith "..snd.target
	elseif #snd.target_has &gt;= 12 and snd.balance.soulpoison then
	 string = string..snd.sep.."soul poison "..snd.target
	elseif snd.soul &lt;= 75 and snd.balance.implant and not table.contains(snd.target_has, "soul_implant") then
	 if snd.target_locked() then
	  string = string..snd.sep.."soul implant "..snd.target.." aconite slike"
	 end
	end
	string = x..string..snd.sep.."hammer throw "..snd.target
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^aff$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>legs</name>
									<script>if snd.class == "Carnifex" then
snd.hound_queue = {
"frozen",
}
snd.starting_attack()
function snd.attack_function()
 snd.handle_hounds()
 if not snd.waiting.queue then
  if snd.have_raloth then
    string = "pole hook "..sndtarget
  elseif snd.used.rebounding or snd.used.shield then
   string = "raze "..snd.target
  elseif snd.target_prone then
   if table.contains(snd.target_has, "crushed_chest") then
	  string = "hammer pulverize "..snd.target
	 else
	  string = "hammer crush "..snd.target.." chest"
	 end
  else
   string = "pole spinslash "..snd.target.." epseth epseth"
  end
	if snd.soul &lt;= 90 then
	 string = string..snd.sep.."soul distort "..snd.target
	end
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
	end
 end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^lgs$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>magic</name>
									<script>if snd.class == "Carnifex" then
snd.giving = {
"paresis",
"asthma",
"weariness",
"slickness",
"stupidity",
"anorexia",
"dizziness",
--"clumsiness",
--"sensitivity",
--"haemophilia",
--"vomiting",
--"allergies",
--"recklessness",
--"voyria",
}
snd.hound_queue = {
"stupidity",
"weariness",
"confusion",
}
snd.starting_attack()
function snd.attack_function()
 snd.handle_hounds()
 if not snd.waiting.queue then
--display(snd.target_has)
  left = "none"
  right = "none"
  for i in pairs(snd.giving) do
   if not table.contains(snd.target_has, snd.giving[i]) and snd.giving[i] ~= snd.implant then
    if right == "none" then
     right = snd.effects[snd.giving[i]]
    elseif left == "none" then
     left = snd.effects[snd.giving[i]]
    end
   end
  end
  if left == "none" then
   left = "epseth"
  end
  if right == "none" then
   right = "epseth"
  end
	x = ""
  if snd.have_raloth then
    string = "pole hook "..sndtarget
  elseif snd.used.rebounding and snd.used.shield then
   string = "raze "..snd.target
  elseif snd.used.rebounding or snd.used.shield then
   string = "pole razehack "..snd.target.." "..right
	 if snd.toggles.affcalling and not snd.target_gone then
	  x = "wt Afflicting "..snd.target..": "..right..snd.sep
	 end
  else
	 if snd.target_prone then
	  if table.contains(snd.target_has, "crushed_chest") then
		 string = "hammer pulverize "..snd.target
		else
	   string = "hammer crush "..snd.target.." chest"
		end
	 else
    string = "pole spinslash "..snd.target.." "..left.." "..right
	  if snd.toggles.affcalling and not snd.target_gone then
	   x = "wt Afflicting "..snd.target..": "..left..", "..right..snd.sep
	  end
	 end
	end
	if snd.soul &lt;= 80 and not table.contains(snd.target_has, "soul_disease") then
	 string = string..snd.sep.."soul disease "..snd.target
	elseif snd.soul &lt;= 90 and not table.contains(snd.target_has, "soul_wraith") then
	 string = string..snd.sep.."soul wraith "..snd.target
	elseif #snd.target_has &gt;= 12 and snd.balance.soulpoison then
	 string = string..snd.sep.."soul poison "..snd.target
	elseif snd.soul &lt;= 75 and snd.balance.implant and not table.contains(snd.target_has, "soul_implant") then
	 if snd.target_locked() and table.contains(snd.target_has, "stupidity") then
	  string = string..snd.sep.."soul implant "..snd.target.." kalmia gecko"
	 end
	elseif snd.soul &lt;= 20 then
	 string = string..snd.sep.."soul sacrifice "..snd.target
	end
	string = x..string
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^mg$</regex>
								</Alias>
							</AliasGroup>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Damage Offenses</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>damage</name>
									<script>if snd.class == "Carnifex" then
snd.starting_attack()
function snd.attack_function()
 local string = ""
 if not snd.waiting.queue then
  if snd.have_raloth then
    string = "pole hook "..sndtarget
  elseif snd.used.shield then
		string = "soul erode "..snd.target
  
	elseif theyran then
		string = "hammer throw "..snd.target
	
	else
   	string = "hammer doublebash "..snd.target
  end
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^dmg$</regex>
								</Alias>
							</AliasGroup>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Limb Offenses</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>limbs</name>
									<script>if snd.class == "Carnifex" then
snd.hound_queue = {
"frozen",
}
snd.starting_attack()
function snd.attack_function()
 snd.handle_hounds()
 if not snd.waiting.queue then
  -- list what limbs to hit
  limbs = {"left leg", "right leg", "left arm", "right arm"}
	-- check if we can pulverize now!
  if snd.have_raloth then
    string = "pole hook "..sndtarget
  elseif table.contains(snd.target_has, "crushed_chest") and snd.target_prone then
   string = "hammer pulverize "..snd.target
	-- or if we should set up pulverize...
	elseif snd.target_prone and snd.resto_limb ~= "none" then
	 string = "hammer crush "..snd.target.." chest"
  else -- can't pulverize, needs logic
	 -- pick what limbs to hit
	 left = "nothing"
	 right = "nothing"
	 if snd.target_prone then -- focus legs hard on prone
	  if snd.parried_limb == "right leg" then
	   right = "left leg"
	  elseif snd.parried_limb == "left leg" then
	   right = "right leg"
	  else
	   right = "right leg"
		 left = "left leg"
	  end
	 -- are the legs prepped?
	 elseif snd.limb_dmg["right leg"] &lt; 33.33 and (snd.limb_dmg["right leg"] + 7.41 &gt;= 33.33) and snd.limb_dmg["left leg"] &lt; 33.33 and (snd.limb_dmg["left leg"] + 7.41 &gt;= 33.33) and not snd.used.shield and not snd.used.rebounding then
		 string = "target left leg with left"..snd.sep.."target right leg with right"..snd.sep.."hammer doublebash "..snd.target
	 else -- target not prone, legs not prepped
	  for limb in pairs(limbs) do
		 -- ignore last parried, last hit, and any limbs being resto'd
	   if limbs[limb] ~= snd.parried_limb and limbs[limb] ~= snd.last_hit_limb and (limbs[limb] ~= snd.resto_limb or snd.limb_dmg[limbs[limb]] &gt;= 33.33) then
		  -- if it's a leg that's about to break
	    if (limbs[limb] == "left leg" or limbs[limb] == "right leg") and (snd.limb_dmg[limbs[limb]]+snd.limb_dmg_done &gt;= 33.3) then
		   -- don't do anything!
			 -- if it's not a leg about to break, go for it
		  elseif right == "nothing" then
		   right = limbs[limb]
	    elseif left == "nothing" and limbs[limb] ~= right then
	     left = limbs[limb]
		  end
	   end
	  end
	  if left == "nothing" then -- we only found one limb to hit
	   left = right -- double up!
	  end
	  -- end limb picking logic
	  -- on to attacking logic!
	  if snd.used.shield or snd.used.rebounding then -- baddie is turtling
     string = "raze "..snd.target -- raze has static balance cost
	  else
	   string = "hammer doublebash "..snd.target.." "..left.." "..right
		 if snd.soul &lt;= 80 and not table.contains(snd.target_has, "glasslimb") then
		  string = string..snd.sep.."soul frailty "..snd.target
		 end
    end
	 end
	end
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^limbs$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>legs</name>
									<script>if snd.class == "Carnifex" then
snd.hound_queue = {
"frozen",
}
snd.starting_attack()
function snd.attack_function()
 snd.handle_hounds()
 if not snd.waiting.queue then
  -- list what limbs to hit
  limbs = {"left leg", "right leg", "left arm", "right arm"}
	-- check if we can pulverize now!
  if snd.have_raloth then
    string = "pole hook "..sndtarget
  elseif table.contains(snd.target_has, "crushed_chest") and snd.target_prone then
   string = "hammer pulverize "..snd.target
	-- or if they're prone and staying that way
	elseif snd.target_prone and ((snd.limb_dmg["left leg"] &gt;= 33.33 and snd.limb_dmg["right leg"] &gt;= 33.33) or snd.limb_dmg["left leg"] &gt;= 66.66 or snd.limb_dmg["right leg"] &gt;= 66.66) then
	 -- are they distorted?
	 if table.contains(snd.target_has, "distortion") and snd.soul &lt;= 70 then
	  string = "hammer crush "..snd.target.." chest"
	 -- do we need to raze?
	 elseif snd.used.shield or snd.used.rebounding then
	  string = "raze "..snd.target
	 -- can they parry?
	 else
	  string = "hammer crush "..snd.target.." chest"
	 end
	elseif snd.target_prone then -- at least they're prone
	 if (snd.used.shield or snd.used.rebounding) and not table.contains(snd.target_has, "distortion") then -- bleh!
	  string = "raze "..snd.target
	 else -- make sure they stay down
	  if table.contains(snd.target_has, "frozen") or table.contains(snd.target_has, "distortion") then
		 string = "hammer doublebash "..snd.target.." left leg right leg"
	  elseif snd.parried_limb == "left leg" then
		 string = "hammer doublebash "..snd.target.."right leg right leg"
		elseif snd.parried_limb == "right leg" then
		 string = "hammer doublebash "..snd.target.."left leg left leg"
		else
	   string = "hammer doublebash "..snd.target.." left leg right leg"
		end
	 end
	-- did they apply resto?
	--elseif not snd.used.shield and not snd.used.rebounding and snd.resto_limb ~= "none" then
	-- string = "target nothing with left"..snd.sep.."target nothing with right"..snd.sep.."pole spinslash "..snd.target.." epseth epseth"
  else -- can't pulverize, needs logic
	 -- pick what limbs to hit
	 left = "nothing"
	 right = "nothing"
	 if snd.target_prone then -- focus legs hard on prone
	  if snd.parried_limb == "right leg" then
	   right = "left leg"
	  elseif snd.parried_limb == "left leg" then
	   right = "right leg"
	  else
	   right = "right leg"
		 left = "left leg"
	  end
	 -- are the legs prepped?
	 elseif snd.limb_dmg["right leg"] &lt; 33.33 and (snd.limb_dmg["right leg"] + 7.41 &gt;= 33.33) and snd.limb_dmg["left leg"] &lt; 33.33 and (snd.limb_dmg["left leg"] + 7.41 &gt;= 33.33) and not snd.used.shield and not snd.used.rebounding then
    string = "target left leg with left"..snd.sep.."target right leg with right"..snd.sep.."hammer doublebash "..snd.target
	 else -- target not prone, legs not prepped
	  for limb in pairs(limbs) do
		 -- ignore last parried, last hit, and any limbs being resto'd
	   if limbs[limb] ~= snd.parried_limb and limbs[limb] ~= snd.last_hit_limb and (limbs[limb] ~= snd.resto_limb or snd.limb_dmg[limbs[limb]] &gt;= 33.33) then
		  if right == "nothing" then
		   right = limbs[limb]
	    elseif left == "nothing" and limbs[limb] ~= right then
	     left = limbs[limb]
		  end
	   end
	  end
	  if left == "nothing" then -- we only found one limb to hit
	   left = right -- double up!
	  end
	  -- end limb picking logic
	  -- on to attacking logic!
	  if snd.used.shield or snd.used.rebounding then -- baddie is turtling
     string = "raze "..snd.target -- raze has static balance cost
	  else
	   string = "hammer doublebash "..snd.target.." "..left.." "..right
    end
	 end
	end
	if snd.soul &lt;= 90 and not table.contains(snd.target_has, "soul_wraith") then
	 string = string..snd.sep.."soul wraith "..snd.target
	elseif snd.soul &lt;= 90 then
	 string = string..snd.sep.."soul distort "..snd.target
  elseif snd.soul &lt;= 80 and not table.contains(snd.target_has, "glasslimb") then
   string = string..snd.sep.."soul frailty "..snd.target
  end
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^legs$</regex>
								</Alias>
							</AliasGroup>
						</AliasGroup>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Indorani</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Damage Offenses</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>damage</name>
									<script>if snd.class == "Indorani" then
snd.starting_attack()
function snd.attack_function()
 local string = ""
 if not snd.waiting.queue then
  if snd.used.shield then
		string = "touch hammer "..snd.target
  else
   	string = "flick bonedagger "..snd.target
  end
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^dmg$</regex>
								</Alias>
							</AliasGroup>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Afflictions</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>Group Affliction</name>
									<script>if snd.class == "Indorani" then
snd.giving_sun = {
"paresis",
"asthma",
"sensitivity",
"clumsiness",
"vomiting",
"lethargy",
}
snd.giving_moon = {
		"impatience",
		"stupidity",
		"confusion",
		"recklessness",	
		"anorexia",
		"epilepsy",
}
snd.starting_attack()

function snd.attack_function()
 
 local string = ""
 local sun = "none"
 local moon = "none"
 
 if not snd.waiting.queue then
  if snd.used.shield then
		string = "touch hammer "..snd.target
	elseif snd.need_leech_aura == true then
		string = "leech "..snd.target
	else
	  if snd.balance.sun then
   		for i in pairs(snd.giving_sun) do
	  		if not snd.checkAff(snd.giving_sun[i]) and sun == "none" then
	   			sun = snd.giving_sun[i]
	  		end
	 		end
		end
		if snd.balance.moon then
			for i in pairs(snd.giving_moon) do
	  		if not snd.checkAff(snd.giving_moon[i]) and moon == "none" then
	   			moon = snd.giving_moon[i]
	  		end
	 		end
		end
		if hasSkill("Imprint") then
			if sun ~= "none" and moon ~= "none" then
				string = string.."outc blank as sun"..snd.sep.."outc blank as moon"..snd.sep.."fling sun "..sun.." and moon "..moon..snd.target..snd.sep
 			end
		else
			if hasSkill("Sun") then
				string = string.."outc sun"..snd.sep.."fling sun "..sun..snd.target..snd.sep
			end
  	end
	end
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^aff$</regex>
								</Alias>
							</AliasGroup>
						</AliasGroup>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Teradrim</name>
							<script>--If checking for sand in room use the following 

-- table.contains(gmcp.Room.Info.details, "sand")</script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Damage Offenses</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>damage</name>
									<script>if snd.class == "Teradrim" then
snd.starting_attack()
function snd.attack_function()
 local sandstorm = tonumber(gmcp.Char.Vitals.sandstorm) -- not used but useful for building
 local string = ""
 if not snd.waiting.queue then
 		if snd.target_impaled then
        string = "earth stonevice"
     elseif snd.used.shield or snd.used.rebounding and sandstorm &gt;= 5 then
        string = "sand slice "..snd.target.." storm"
    elseif snd.used.shield or snd.used.rebounding then
        string = "earth stoneblast "..snd.target
     elseif theytumbling then
        string = "earth impale "..snd.target
    elseif snd.balance.momentum then
       string = "prepare earthenwill"..snd.sep.."earth momentum"..snd.sep.."earth batter "..snd.target
    else 
       string = "prepare earthenwill"..snd.sep.."earth batter "..snd.target
  	end
		
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^dmg$</regex>
								</Alias>
							</AliasGroup>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Afflictions</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>Group Mode</name>
									<script>if snd.class == "Teradrim" then
snd.starting_attack()
function snd.attack_function()
 local sandstorm = tonumber(gmcp.Char.Vitals.sandstorm) -- not used but useful for building
 local string = ""
 if not snd.waiting.queue then
 
      if snd.target_impaled then
        string = "earth stonevice"
      elseif snd.used.shield or snd.used.rebounding and sandstorm &gt;=5 then
        string = "sand slice "..snd.target.." storm"
    	elseif snd.used.shield or snd.used.rebounding then
        string = "earth stoneblast "..snd.target
     	elseif theytumbling then
        string = "earth impale "..snd.target
    	elseif not snd.checkAff("sandrot") and sandstorm &gt;=5 then
        string = "sand curse "..snd.target.. " storm"
      elseif not snd.checksomeAffs({"a broken left arm", "a broken right arm", "a broken left leg", "a broken right leg"},1) then
        string = "sand scourge "..snd.target
   	 	elseif snd.balance.momentum then
       string = "prepare earthenwill"..snd.sep.."earth momentum"..snd.sep.."earth batter "..snd.target
    	else 
       string = "prepare earthenwill"..snd.sep.."earth batter "..snd.target
  		end
			
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^aff$</regex>
								</Alias>
							</AliasGroup>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Limbs</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>Limbs Mode</name>
									<script>if snd.class == "Teradrim" then -- Note that this is intended for groups, not 1v1
  snd.starting_attack()
  function snd.attack_function()
    local sandstorm = tonumber(gmcp.Char.Vitals.sandstorm) -- not used but useful for building
    local string = ""
    if not snd.waiting.queue then
 		   if snd.used.shield or snd.used.rebounding and sandstorm &gt;= 5 then
         string = "sand slice "..snd.target.." storm"
       elseif snd.used.shield or snd.used.rebounding then
         string = "earth stoneblast "..snd.target
       elseif theytumbling then
         string = "earth impale "..snd.target
       elseif snd.proned() then
         string = "earth pulp "..snd.target
       elseif not snd.lev_gone then
         string = "earth overhand "..snd.target
       elseif not snd.proned() and snd.lev_gone then
         string = "earth shockwave "..snd.target      
    	 elseif not snd.checkAff("sandrot") and sandstorm &gt;=5 then
         string = "sand curse "..snd.target.. " storm"
       elseif not snd.checkAff("sandrot") then
         string = "sand curse "..snd.target
       elseif not snd.checksomeAffs({"a broken left arm", "a broken right arm", "a broken left leg", "a broken right leg"},1) then
         string = "sand scourge "..snd.target
       elseif snd.balance.momentum then
         string = "prepare earthenwill"..snd.sep.."earth momentum"..snd.sep.."earth batter "..snd.target
       else 
         string = "prepare earthenwill"..snd.sep.."earth batter "..snd.target
  	   end
		
       if string ~= snd.last_attack and not snd.waiting.queue then
         snd.last_attack = string
         snd.attack(snd.last_attack)
         snd.waiting.queue = true
         tempTimer(snd.delay(), [[snd.waiting.queue = false]])
       end
    end
  end
  
  snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^limbs$</regex>
								</Alias>
							</AliasGroup>
						</AliasGroup>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Sciomancer</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Affliction</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>Afflictions</name>
									<script>if snd.class == "Sciomancer" then
snd.starting_attack()
function snd.attack_function()
 local string = ""
 if not snd.waiting.queue then
	if snd.used.shield then
   	string = string.."cast hew "..snd.target
  elseif not snd.checkAff("gloom") then
		if hasSkill("Fever") then
			if gmcp.Char.Vitals.shadowprice &lt; "2" then
				string = string.."shadowprice gloom "..snd.target..snd.sep.."cast fever "..snd.target
			else
				string = string.."cast gloom "..snd.target
			end
		else
			if gmcp.Char.Vitals.shadowprice &lt; "2" then
				string = string.."shadowprice gloom "..snd.target
			else
				string = string.."cast gloom "..snd.target
			end
		end
	elseif not snd.checksomeAffs({"clumsiness", "weariness", "lethargy", "paresis"}, 1) then
		if gmcp.Char.Vitals.shadowprice &lt; "2" then
			string = string.."shadowprice ruin "..snd.target
		else
			string = string.."cast ruin "..snd.target
		end
  elseif snd.checkAff("sight") and not snd.checkAff("voidtrapped") then
		string = string.."cast voidgaze " ..snd.target..snd.sep
	elseif not snd.checksomeAffs({"vomiting", "haemophilia"}, 1) and hasSkill("Fever") then
		string = string.."cast fever "..snd.target
  else
   	string = string.."cast scourge "..snd.target
  end
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^aff$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>Sorta 1v1 Build</name>
									<script>if snd.class == "Sciomancer" then
snd.starting_attack()
function snd.attack_function()
 local string = ""
 if not snd.waiting.queue then
 
 local shadestring = "order shadeling kill "..snd.target..snd.sep
 
 local shadowprice = tonumber(gmcp.Char.Vitals.shadowprice)
 
		local total_aff_count = 0
    for aff in pairs(snd.all_affs) do
        if table.contains(snd.target_has, snd.all_affs[aff]) then
            total_aff_count = total_aff_count + 1
        end
    end
 
 local scourgecount = 0 
   for aff in pairs(snd.scourge_affs) do
     if table.contains(snd.target_has, snd.scourge_affs[aff]) then
       scourgecount = scourgecount + 1
     end
   end

	if tonumber(snd.repay) &lt; 2 and hp &gt; 60 and shadowprice &gt; 0 then
		string = string.."cast repay" ..snd.sep
	end 

 
	if snd.used.shield then
		if shadowprice &lt; "2" then
   		string = string.."shadowprice hew "..snd.target..snd.sep
		elseif snd.defenses.def_shadow_mantle.state == "deffed" and shadowprice &lt; "4" then
			string = string.."shadowprice hew "..snd.target..snd.sep
		else
			string = string.."cast hew "..snd.target
		end
	
	elseif not snd.checkAff("imbued") and gmcp.Char.Vitals.singularity ~= "" then
		string = string..shadestring.."gravity imbue "..snd.target..snd.sep
	elseif snd.gravity == 0 and gmcp.Char.Vitals.singularity ~= "" and not snd.checkAff("impede") then
		string = string..shadestring.."gravity grip "..snd.target..snd.sep
	elseif snd.gravity &gt;= 0 and gmcp.Char.Vitals.singularity ~= "" and not snd.checkAff("impede") then
		string = string..shadestring.."gravity impede "..snd.target..snd.sep
	elseif not snd.checkAff("shaderot_benign") then
		if snd.defenses.def_shadow_mantle.state == "deffed" and shadowprice &lt; "4" then
			string = string.."shadowprice rot " ..snd.target..snd.sep
		elseif shadowprice &lt; "3" then
			string = string.."shadowprice rot " ..snd.target..snd.sep
		else
			string = string.."cast rot " ..snd.target..snd.sep
		end
	elseif not snd.checkAff("sight") and not snd.checkAff("voidgaze") then
		if snd.defenses.def_shadow_mantle.state == "deffed" and shadowprice &lt; "4" then
			string = string.."shadowprice voidgaze " ..snd.target..snd.sep
		elseif shadowprice &lt; "3" then
			string = string.."shadowprice voidgaze " ..snd.target..snd.sep
		end
	elseif snd.balance.shadowsphere and not snd.checkAff("shadowsphere") and total_aff_count &gt; 4 then
		if snd.defenses.def_shadow_mantle.state == "deffed" and shadowprice &lt; "4" then
			string = string.."shadowprice sphere " ..snd.target..snd.sep
		elseif shadowprice &lt; "3" then
			string = string.."shadowprice sphere " ..snd.target..snd.sep
		else
			string = string.."cast sphere " ..snd.target..snd.sep
		end
	elseif not snd.checkAff("gloom") then
		if snd.defenses.def_shadow_mantle.state == "deffed" and shadowprice &lt; "4" then
			string = string..shadestring.."shadowprice gloom "..snd.target
		elseif shadowprice &lt; "3" then
			string = string..shadestring.."shadowprice gloom "..snd.target	
		else
			string = string..shadestring.."cast gloom "..snd.target
		end
	elseif scourgecount &lt; 5 and snd.checkAff("shadowsphere") then
		if snd.defenses.def_shadow_mantle.state == "deffed" and shadowprice &lt; "4" then
			string = string.."shadowprice scourge " ..snd.target..snd.sep
		elseif shadowprice &lt; "3" then
			string = string.."shadowprice scourge " ..snd.target..snd.sep
		else
			string = string.."cast scourge " ..snd.target..snd.sep
		end
	elseif snd.checksomeAffs({"haemophilia", "nyctophobia"}, 2) then
		if not snd.checksomeAffs({"dementia", "exhausted"}, 1) then
			if snd.defenses.def_shadow_mantle.state == "deffed" and shadowprice &lt; "4" then
				string = string.."shadowprice falter " ..snd.target..snd.sep
			elseif shadowprice &lt; "3" then
				string = string.."shadowprice falter " ..snd.target..snd.sep
			else
				string = string.."cast falter " ..snd.target..snd.sep
			end
		else
			string = string.."cast falter " ..snd.target..snd.sep
		end
	elseif not snd.checksomeAffs({"vomiting", "haemophilia"}, 1) then
		string = string.."cast fever "..snd.target
	elseif not snd.checksomeAffs({"clumsiness", "paresis"}, 1) then
		string = string.."cast ruin "..snd.target
	elseif snd.checkAff("sight") and not snd.checkAff("voidtrapped") then
		string = string.."cast voidgaze " ..snd.target..snd.sep
	else
		string = string.."cast ruin " ..snd.target..snd.sep
	end
	
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^kll$</regex>
								</Alias>
							</AliasGroup>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Damage</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>Basic Damage</name>
									<script>if snd.class == "Sciomancer" then
snd.starting_attack()
function snd.attack_function()
 local string = ""
 if not snd.waiting.queue then
	if snd.used.shield then
   	string = string.."cast hew "..snd.target
  elseif snd.checkAff("transfixed") then
		if not snd.checkAff("gloom") then
			if hasSkill("Fever") then
				if gmcp.Char.Vitals.shadowprice &lt; "2" then
					string = string.."shadowprice gloom "..snd.target..snd.sep.."cast fever "..snd.target
				else
					string = string.."cast gloom "..snd.target
				end
			else
				if gmcp.Char.Vitals.shadowprice &lt; "2" then
					string = string.."shadowprice gloom "..snd.target
				else
					string = string.."cast gloom "..snd.target
				end
			end
		end
  else
   		if hasSkill("Transfix") then
				string = string.."cast transfix "..snd.target
			else
				string = string.."cast rot "..snd.target
			end
  end
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^dmg$</regex>
								</Alias>
							</AliasGroup>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Limb</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>Limbs</name>
									<script>if snd.class == "Sciomancer" then
  snd.starting_attack()
  function snd.attack_function()
    local string = ""
    if not snd.waiting.queue then
      limbs = {"left leg", "right leg", "left arm", "right arm"}
      for limb in pairs(limbs) do
      -- ignore last hit and any limbs being resto'd
        if
          limbs[limb] ~= snd.last_hit_limb and
          limbs[limb] ~= snd.resto_limb
        then
          if targ == "nothing" then
            targ = limbs[limb]
          end
        end
      end

	if snd.used.shield then
   string = string.."cast hew "..snd.target
	elseif gmcp.Char.Vitals.singularity == "" then
		if hasSkill("Genesis") then
			string = string.."gravity genesis tether"
		else
			string = string.."gravity singularity"
		end
  elseif snd.gravity &lt; 5 then
		string = string.."gravity grip "..snd.target
  else
		if not snd.checkAff("a broken "..targ) then
			string = string.."gravity erupt "..snd.target..targ
		else
			if hasSkill("Transfix") then
				string = string.."cast transfix "..snd.target
			else
				string = string.."cast chill "..snd.target
			end
		end
  end
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^limbs$</regex>
								</Alias>
							</AliasGroup>
							<Alias isActive="yes" isFolder="no">
								<name>Sing Summon</name>
								<script>snd.send("qeb gravity genesis tether weight absorb attunement retardation pulsar")</script>
								<command></command>
								<packageName></packageName>
								<regex>^sing1$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>Gravity Cannon</name>
								<script>snd.send("qeb gravity cannon "..snd.target)</script>
								<command></command>
								<packageName></packageName>
								<regex>^gc$</regex>
							</Alias>
						</AliasGroup>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Praenomen</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Damage Offenses</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>damage</name>
									<script>if snd.class == "Praenomen" then
snd.starting_attack()
function snd.attack_function()
  local string = ""
  local corpus = "none"
  local touse = {}

	snd.giving_whisper = {
			"impatience",
			"loneliness",
			"stupidity",
			"anorexia",
			"confusion",
			"recklessness",
			"agoraphobia",
			"vertigo",
			"indifference",
			"peace",
			"masochism",
			"paranoia",
	}
	
			for i in pairs(snd.giving_whisper) do
				if not snd.checkAff(snd.giving_whisper[i]) then
					if not table.contains(touse, snd.giving_whisper[i]) then
						table.insert(touse, snd.giving_whisper[i])
					end
				end
			end
	
	if not snd.waiting.queue then
	 	if theytumbling then
			string = "breathe "..snd.target..snd.sep.."qeb feed "..snd.target
		elseif theyran then
			string = "lure "..snd.target
  	elseif not snd.checkAff("transfixed") then
 			string = "mesmerize "..snd.target
		else
			string = "frenzy "..snd.target..snd.sep.."whisper "..touse[1].." "..touse[2].." "..snd.target
    end
	end
	
  if string ~= snd.last_attack and not snd.waiting.queue then
   	snd.last_attack = string
   	snd.attack(snd.last_attack)
   	snd.waiting.queue = true
   	tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end

end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^dmg$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>Mes feast</name>
									<script>if snd.class == "Praenomen" then
snd.starting_attack()
function snd.attack_function()

  local string = ""
  local corpus = "none"
  local touse = {}
	
	
	snd.giving_whisper = {
			"impatience",
			"loneliness",
			"berserking",
			"stupidity",
			"confusion",
			"recklessness",
			"masochism",
			"anorexia",
			"agoraphobia",
			"vertigo",
			"indifference",
			"peace",
			"paranoia",
	}

	
  if not snd.waiting.queue then
	 	if theytumbling then
			string = "breathe "..snd.target..snd.sep.."qeb feed "..snd.target
		elseif theyran then
			string = "lure "..snd.target
  	elseif not snd.checkAff("transfixed") then
 			string = "mesmerize "..snd.target
		elseif not snd.checkAff("feast") then
			string = "blood feast "..snd.target
		else
			for i in pairs(snd.giving_whisper) do
				if not snd.checkAff(snd.giving_whisper[i]) then
					if not table.contains(touse, snd.giving_whisper[i]) then
						table.insert(touse, snd.giving_whisper[i])
					end
				end
			end
		
			string = "feed "..snd.target..snd.sep.."whisper "..touse[1].." "..touse[2].." "..snd.target
		end
	end
 
 if string ~= snd.last_attack and not snd.waiting.queue then
  snd.last_attack = string
  snd.attack(snd.last_attack)
  snd.waiting.queue = true
  tempTimer(snd.delay(), [[snd.waiting.queue = false]])
 end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^feast$</regex>
								</Alias>
							</AliasGroup>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Afflictions</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>Group Afflictions</name>
									<script>if snd.class == "Praenomen" then
snd.starting_attack()
function snd.attack_function()
 local string = ""
 local corpus = "none"
 local touse = {}
 
 
 snd.giving_whisper = {
			"impatience",
			"loneliness",
			"stupidity",
			"anorexia",
			"confusion",
			"recklessness",
			"agoraphobia",
			"vertigo",
			"indifference",
			"peace",
			"masochism",
			"paranoia",

	}
			for i in pairs(snd.giving_whisper) do
				if not snd.checkAff(snd.giving_whisper[i]) then
					if not table.contains(touse, snd.giving_whisper[i]) then
						table.insert(touse, snd.giving_whisper[i])
					end
				end
			end
	
	
  if not snd.waiting.queue then
	 	if theytumbling then
			string = "breathe "..snd.target..snd.sep.."qeb feed "..snd.target
		elseif theyran then
			string = "lure "..snd.target
		else
			string = "frenzy "..snd.target..snd.sep.."whisper "..touse[1].." "..touse[2].." "..snd.target
		end
	end
	
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^aff$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>Annhilate and Mesmerize</name>
									<script>if snd.class == "Praenomen" then
snd.starting_attack()
function snd.attack_function()
  local string = ""
  local corpus = "none"
  local touse = {}

	snd.giving_whisper = {
			"impatience",
			"loneliness",
			"stupidity",
			"anorexia",
			"confusion",
			"recklessness",
			"agoraphobia",
			"vertigo",
			"indifference",
			"peace",
			"masochism",
			"paranoia",
	}


	
  if not snd.waiting.queue then
	 	if theytumbling then
			string = "breathe "..snd.target..snd.sep.."qeb feed "..snd.target
		elseif theyran then
			string = "lure "..snd.target
		elseif snd.mana_percent &lt; 35 and not snd.used.shield then
 			string = "annihilate "..snd.target
  	elseif snd.proned() then
	 		string = "siphon "..snd.target
  	elseif not snd.checkAff("transfixed") then
 			string = "mesmerize "..snd.target
		else
			
			for i in pairs(snd.giving_whisper) do
				if not snd.checkAff(snd.giving_whisper[i]) then
					if not table.contains(touse, snd.giving_whisper[i]) then
						table.insert(touse, snd.giving_whisper[i])
					end
				end
			end
		
			string = "frenzy "..snd.target..snd.sep.."whisper "..touse[1].." "..touse[2].." "..snd.target
    end
	end

  string = "contemplate "..snd.target..snd.sep..string

 
 if string ~= snd.last_attack and not snd.waiting.queue then
  snd.last_attack = string
  snd.attack(snd.last_attack)
  snd.waiting.queue = true
  tempTimer(snd.delay(), [[snd.waiting.queue = false]])
 end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^mez$</regex>
								</Alias>
							</AliasGroup>
						</AliasGroup>
					</AliasGroup>
				</AliasGroup>
				<AliasGroup isActive="yes" isFolder="yes">
					<name>Ylem</name>
					<script></script>
					<command></command>
					<packageName></packageName>
					<regex></regex>
					<Alias isActive="yes" isFolder="no">
						<name>move on</name>
						<script>ylm.active = true
if ylm.next_zone == "none" then
 ylm.next_zone = "806"
end
snd.moving_to = ylm.next_zone
send(" ")
if ylm.next_zone == "city" then
  ylm.active = false
end</script>
						<command></command>
						<packageName></packageName>
						<regex>^goylem$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>move to next</name>
						<script>ylm.active = true
if ylm.next_zone == "none" then
  ylm.next_zone = "806"
end
ylm.next_zone = ylm.path["v" .. ylm.next_zone]
snd.moving_to = ylm.next_zone
send(" ")
if ylm.next_zone == "city" then
  ylm.active = false
end</script>
						<command></command>
						<packageName></packageName>
						<regex>^goylem next$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>move on start</name>
						<script>ylm.active = true
ylm.next_zone = "806"
snd.moving_to = ylm.next_zone
send(" ")
</script>
						<command></command>
						<packageName></packageName>
						<regex>^goylem start$</regex>
					</Alias>
				</AliasGroup>
				<AliasGroup isActive="yes" isFolder="yes">
					<name>Utilities</name>
					<script></script>
					<command></command>
					<packageName></packageName>
					<regex></regex>
					<AliasGroup isActive="yes" isFolder="yes">
						<name>Toxicology</name>
						<script></script>
						<command></command>
						<packageName></packageName>
						<regex></regex>
						<Alias isActive="yes" isFolder="no">
							<name>sacs</name>
							<script>snd.send("harvest sac from "..matches[2]..snd.sep.."drop "..matches[2])</script>
							<command></command>
							<packageName></packageName>
							<regex>^sac (\w+)$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>milking</name>
							<script>snd.send("qeb milk "..matches[2].." into fluidcache")</script>
							<command></command>
							<packageName></packageName>
							<regex>^milk (\w+)$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>cask</name>
							<script>snd.send("qeb milk "..matches[2].." into cask")</script>
							<command></command>
							<packageName></packageName>
							<regex>^cask (\w+)$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>unvenom</name>
							<script>venoms = {
"epteth",
"gecko",
"epseth",
"prefarar",
"delphinium",
"digitalis",
"curare",
"darkshade",
"hepafarin",
"monkshood",
"oculus",
"selarnia",
"kalmia",
"xentio",
"eurypteria",
"aconite",
"vernalius",
"slike",
"euphorbia",
"larkspur",
"oleander",
"voyria",
}
for venom in pairs(venoms) do
 snd.send("fc consume "..venoms[venom])
end</script>
							<command></command>
							<packageName></packageName>
							<regex>^unvenom$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>venoms</name>
							<script>venoms = {
"epteth",
"gecko",
"epseth",
"prefarar",
"aconite",
"vernalius",
"slike",
"digitalis",
"curare",
"darkshade",
"oculus",
"selarnia",
"kalmia",
"xentio",
"hepafarin",
"monkshood",
"eurypteria",
"delphinium",
"euphorbia",
"larkspur",
"oleander",
"voyria",
}
for venom in pairs(venoms) do
 snd.send("fc fill "..venoms[venom])
end</script>
							<command></command>
							<packageName></packageName>
							<regex>^venoms$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>rag</name>
							<script>snd.send("qeb craft rag")</script>
							<command></command>
							<packageName></packageName>
							<regex>^rag$</regex>
						</Alias>
					</AliasGroup>
					<Alias isActive="yes" isFolder="no">
						<name>rockcrush</name>
						<script>snd.send("qeb rockcrush rock for ink")</script>
						<command></command>
						<packageName></packageName>
						<regex>^rc$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>harvest rock</name>
						<script>snd.send("qeb harvest rock")</script>
						<command></command>
						<packageName></packageName>
						<regex>^hr$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>priceall</name>
						<script>snd.shopitem = matches[2]
snd.shopprice = matches[3]
snd.shopshelf = matches[4]
snd.shopih = true
snd.send("ih "..snd.shopitem)</script>
						<command></command>
						<packageName></packageName>
						<regex>^priceall (\w+) (\d+) (\d+)$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>buy herbs</name>
						<script>pills = {
"waterbreathing",
"kawhepil",
"acuity",
"steroid",
"stimulant",
"coagulation",
"thanatonin",
"paste",
"somnium",
"ototoxin",
"decongestant",
"amaurosis",
"depressant",
"antipsychotic",
"panacea",
"euphoriant",
"anabiotic",
}
for pill in pairs(pills) do
 snd.send("buy "..matches[2].." "..pills[pill])
end</script>
						<command></command>
						<packageName></packageName>
						<regex>^bh (\d+)$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>OOC</name>
						<script>send("tell " .. matches[2] .. " (( " .. matches[3] .. " ))", false)</script>
						<command></command>
						<packageName></packageName>
						<regex>^ooc (\w+) (.+)$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Check stuff</name>
						<script>send("pull "..matches[2])
send("look in "..matches[2])
send("push "..matches[2])
send("turn "..matches[2])
send("enter "..matches[2])
send("read "..matches[2])
send("touch "..matches[2])
send("ponder "..matches[2])
send("probe "..matches[2])</script>
						<command></command>
						<packageName></packageName>
						<regex>^check (\w+)$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>who groups</name>
						<script>enableTrigger("who groups")
send("who")
tempTimer(1, [[disableTrigger'who groups']])</script>
						<command></command>
						<packageName></packageName>
						<regex>^whos$</regex>
					</Alias>
				</AliasGroup>
				<AliasGroup isActive="yes" isFolder="yes">
					<name>Fishing</name>
					<script></script>
					<command></command>
					<packageName></packageName>
					<regex></regex>
					<Alias isActive="yes" isFolder="no">
						<name>FishingGo</name>
						<script>local results = get_fishing_holes(matches[2], true)
if #results == 1 then
	echo("Pathing to " .. results[1].name .. ".\n")
	results[1].rooms = results[1].rooms or {}
	if #results[1].rooms &lt;= 0 then
		echo("That fishing hole has no rooms saved. Aborting.\n")
		return
	else
		send("path find " .. results[1].rooms[1])
	end
	if gmcp.Char.Vitals.mounted == "0" then
		send("path go dash")
	else
		send("path go gallop")
	end
else
	echo("Please specify a unique fishing location.\n")
end</script>
						<command></command>
						<packageName></packageName>
						<regex>^fgo (.+)$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>FishSearch</name>
						<script>get_fishing_holes(matches[3], true, (matches[2] ~= ""))
</script>
						<command></command>
						<packageName></packageName>
						<regex>^fishing search\s*(full|info)*\s*(.+)$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>ToggleAutoFish</name>
						<script>if currently_fishing then
	echo("Autofishing disabled.\n")
	if currently_fishing then snd.send("qeb fishing cut") end
	expandAlias("wbsh", false)
	currently_fishing = false
else
	expandAlias("wnon", false)
	echo("Autofishing enabled.\n")
	currently_fishing = true
	snd.send("wield pole"..snd.sep.."qeb fishing cast")
end</script>
						<command></command>
						<packageName></packageName>
						<regex>^afish$</regex>
					</Alias>
				</AliasGroup>
				<Alias isActive="yes" isFolder="no">
					<name>firstaidstart</name>
					<script>send("firstaid on")
send("firstaid reporting on")
send("firstaid health 85")  
send("firstaid mana 90")
send("firstaid forcehealth 40")
send("firstaid forcemana 60")
send("firstaid anabiotic health 80")
send("firstaid anabiotic mana 80")
send("firstaid vitals priority health")
send("firstaid stop mana below 45")
send("firstaid curing on")
send("firstaid defence on")
send("firstaid heal health on")
send("firstaid heal mana on") 
send("firstaid use anabiotic on") 
send("firstaid auto stand on")
send("firstaid auto wake on")
send("firstaid use tree on")
send("firstaid use focus on")
send("firstaid use endgame on")
send("firstaid use insomnia on")
send("firstaid use clot on")
send("firstaid clot at 30")  
send("firstaid clot above 60") 
send("firstaid stupidity double on")
send("firstaid adder 3")
send("firstaid precache 3")
send("firstaid prerestore on")
send("firstaid halt for channel on")
send("FIRSTAID PRIORITY PRESTORE LEFT LEG 15% 8")
send("FIRSTAID PRIORITY PRESTORE RIGHT LEG 15% 8")
send("FIRSTAID PRIORITY PRESTORE RIGHT ARM 15% 8")
send("FIRSTAID PRIORITY PRESTORE LEFT ARM 15% 8")
send("FIRSTAID PRIORITY PRESTORE torso 15% 8")
send("FIRSTAID PRIORITY PRESTORE head 15% 8")
send("firstaid priority reset")
send("firstaid priority left_arm_bruised_critical 2")
send("firstaid priority right_arm_bruised_critical 2")
send("firstaid priority left_leg_bruised_critical 2")
send("firstaid priority right_leg_bruised_critical 2")
send("firstaid priority torso_bruised_critical 2")
send("firstaid priority left_arm_bruised_moderate 2")
send("firstaid priority right_arm_bruised_moderate 2")
send("firstaid priority left_leg_bruised_moderate 2")
send("firstaid priority right_leg_bruised_moderate 2")
send("firstaid priority torso_bruised_moderate 2")
send("firstaid priority head_bruised_moderate 2")
send("firstaid priority defence insulation 8")
send("firstaid priority defence density 1")
send("firstaid priority defence temperance 2")
send("firstaid priority defence levitation 1")
send("firstaid priority defence speed 1")
send("firstaid priority defence venom_resistance 4")
send("firstaid priority defence fangbarrier 1")
send("firstaid priority defence insomnia 1")
send("firstaid priority defence instawake 2")
send("firstaid priority defence waterbreathing 3")
send("firstaid priority defence deafness 4")
send("firstaid priority defence blindness 3")	
send("firstaid priority crippled_body 1")
send("firstaid priority paralysis 1")
send("firstaid priority paralysis 2")
send("firstaid priority anorexia 1")
send("firstaid priority ringing_ears 2")
send("firstaid priority clumsiness 2")
send("firstaid priority paresis 3")
send("firstaid priority sandrot 3")
send("firstaid priority thin_blood 3")
send("firstaid priority soulfire 3")
send("firstaid priority frozen 3")
send("firstaid priority nyctophobia 3")
send("firstaid priority baldness 4")
send("firstaid priority hypochondria 4")
send("firstaid priority impatience 4")
send("firstaid priority infested 4")
send("firstaid priority mirroring 4")
send("firstaid priority pacifism 4")
send("firstaid priority patterns 4")
send("firstaid priority recklessness 4")
send("firstaid priority weariness 4")
send("firstaid priority shivering 4")
send("firstaid priority blighted 5")
send("firstaid priority blood_curse 5")
send("firstaid priority blood_poison 5")
send("firstaid priority confusion 5")
send("firstaid priority idiocy 5")
send("firstaid priority mental_disruption 5")
send("firstaid priority merciful 5")
send("firstaid priority physical_disruption 5")
send("firstaid priority plodding 5")
send("firstaid priority allergies 6")
send("firstaid priority crippled 6")
send("firstaid priority epilepsy 6")
send("firstaid priority haemophilia 6")
send("firstaid priority impairment 6")
send("firstaid priority lethargy 6")
send("firstaid priority loneliness 6")
send("firstaid priority masochism 6")
send("firstaid priority rend 6")
send("firstaid priority sensitivity 6")
send("firstaid priority vomiting 6")
send("firstaid priority heatspear 6")
send("firstaid priority berserking 7")
send("firstaid priority egocentric 7")
send("firstaid priority exhausted 7")
send("firstaid priority hallucinations 7")
send("firstaid priority hatred 7")
send("firstaid priority heartflutter 7")
send("firstaid priority hypersomnia 7")
send("firstaid priority hypothermia 7")
send("firstaid priority justice 7")
send("firstaid priority laxity 7")
send("firstaid priority lovers_effect 7")
send("firstaid priority peace 7")
send("firstaid priority stupidity 7")
send("firstaid priority agoraphobia 8")
send("firstaid priority claustrophobia 8")
send("firstaid priority dementia 8")
send("firstaid priority dissonance 8")
send("firstaid priority dizziness 8")
send("firstaid priority faintness 8")
send("firstaid priority paranoia 8")
send("firstaid priority shyness 8")
send("firstaid priority vertigo 8")
send("firstaid priority addiction 9")
send("firstaid priority body_odor 9")
send("firstaid priority commitment_fear 9")
send("firstaid priority hubris 9")
send("firstaid priority magnanimity 9")
send("firstaid priority sadness 9")
send("firstaid priority self-pity 9")
send("firstaid priority blisters 10")
send("firstaid priority generosity 10")
send("firstaid priority superstition 10")</script>
					<command></command>
					<packageName></packageName>
					<regex>^firstaidstart$</regex>
				</Alias>
			</AliasGroup>
			<Alias isActive="yes" isFolder="no">
				<name>Version</name>
				<script>cecho("\n &lt;green&gt;"..snd.version)</script>
				<command></command>
				<packageName></packageName>
				<regex>^version$</regex>
			</Alias>
		</AliasGroup>
	</AliasPackage>
	<ActionPackage />
	<ScriptPackage />
	<KeyPackage />
	<HelpPackage>
		<helpURL></helpURL>
	</HelpPackage>
</MudletPackage>
